
using java.awt.@event;
using java.awt.geom;
using java.awt.image;



using java.text;

using javax.swing;
using javax.swing.@event;


/*[Implements(new string[]
{
	"java.awt.event.MouseListener",
	"java.awt.event.MouseMotionListener",
	"java.awt.event.MouseWheelListener",
	"java.awt.event.KeyListener",
	"java.awt.event.ActionListener",
	"javax.swing.event.ChangeListener",
	"java.awt.event.ComponentListener",
	"java.awt.event.WindowFocusListener"
})]*/
public sealed class StdDraw3D, MouseListener, EventListener, MouseMotionListener, MouseWheelListener, KeyListener, ActionListener, ChangeListener, ComponentListener, WindowFocusListener
{
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Camera : StdDraw3D.Transformable
	{
		private object tg;
		private StdDraw3D.Shape pair;
		
		
		private Camera(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Camera).TypeHandle, "javax.media.j3d.TransformGroup");
			object obj2 = null;
			base..ctor(obj, obj2);
			this.tg = obj;
		}
		
		
		public virtual void rotateFPS(double d1, double d2, double d3)
		{
			double d4 = java.lang.Math.toRadians(d1);
			double num = java.lang.Math.toRadians(d2);
			double d5 = java.lang.Math.toRadians(d3);
			StdDraw3D.Vector3D sddvd = StdDraw3D.Transformable.access_2300(this, new StdDraw3D.Vector3D(-num, d4, d5));
			StdDraw3D.Vector3D vector3D = base.getDirection().plus(sddvd);
			double num2 = vector3D.angle(StdDraw3D.access_1500());
			if (num2 > 90.0)
			{
				num2 = 180.0 - num2;
			}
			if (num2 < 5.0)
			{
				return;
			}
			base.setDirection(base.getDirection().plus(sddvd));
		}
		
		
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access_1900(this, sdds);
		}
		public virtual void pair(StdDraw3D.Shape sdds)
		{
			this.pair = sdds;
		}
		public virtual void unpair()
		{
			this.pair = null;
		}
		
		
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			StdDraw3D.access_2000();
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
		
		
		public virtual void rotateFPS(StdDraw3D.Vector3D sddvd)
		{
			this.rotateFPS(sddvd.__x, sddvd.__y, sddvd.__z);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Synthetic)]*/
		
		internal Camera(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Camera).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Camera).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
/*		[LineNumberTable(3969), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		internal static StdDraw3D.Shape access_200(StdDraw3D.Camera camera)
		{
			return camera.pair;
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Light : StdDraw3D.Transformable
	{
		internal object light;
		internal object bg;
/*		[LineNumberTable(4119), Modifiers(Modifiers.Synthetic)]*/
		
		internal Light(object obj, object obj2, object obj3, object obj4)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.Light");
			ByteCodeHelper.DynamicCast(obj4, typeof(StdDraw3D.Light).TypeHandle, "StdDraw3D$1");
			this..ctor(obj, obj2, obj3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
		
		
		public virtual void scalePower(double d)
		{
			if (ByteCodeHelper.DynamicInstanceOf(this.light, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.PointLight"))
			{
				double arg_34_0 = (double)1f / (0.999 * d + 0.001);
				ByteCodeHelper.DynamicCast(this.light, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.PointLight");
				throw new NoClassDefFoundError("javax.vecmath.Point3f");
			}
			System.err.println("Can only scale power for point lights!");
		}
		
		
		private Light(object obj, object obj2, object obj3)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.Light");
			object obj4 = null;
			base..ctor(obj2, obj4);
			this.light = obj3;
			this.bg = obj;
		}
		
		public virtual void hide()
		{
			this.light;
			0;
			throw new NoClassDefFoundError("javax.media.j3d.Light");
		}
		
		public virtual void unhide()
		{
			this.light;
			1;
			throw new NoClassDefFoundError("javax.media.j3d.Light");
		}
		
		
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access_1900(this, sdds);
		}
		
		
		public virtual void match(StdDraw3D.Camera sddc)
		{
			StdDraw3D.Transformable.access_1900(this, sddc);
		}
		
		public virtual void setColor(Color c)
		{
			this.light;
			throw new NoClassDefFoundError("javax.vecmath.Color3f");
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			base.moveRelative(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
/*		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Shape : StdDraw3D.Transformable
	{
		private object bg;
		private object tg;
/*		[LineNumberTable(4025), Modifiers(Modifiers.Synthetic)]*/
		
		internal Shape(object obj, object obj2, object obj3)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Shape).TypeHandle, "StdDraw3D$1");
			this..ctor(obj, obj2);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		internal static object access_900(StdDraw3D.Shape shape)
		{
			return shape.bg;
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		internal static object access_1000(StdDraw3D.Shape shape)
		{
			return shape.tg;
		}
		
		
		public virtual void scale(double d)
		{
			object obj = StdDraw3D.Transformable.access_2400(this);
			obj;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
		
		
		private Shape(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.TransformGroup");
			object obj3 = null;
			base..ctor(obj2, obj3);
			this.bg = obj;
			this.tg = obj2;
			obj2;
			17;
			throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
		}
		
		
		public virtual void hide()
		{
			StdDraw3D.access_2600();
			this.bg;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
		
		private void setColor(object obj, Color color)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.Group");
			int num = 0;
			num;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Group");
		}
		
		
		public virtual void setColor(Color c)
		{
			this.setColor(this.tg, c);
		}
		
		private void setColor(object obj, Color color)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.Appearance");
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Appearance");
		}
		
		
		public virtual void unhide()
		{
			this.hide();
			StdDraw3D.access_2600();
			this.bg;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
		
		
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access_1900(this, sdds);
		}
		
		
		public virtual void match(StdDraw3D.Camera sddc)
		{
			StdDraw3D.Transformable.access_1900(this, sddc);
		}
		
		
		public virtual void setColor(Color c, int i)
		{
			Color.__<clinit>();
			this.setColor(new Color(c.getRed(), c.getGreen(), c.getBlue(), i));
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			base.moveRelative(sddvd);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
/*		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]*/
		
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), SourceFile("StdDraw3D.java")]
	internal class Transformable
	{
		private object tg;
		
		private void setTransform(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.Transform3D");
			this.tg;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
		}
		
		private object getTransform()
		{
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		private StdDraw3D.Vector3D relToAbs(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		
		
		private void match(StdDraw3D.Transformable transformable)
		{
			this.setOrientation(transformable.getOrientation());
			this.setPosition(transformable.getPosition());
		}
		
		
		private Transformable(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.TransformGroup");
			base..ctor();
			this.tg = obj;
		}
		
		
		private void rotateQuat(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.vecmath.Quat4d");
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		private void setQuaternion(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.vecmath.Quat4d");
			object transform = this.getTransform();
			transform;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		private StdDraw3D.Vector3D absToRel(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		
		
		public virtual void move(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Vector3f");
		}
		
		
		public virtual void moveRelative(StdDraw3D.Vector3D vector3D)
		{
			this.move(this.relToAbs(vector3D.times((double)1f, (double)1f, -1.0)));
		}
		
		
		public virtual void setPosition(StdDraw3D.Vector3D vector3D)
		{
			object transform = this.getTransform();
			transform;
			StdDraw3D.access_1100(vector3D);
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		public virtual void rotate(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		public virtual void rotateRelative(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		public virtual void setOrientation(StdDraw3D.Vector3D vector3D)
		{
			if (java.lang.Math.abs(vector3D.__y) == 90.0)
			{
				System.err.println("Gimbal lock when the y-angle is vertical!");
			}
			this.getTransform();
			vector3D.times(0.017453292519943295);
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		public virtual void lookAt(StdDraw3D.Vector3D vector3D, StdDraw3D.Vector3D vector3D2)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		
		
		public virtual void setDirection(StdDraw3D.Vector3D sddvd, StdDraw3D.Vector3D vector3D)
		{
			StdDraw3D.Vector3D vector3D2 = this.getPosition().plus(sddvd);
			this.lookAt(vector3D2, vector3D);
		}
		
		
		public virtual StdDraw3D.Vector3D getPosition()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Vector3d");
		}
		
		
		public virtual StdDraw3D.Vector3D getOrientation()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		
		private void rotateQuat(double num, double num2, double num3, double num4)
		{
			this;
			throw new NoClassDefFoundError("javax.vecmath.Quat4d");
		}
		
		private void setQuaternion(double num, double num2, double num3, double num4)
		{
			this;
			throw new NoClassDefFoundError("javax.vecmath.Quat4d");
		}
		
		
		private object getQuaternion()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		
		
		private void orientAxis(StdDraw3D.Vector3D vector3D, double num)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.AxisAngle4d");
		}
		
		
		public virtual void rotateAxis(StdDraw3D.Vector3D vector3D, double num)
		{
			if (num == (double)0f)
			{
				return;
			}
			this.getTransform();
			this.absToRel(vector3D);
			throw new NoClassDefFoundError("javax.vecmath.AxisAngle4d");
		}
		
		
		public virtual void move(double num, double num2, double num3)
		{
			this.move(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void moveRelative(double num, double num2, double num3)
		{
			this.moveRelative(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void setPosition(double num, double num2, double num3)
		{
			this.setPosition(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void rotate(double num, double num2, double num3)
		{
			this.rotate(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void rotateRelative(double num, double num2, double num3)
		{
			this.rotateRelative(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void setOrientation(double num, double num2, double num3)
		{
			this.setOrientation(new StdDraw3D.Vector3D(num, num2, num3));
		}
		
		
		public virtual void lookAt(StdDraw3D.Vector3D vector3D)
		{
			this.lookAt(vector3D, StdDraw3D.access_1500());
		}
		
		
		public virtual void setDirection(StdDraw3D.Vector3D vector3D)
		{
			this.setDirection(vector3D, StdDraw3D.access_1500());
		}
		
		
		public virtual StdDraw3D.Vector3D getDirection()
		{
			return this.relToAbs(StdDraw3D.access_1600().times(-1.0)).direction();
		}
/*		[LineNumberTable(3608), Modifiers(Modifiers.Synthetic)]*/
		
		internal Transformable(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Transformable).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
/*		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		
		internal static void access_1900(StdDraw3D.Transformable transformable, StdDraw3D.Transformable transformable2)
		{
			transformable.match(transformable2);
		}
/*		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		
		internal static StdDraw3D.Vector3D access_2300(StdDraw3D.Transformable transformable, StdDraw3D.Vector3D vector3D)
		{
			return transformable.relToAbs(vector3D);
		}
/*		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		
		internal static object access_2400(StdDraw3D.Transformable transformable)
		{
			return transformable.getTransform();
		}
/*		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
		
		internal static void access_2500(StdDraw3D.Transformable transformable, object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.Transform3D");
			transformable.setTransform(obj);
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Vector3D
	{
		internal double __x;
		internal double __y;
		internal double __z;
//[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double x
		{
			
			get
			{
				return this.__x;
			}
			
			private set
			{
				this.__x = value;
			}
		}
//[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double y
		{
			
			get
			{
				return this.__y;
			}
			
			private set
			{
				this.__y = value;
			}
		}
//[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double z
		{
			
			get
			{
				return this.__z;
			}
			
			private set
			{
				this.__z = value;
			}
		}
/*		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]*/
		
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3f");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		
		
		public Vector3D(double d1, double d2, double d3)
		{
			this.__x = d1;
			this.__y = d2;
			this.__z = d3;
		}
		
		
		public virtual StdDraw3D.Vector3D times(double d1, double d2, double d3)
		{
			double d4 = this.__x * d1;
			double d5 = this.__y * d2;
			double d6 = this.__z * d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
/*		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]*/
		
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3d");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		
		
		public virtual StdDraw3D.Vector3D times(double d)
		{
			return this.times(d, d, d);
		}
		
		
		public virtual StdDraw3D.Vector3D plus(StdDraw3D.Vector3D sddvd)
		{
			double d = this.__x + sddvd.__x;
			double d2 = this.__y + sddvd.__y;
			double d3 = this.__z + sddvd.__z;
			return new StdDraw3D.Vector3D(d, d2, d3);
		}
		
		
		public virtual StdDraw3D.Vector3D direction()
		{
			if (this.mag() == (double)0f)
			{
				string arg_17_0 = "Zero-vector has no direction";
				
				throw new RuntimeException(arg_17_0);
			}
			return this.times((double)1f / this.mag());
		}
		
		
		public virtual double angle(StdDraw3D.Vector3D sddvd)
		{
			return java.lang.Math.toDegrees(java.lang.Math.acos(this.dot(sddvd) / (this.mag() * sddvd.mag())));
		}
/*		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]*/
		
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3d");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		
		
		public virtual double mag()
		{
			return java.lang.Math.sqrt(this.dot(this));
		}
		
		
		public virtual StdDraw3D.Vector3D cross(StdDraw3D.Vector3D sddvd)
		{
			return new StdDraw3D.Vector3D(this.__y * sddvd.__z - this.__z * sddvd.__y, this.__z * sddvd.__x - this.__x * sddvd.__z, this.__x * sddvd.__y - this.__y * sddvd.__x);
		}
		
		
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3d");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Vector3d");
		}
		
		
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3f");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Vector3f");
		}
		
		
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3d");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Point3d");
		}
		
		public virtual double dot(StdDraw3D.Vector3D sddvd)
		{
			return this.__x * sddvd.__x + this.__y * sddvd.__y + this.__z * sddvd.__z;
		}
		
		
		public virtual StdDraw3D.Vector3D minus(StdDraw3D.Vector3D sddvd)
		{
			double d = this.__x - sddvd.__x;
			double d2 = this.__y - sddvd.__y;
			double d3 = this.__z - sddvd.__z;
			return new StdDraw3D.Vector3D(d, d2, d3);
		}
		
		
		public virtual StdDraw3D.Vector3D proj(StdDraw3D.Vector3D sddvd)
		{
			StdDraw3D.Vector3D vector3D = sddvd.direction();
			return vector3D.times(this.dot(vector3D));
		}
		
		
		public Vector3D()
		{
			this.__x = (double)0f;
			this.__y = (double)0f;
			this.__z = (double)0f;
		}
		
		
		public Vector3D(double[] darr)
		{
			if (darr.Length != 3)
			{
				string arg_17_0 = "Incorrect number of dimensions!";
				
				throw new RuntimeException(arg_17_0);
			}
			this.__x = darr[0];
			this.__y = darr[1];
			this.__z = darr[2];
		}
		
		
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3f");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Point3f");
		}
		
		
		public virtual double distanceTo(StdDraw3D.Vector3D sddvd)
		{
			return this.minus(sddvd).mag();
		}
		
		
		public virtual StdDraw3D.Vector3D plus(double d1, double d2, double d3)
		{
			double d4 = this.__x + d1;
			double d5 = this.__y + d2;
			double d6 = this.__z + d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
		
		
		public virtual StdDraw3D.Vector3D minus(double d1, double d2, double d3)
		{
			double d4 = this.__x - d1;
			double d5 = this.__y - d2;
			double d6 = this.__z - d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
		
		
		public virtual StdDraw3D.Vector3D reflect(StdDraw3D.Vector3D sddvd)
		{
			return this.proj(sddvd).times(2.0).minus(this);
		}
		
		
		public override string ToString()
		{
			DecimalFormat decimalFormat = new DecimalFormat("0.000000");
			return new StringBuilder().append("( ").append(decimalFormat.format(this.__x)).append(", ").append(decimalFormat.format(this.__y)).append(", ").append(decimalFormat.format(this.__z)).append(" )").toString();
		}
		
		
		public virtual void draw()
		{
			StdDraw3D.sphere(this.__x, this.__y, this.__z, 0.01);
		}
	}
	internal static Color __BLACK;
	internal static Color __BLUE;
	internal static Color __CYAN;
	internal static Color __DARK_GRAY;
	internal static Color __GRAY;
	internal static Color __GREEN;
	internal static Color __LIGHT_GRAY;
	internal static Color __MAGENTA;
	internal static Color __ORANGE;
	internal static Color __PINK;
	internal static Color __RED;
	internal static Color __WHITE;
	internal static Color __YELLOW;
	public const int ORBIT_MODE = 0;
	public const int FPS_MODE = 1;
	public const int AIRPLANE_MODE = 2;
	public const int LOOK_MODE = 3;
	public const int FIXED_MODE = 4;
	public const int IMMERSIVE_MODE = 5;
	private static JFrame frame;
	private static Panel canvasPanel;
	private static JMenuBar menuBar;
	private static JMenu fileMenu;
	private static JMenu cameraMenu;
	private static JMenu graphicsMenu;
	private static JMenuItem loadButton;
	private static JMenuItem saveButton;
	private static JMenuItem save3DButton;
	private static JMenuItem quitButton;
	private static JSpinner fovSpinner;
	private static JRadioButtonMenuItem orbitModeButton;
	private static JRadioButtonMenuItem fpsModeButton;
	private static JRadioButtonMenuItem airplaneModeButton;
	private static JRadioButtonMenuItem lookModeButton;
	private static JRadioButtonMenuItem fixedModeButton;
	private static JRadioButtonMenuItem perspectiveButton;
	private static JRadioButtonMenuItem parallelButton;
	private static JCheckBoxMenuItem antiAliasingButton;
	private static JSpinner numDivSpinner;
	private static JCheckBox infoCheckBox;
	private static object universe;
	private static object rootGroup;
	private static object lightGroup;
	private static object soundGroup;
	private static object fogGroup;
	private static object appearanceGroup;
	private static object onscreenGroup;
	private static object offscreenGroup;
	private static object orbit;
	private static object background;
	private static object bgGroup;
	private static object view;
	private static object canvas;
	private static StdDraw3D.Camera camera;
	private static BufferedImage offscreenImage;
	private static BufferedImage onscreenImage;
	private static BufferedImage infoImage;
	private static int width;
	private static int height;
	private static double aspectRatio;
	private static int cameraMode;
	private static object orbitCenter;
	private static double min;
	private static double max;
	private static double zoom;
	private static Color bgColor;
	private static Color penColor;
	private static float penRadius;
	private static Font font;
	private static bool clear3D;
	private static bool clearOverlay;
	private static bool infoDisplay;
	private static int numDivisions;
	private static bool mouse1;
	private static bool mouse2;
	private static bool mouse3;
	private static double mouseX;
	private static double mouseY;
//[Signature("Ljava/util/TreeSet<Ljava/lang/Integer;>;")]
	private static TreeSet keysDown;
//[Signature("Ljava/util/LinkedList<Ljava/lang/Character;>;")]
	private static LinkedList keysTyped;
	private static object mouseLock;
	private static object keyLock;
	private static bool initialized;
	private static bool fullscreen;
	private static bool immersive;
	private static bool showedOnce;
	private static bool renderedOnce;
	private const int DEFAULT_SIZE = 600;
	private const double DEFAULT_MIN = 0.0;
	private const double DEFAULT_MAX = 1.0;
	private const int DEFAULT_CAMERA_MODE = 0;
	private const double DEFAULT_FOV = 0.9;
	private const int DEFAULT_NUM_DIVISIONS = 100;
	private const double DEFAULT_FRONT_CLIP = 0.01;
	private const double DEFAULT_BACK_CLIP = 10.0;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Font DEFAULT_FONT;
	private const double DEFAULT_PEN_RADIUS = 0.002;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_PEN_COLOR;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_BGCOLOR;
	private const double TEXT3D_SHRINK_FACTOR = 0.005;
	private const double TEXT3D_DEPTH = 1.5;
	private const int PRIMFLAGS = 3;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static object INFINITE_BOUNDS;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D xAxis;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D yAxis;
//[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D zAxis;
	private static StdDraw3D std;
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLACK
	{
		
		get
		{
			return StdDraw3D.__BLACK;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLUE
	{
		
		get
		{
			return StdDraw3D.__BLUE;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color CYAN
	{
		
		get
		{
			return StdDraw3D.__CYAN;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color DARK_GRAY
	{
		
		get
		{
			return StdDraw3D.__DARK_GRAY;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GRAY
	{
		
		get
		{
			return StdDraw3D.__GRAY;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GREEN
	{
		
		get
		{
			return StdDraw3D.__GREEN;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color LIGHT_GRAY
	{
		
		get
		{
			return StdDraw3D.__LIGHT_GRAY;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color MAGENTA
	{
		
		get
		{
			return StdDraw3D.__MAGENTA;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color ORANGE
	{
		
		get
		{
			return StdDraw3D.__ORANGE;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color PINK
	{
		
		get
		{
			return StdDraw3D.__PINK;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color RED
	{
		
		get
		{
			return StdDraw3D.__RED;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color WHITE
	{
		
		get
		{
			return StdDraw3D.__WHITE;
		}
	}
//[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color YELLOW
	{
		
		get
		{
			return StdDraw3D.__YELLOW;
		}
	}
	
	
/*	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
	
	internal static object access_1100(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3f(vector3D);
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access_1400()
	{
		return StdDraw3D.xAxis;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access_1500()
	{
		return StdDraw3D.yAxis;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access_1600()
	{
		return StdDraw3D.zAxis;
	}
/*	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
	
	internal static object access_1700(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3d(vector3D);
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access_2000()
	{
		return StdDraw3D.view;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access_2100()
	{
		return StdDraw3D.zoom;
	}
/*	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]*/
	
	internal static void access_2200(double num)
	{
		StdDraw3D.setScreenScale(num);
	}
	
	private static void setScreenScale(double num)
	{
		num;
		StdDraw3D.view;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	
	private static object createVector3d(StdDraw3D.Vector3D vector3D)
	{
		throw new NoClassDefFoundError("javax.vecmath.Vector3d");
	}
	
	
	private static object createVector3f(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3f(vector3D.__x, vector3D.__y, vector3D.__z);
	}
	
	
	private static BufferedImage createBufferedImage()
	{
		BufferedImage.__<clinit>();
		return new BufferedImage(StdDraw3D.width, StdDraw3D.height, 2);
	}
	
	
	private static void initializeCanvas()
	{
		Panel panel = new Panel();
		GridBagLayout layout = new GridBagLayout();
		GridBagConstraints gridBagConstraints = new GridBagConstraints();
		panel.setLayout(layout);
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 5;
		gridBagConstraints.gridheight = 5;
		throw new NoClassDefFoundError("com.sun.j3d.utils.universe.SimpleUniverse");
	}
	
	
	private static JMenuBar createMenuBar()
	{
		StdDraw3D.menuBar = new JMenuBar();
		StdDraw3D.fileMenu = new JMenu("File");
		StdDraw3D.menuBar.add(StdDraw3D.fileMenu);
		StdDraw3D.loadButton = new JMenuItem(" Load 3D Model..  ");
		StdDraw3D.loadButton.addActionListener(StdDraw3D.std);
		StdDraw3D.loadButton.setAccelerator(KeyStroke.getKeyStroke(76, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.loadButton);
		StdDraw3D.saveButton = new JMenuItem(" Save Image...  ");
		StdDraw3D.saveButton.addActionListener(StdDraw3D.std);
		StdDraw3D.saveButton.setAccelerator(KeyStroke.getKeyStroke(83, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.saveButton);
		StdDraw3D.save3DButton = new JMenuItem(" Export 3D Scene...  ");
		StdDraw3D.save3DButton.addActionListener(StdDraw3D.std);
		StdDraw3D.save3DButton.setAccelerator(KeyStroke.getKeyStroke(69, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.addSeparator();
		StdDraw3D.quitButton = new JMenuItem(" Quit...   ");
		StdDraw3D.quitButton.addActionListener(StdDraw3D.std);
		StdDraw3D.quitButton.setAccelerator(KeyStroke.getKeyStroke(81, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.quitButton);
		StdDraw3D.cameraMenu = new JMenu("Camera");
		StdDraw3D.menuBar.add(StdDraw3D.cameraMenu);
		JLabel jLabel = new JLabel("Camera Mode");
		jLabel.setAlignmentX(0.5f);
		jLabel.setForeground(StdDraw3D.__GRAY);
		StdDraw3D.cameraMenu.add(jLabel);
		StdDraw3D.cameraMenu.addSeparator();
		ButtonGroup buttonGroup = new ButtonGroup();
		StdDraw3D.orbitModeButton = new JRadioButtonMenuItem("Orbit Mode");
		StdDraw3D.orbitModeButton.setSelected(true);
		buttonGroup.add(StdDraw3D.orbitModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.orbitModeButton);
		StdDraw3D.orbitModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.orbitModeButton.setAccelerator(KeyStroke.getKeyStroke(49, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fpsModeButton = new JRadioButtonMenuItem("First-Person Mode");
		buttonGroup.add(StdDraw3D.fpsModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.fpsModeButton);
		StdDraw3D.fpsModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.fpsModeButton.setAccelerator(KeyStroke.getKeyStroke(50, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.airplaneModeButton = new JRadioButtonMenuItem("Airplane Mode");
		buttonGroup.add(StdDraw3D.airplaneModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.airplaneModeButton);
		StdDraw3D.airplaneModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.airplaneModeButton.setAccelerator(KeyStroke.getKeyStroke(51, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.lookModeButton = new JRadioButtonMenuItem("Look Mode");
		buttonGroup.add(StdDraw3D.lookModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.lookModeButton);
		StdDraw3D.lookModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.lookModeButton.setAccelerator(KeyStroke.getKeyStroke(52, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fixedModeButton = new JRadioButtonMenuItem("Fixed Mode");
		buttonGroup.add(StdDraw3D.fixedModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.fixedModeButton);
		StdDraw3D.fixedModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.fixedModeButton.setAccelerator(KeyStroke.getKeyStroke(53, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.cameraMenu.addSeparator();
		JLabel jLabel2 = new JLabel("Projection Mode");
		jLabel2.setAlignmentX(0.5f);
		jLabel2.setForeground(StdDraw3D.__GRAY);
		StdDraw3D.cameraMenu.add(jLabel2);
		StdDraw3D.cameraMenu.addSeparator();
		SpinnerNumberModel model = new SpinnerNumberModel(0.9, 0.5, 3.0, 0.05);
		StdDraw3D.fovSpinner = new JSpinner(model);
		JPanel jPanel = new JPanel();
		jPanel.setLayout(new BoxLayout(jPanel, 0));
		JLabel comp = new JLabel("Field of View:");
		jPanel.add(Box.createRigidArea(new Dimension(30, 5)));
		jPanel.add(comp);
		jPanel.add(Box.createRigidArea(new Dimension(10, 5)));
		jPanel.add(StdDraw3D.fovSpinner);
		ButtonGroup buttonGroup2 = new ButtonGroup();
		StdDraw3D.perspectiveButton = new JRadioButtonMenuItem("Perspective Projection");
		StdDraw3D.parallelButton = new JRadioButtonMenuItem("Parallel Projection");
		StdDraw3D.fovSpinner.addChangeListener(StdDraw3D.std);
		StdDraw3D.perspectiveButton.addActionListener(StdDraw3D.std);
		StdDraw3D.parallelButton.addActionListener(StdDraw3D.std);
		StdDraw3D.cameraMenu.add(StdDraw3D.parallelButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.perspectiveButton);
		StdDraw3D.cameraMenu.add(jPanel);
		buttonGroup2.add(StdDraw3D.parallelButton);
		buttonGroup2.add(StdDraw3D.perspectiveButton);
		StdDraw3D.perspectiveButton.setSelected(true);
		StdDraw3D.graphicsMenu = new JMenu("Graphics");
		JLabel jLabel3 = new JLabel("Polygon Count");
		jLabel3.setAlignmentX(0.5f);
		jLabel3.setForeground(StdDraw3D.__GRAY);
		StdDraw3D.graphicsMenu.add(jLabel3);
		StdDraw3D.graphicsMenu.addSeparator();
		SpinnerNumberModel model2 = new SpinnerNumberModel(100, 4, 4000, 5);
		StdDraw3D.numDivSpinner = new JSpinner(model2);
		JPanel jPanel2 = new JPanel();
		jPanel2.setLayout(new BoxLayout(jPanel2, 0));
		JLabel comp2 = new JLabel("Triangles:");
		jPanel2.add(Box.createRigidArea(new Dimension(5, 5)));
		jPanel2.add(comp2);
		jPanel2.add(Box.createRigidArea(new Dimension(15, 5)));
		jPanel2.add(StdDraw3D.numDivSpinner);
		StdDraw3D.graphicsMenu.add(jPanel2);
		StdDraw3D.numDivSpinner.addChangeListener(StdDraw3D.std);
		StdDraw3D.graphicsMenu.addSeparator();
		JLabel jLabel4 = new JLabel("Advanced Rendering");
		jLabel4.setAlignmentX(0.5f);
		jLabel4.setForeground(StdDraw3D.__GRAY);
		StdDraw3D.graphicsMenu.add(jLabel4);
		StdDraw3D.graphicsMenu.addSeparator();
		StdDraw3D.antiAliasingButton = new JCheckBoxMenuItem("Enable Anti-Aliasing");
		StdDraw3D.antiAliasingButton.setSelected(false);
		StdDraw3D.antiAliasingButton.addActionListener(StdDraw3D.std);
		StdDraw3D.graphicsMenu.add(StdDraw3D.antiAliasingButton);
		StdDraw3D.infoCheckBox = new JCheckBox("Show Info Display");
		StdDraw3D.infoCheckBox.setFocusable(false);
		StdDraw3D.infoCheckBox.addActionListener(StdDraw3D.std);
		StdDraw3D.menuBar.add(Box.createRigidArea(new Dimension(50, 5)));
		StdDraw3D.menuBar.add(StdDraw3D.infoCheckBox);
		return StdDraw3D.menuBar;
	}
	
	private static object createBranchGroup()
	{
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	
	public static void setDefaultLight()
	{
		StdDraw3D.clearLight();
		StdDraw3D.directionalLight(-4.0, 7.0, 12.0, StdDraw3D.__LIGHT_GRAY);
		StdDraw3D.directionalLight(4.0, -7.0, -12.0, StdDraw3D.__WHITE);
		StdDraw3D.ambientLight(new Color(0.1f, 0.1f, 0.1f));
	}
	
	public static void setAntiAliasing(bool b)
	{
		StdDraw3D.view;
		b;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	
	private static void setOrbitCenter(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Point3d");
		StdDraw3D.orbitCenter = obj;
		StdDraw3D.orbit;
		StdDraw3D.orbitCenter;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	
	
	public static void setPerspectiveProjection()
	{
		StdDraw3D.setPerspectiveProjection(0.9);
	}
	
	
	public static void setCameraMode()
	{
		StdDraw3D.setCameraMode(0);
	}
	public static void setPenColor()
	{
		StdDraw3D.penColor = StdDraw3D.DEFAULT_PEN_COLOR;
	}
	
	
	public static void setPenRadius()
	{
		StdDraw3D.setPenRadius(0.002);
	}
	public static void setFont()
	{
		StdDraw3D.font = StdDraw3D.DEFAULT_FONT;
	}
	
	
	public static void setScale()
	{
		StdDraw3D.setScale((double)0f, (double)1f);
	}
	
	
	public static void setInfoDisplay(bool b)
	{
		StdDraw3D.infoDisplay = b;
		StdDraw3D.infoCheckBox.setSelected(b);
		StdDraw3D.camera.move((double)0f, (double)0f, (double)0f);
		StdDraw3D.infoDisplay();
	}
	
	
	public static void setBackground(Color c)
	{
		if (!c.Equals(StdDraw3D.bgColor))
		{
			StdDraw3D.bgColor = c;
			StdDraw3D.rootGroup;
			StdDraw3D.bgGroup;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
	}
	
	public static void setPerspectiveProjection(double d)
	{
		StdDraw3D.view;
		1;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	
	
	private static void saveAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Use a .png or .jpg extension.", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			StdDraw3D.save(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(83));
	}
	
	
	private static void loadAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Pick a .obj or .ply file to load.", 0);
		fileDialog.setVisible(true);
		string str = new StringBuilder().append(fileDialog.getDirectory()).append(fileDialog.getFile()).toString();
		StdDraw3D.model(str);
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(76));
	}
	
	
	private static void save3DAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Save as a 3D file for loading later.", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			StdDraw3D.saveScene3D(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(69));
	}
	
	
	private static void quitAction()
	{
		WindowEvent.__<clinit>();
		WindowEvent theEvent = new WindowEvent(StdDraw3D.frame, 201);
		Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(theEvent);
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(81));
	}
	
	public static void setCameraMode(int i)
	{
		StdDraw3D.cameraMode = i;
		if (StdDraw3D.cameraMode == 0)
		{
			StdDraw3D.orbit;
			1;
			throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
		}
		StdDraw3D.orbit;
		0;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	
	public static void setParallelProjection()
	{
		StdDraw3D.view;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	
	private static object createBlankAppearance()
	{
		throw new NoClassDefFoundError("javax.media.j3d.Appearance");
	}
	
	
	private static object createTexture(string str)
	{
		try
		{
			throw new NoClassDefFoundError("com.sun.j3d.utils.image.TextureLoader");
		}
		catch (System.Exception arg_0C_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_0C_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		string arg_44_0 = new StringBuilder().append("Could not read from the file '").append(str).append("'").toString();
		
		throw new RuntimeException(arg_44_0);
	}
	
	private static object createVector3f(double num, double num2, double num3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Vector3f");
	}
	
	private static object createPoint3f(double num, double num2, double num3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	
	
	private static void setCanvasSize(int num, int num2, bool flag)
	{
		StdDraw3D.fullscreen = flag;
		if (num < 1 || num2 < 1)
		{
			string arg_1A_0 = "Dimensions must be positive integers!";
			
			throw new RuntimeException(arg_1A_0);
		}
		StdDraw3D.width = num;
		StdDraw3D.height = num2;
		StdDraw3D.aspectRatio = (double)StdDraw3D.width / (double)StdDraw3D.height;
		StdDraw3D.initialize();
	}
	
	
	private static void initialize()
	{
		StdDraw3D.numDivisions = 100;
		StdDraw3D.onscreenImage = StdDraw3D.createBufferedImage();
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
		StdDraw3D.infoImage = StdDraw3D.createBufferedImage();
		StdDraw3D.initializeCanvas();
		if (StdDraw3D.frame != null)
		{
			StdDraw3D.frame.setVisible(false);
		}
		StdDraw3D.frame = new JFrame();
		StdDraw3D.frame.setVisible(false);
		StdDraw3D.frame.setResizable(StdDraw3D.fullscreen);
		StdDraw3D.frame.setDefaultCloseOperation(3);
		StdDraw3D.frame.setTitle("Standard Draw 3D");
		StdDraw3D.frame.add(StdDraw3D.canvasPanel);
		StdDraw3D.frame.setJMenuBar(StdDraw3D.createMenuBar());
		StdDraw3D.frame.addComponentListener(StdDraw3D.std);
		StdDraw3D.frame.addWindowFocusListener(StdDraw3D.std);
		StdDraw3D.frame.pack();
		StdDraw3D.rootGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.lightGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.bgGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.soundGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.fogGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.appearanceGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.onscreenGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.offscreenGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.rootGroup;
		StdDraw3D.onscreenGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	
	public static void setScale(double d1, double d2)
	{
		StdDraw3D.min = d1;
		StdDraw3D.max = d2;
		StdDraw3D.zoom = (StdDraw3D.max - StdDraw3D.min) / 2.0;
		double num = StdDraw3D.min + StdDraw3D.zoom;
		StdDraw3D.camera.setPosition(num, num, StdDraw3D.zoom * (2.0 + java.lang.Math.sqrt(2.0)));
		double num2 = 0.5 * StdDraw3D.zoom;
		StdDraw3D.orbit;
		num2;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	public static void setPenColor(Color c)
	{
		StdDraw3D.penColor = c;
	}
	public static void setPenRadius(double d)
	{
		StdDraw3D.penRadius = (float)d * 500f;
	}
	
	
	private static void infoDisplay()
	{
		if (!StdDraw3D.infoDisplay)
		{
			StdDraw3D.infoImage = StdDraw3D.createBufferedImage();
			return;
		}
		BufferedImage bufferedImage = StdDraw3D.createBufferedImage();
		Graphics2D graphics2D = (Graphics2D)bufferedImage.getGraphics();
		graphics2D.setFont(new Font("Courier", 0, 11));
		graphics2D.setStroke(new BasicStroke(1f, 1, 1));
		double num = (StdDraw3D.min + StdDraw3D.max) / 2.0;
		double arg_65_0 = StdDraw3D.zoom;
		double num2 = StdDraw3D.zoom * 0.10000000149011612;
		DecimalFormat decimalFormat = new DecimalFormat(" 0.000;-0.000");
		StdDraw3D.Vector3D position = StdDraw3D.camera.getPosition();
		string str = new StringBuilder().append("(").append(decimalFormat.format(position.__x)).append(",").append(decimalFormat.format(position.__y)).append(",").append(decimalFormat.format(position.__z)).append(")").toString();
		graphics2D.setColor(StdDraw3D.__BLACK);
		graphics2D.drawString(new StringBuilder().append("Position: ").append(str).toString(), 21, 26);
		graphics2D.setColor(StdDraw3D.__LIGHT_GRAY);
		graphics2D.drawString(new StringBuilder().append("Position: ").append(str).toString(), 20, 25);
		StdDraw3D.Vector3D orientation = StdDraw3D.camera.getOrientation();
		string str2 = new StringBuilder().append("(").append(decimalFormat.format(orientation.__x)).append(",").append(decimalFormat.format(orientation.__y)).append(",").append(decimalFormat.format(orientation.__z)).append(")").toString();
		graphics2D.setColor(StdDraw3D.__BLACK);
		graphics2D.drawString(new StringBuilder().append("Rotation: ").append(str2).toString(), 21, 41);
		graphics2D.setColor(StdDraw3D.__LIGHT_GRAY);
		graphics2D.drawString(new StringBuilder().append("Rotation: ").append(str2).toString(), 20, 40);
		string str3;
		if (StdDraw3D.cameraMode == 0)
		{
			str3 = "Camera: ORBIT_MODE";
		}
		else if (StdDraw3D.cameraMode == 1)
		{
			str3 = "Camera: FPS_MODE";
		}
		else if (StdDraw3D.cameraMode == 2)
		{
			str3 = "Camera: AIRPLANE_MODE";
		}
		else if (StdDraw3D.cameraMode == 3)
		{
			str3 = "Camera: LOOK_MODE";
		}
		else
		{
			if (StdDraw3D.cameraMode != 4)
			{
				string arg_293_0 = "Unknown camera mode!";
				
				throw new RuntimeException(arg_293_0);
			}
			str3 = "Camera: FIXED_MODE";
		}
		graphics2D.setColor(StdDraw3D.__BLACK);
		graphics2D.drawString(str3, 21, 56);
		graphics2D.setColor(StdDraw3D.__LIGHT_GRAY);
		graphics2D.drawString(str3, 20, 55);
		double num3 = num2 / 4.0;
		graphics2D.draw(new Line2D.Double((double)StdDraw3D.scaleX(num3 + num), (double)StdDraw3D.scaleY((double)0f + num), (double)StdDraw3D.scaleX(-num3 + num), (double)StdDraw3D.scaleY((double)0f + num)));
		graphics2D.draw(new Line2D.Double((double)StdDraw3D.scaleX((double)0f + num), (double)StdDraw3D.scaleY(num3 + num), (double)StdDraw3D.scaleX((double)0f + num), (double)StdDraw3D.scaleY(-num3 + num)));
		StdDraw3D.infoImage = bufferedImage;
	}
	
	public static bool mouse1Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse1 ? 1 : 0);
		}
		return result != 0;
	}
	
	public static bool mouse2Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse2 ? 1 : 0);
		}
		return result != 0;
	}
	
	public static bool mouse3Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse3 ? 1 : 0);
		}
		return result != 0;
	}
	private static double unscaleX(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)1f / StdDraw3D.aspectRatio;
		}
		return (num * (2.0 * StdDraw3D.zoom) / (double)StdDraw3D.width + StdDraw3D.min) / num2;
	}
	private static double unscaleY(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = StdDraw3D.aspectRatio;
		}
		return (StdDraw3D.max - num * (2.0 * StdDraw3D.zoom) / (double)StdDraw3D.height) / num2;
	}
	
	
	private static void mouseMotionEvents(MouseEvent mouseEvent, double num, double num2, bool flag)
	{
		if (StdDraw3D.cameraMode == 4)
		{
			return;
		}
		if (StdDraw3D.cameraMode == 1)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateFPS((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 2)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateRelative((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 3)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateFPS((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 0 && flag && StdDraw3D.isKeyPressed(18))
		{
			StdDraw3D.view;
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
	}
	
	
	public static bool isKeyPressed(int i)
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (StdDraw3D.keysDown.contains(Integer.valueOf(i)) ? 1 : 0);
		}
		return result != 0;
	}
	public static int getCameraMode()
	{
		return StdDraw3D.cameraMode;
	}
	
	
	public static void saveScene3D(string str)
	{
		new File(str);
		IOException ex;
		object obj;
		try
		{
			try
			{
				throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.SceneGraphFileWriter");
			}
			catch (IOException arg_13_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_13_0, ByteCodeHelper.MapFlags.NoRemapping);
			}
		}
		catch (System.Exception arg_1C_0)
		{
			System.Exception expr_21 = ByteCodeHelper.MapException<System.Exception>(arg_1C_0, ByteCodeHelper.MapFlags.None);
			if (!ByteCodeHelper.DynamicInstanceOf(expr_21, typeof(StdDraw3D).TypeHandle, "com.sun.j3d.utils.scenegraph.io.UnsupportedUniverseException"))
			{
				throw;
			}
			obj = expr_21;
			goto IL_3B;
		}
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		return;
		IL_3B:
		object obj2 = obj;
		obj2;
		throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.UnsupportedUniverseException");
	}
	
	
	public static StdDraw3D.Shape model(string str)
	{
		return StdDraw3D.model(str, false);
	}
	
	
	public static void save(string str)
	{
		StdDraw3D.getCameraMode();
		StdDraw3D.setCameraMode(4);
		StdDraw3D.canvas;
		throw new NoClassDefFoundError("javax.media.j3d.Canvas3D");
	}
	
	private static object createBackground()
	{
		throw new NoClassDefFoundError("javax.media.j3d.Background");
	}
	
	private static void playAmbientSound(string text, double num, bool flag)
	{
		throw new NoClassDefFoundError("javax.media.j3d.MediaContainer");
	}
	
	public static void clearLight()
	{
		StdDraw3D.lightGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	public static StdDraw3D.Light directionalLight(double d1, double d2, double d3, Color c)
	{
		throw new NoClassDefFoundError("javax.media.j3d.DirectionalLight");
	}
	
	public static StdDraw3D.Light ambientLight(Color c)
	{
		throw new NoClassDefFoundError("javax.vecmath.Color3f");
	}
	
	private static object createTransformGroup()
	{
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	
	public static StdDraw3D.Light pointLight(double d1, double d2, double d3, Color c, double d4)
	{
		throw new NoClassDefFoundError("javax.media.j3d.PointLight");
	}
	
	
	public static void clear3D()
	{
		StdDraw3D.clear3D = true;
		StdDraw3D.offscreenGroup = StdDraw3D.createBranchGroup();
	}
	
	
	public static void clearOverlay()
	{
		StdDraw3D.clearOverlay = true;
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
	}
	
	
	public static void clear()
	{
		StdDraw3D.clear3D();
		StdDraw3D.clearOverlay();
	}
	
	
	private static void moveEvents(int num)
	{
		StdDraw3D.infoDisplay();
		if (StdDraw3D.isKeyPressed(17))
		{
			return;
		}
		if (StdDraw3D.cameraMode == 1)
		{
			double num2 = 0.00015 * (double)num * StdDraw3D.zoom;
			if (StdDraw3D.isKeyPressed(87) || StdDraw3D.isKeyPressed(38))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(83) || StdDraw3D.isKeyPressed(40))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, -num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(65) || StdDraw3D.isKeyPressed(37))
			{
				StdDraw3D.camera.moveRelative(-num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(68) || StdDraw3D.isKeyPressed(39))
			{
				StdDraw3D.camera.moveRelative(num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(81) || StdDraw3D.isKeyPressed(33))
			{
				StdDraw3D.camera.moveRelative((double)0f, num2, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(69) || StdDraw3D.isKeyPressed(34))
			{
				StdDraw3D.camera.moveRelative((double)0f, -num2, (double)0f);
			}
		}
		if (StdDraw3D.cameraMode == 2)
		{
			double num2 = 0.00015 * (double)num * StdDraw3D.zoom;
			if (StdDraw3D.isKeyPressed(87) || StdDraw3D.isKeyPressed(38))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(83) || StdDraw3D.isKeyPressed(40))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, -num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(65) || StdDraw3D.isKeyPressed(37))
			{
				StdDraw3D.camera.moveRelative(-num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(68) || StdDraw3D.isKeyPressed(39))
			{
				StdDraw3D.camera.moveRelative(num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(81) || StdDraw3D.isKeyPressed(33))
			{
				StdDraw3D.camera.rotateRelative((double)0f, (double)0f, num2 * 250.0 / StdDraw3D.zoom);
			}
			if (StdDraw3D.isKeyPressed(69) || StdDraw3D.isKeyPressed(34))
			{
				StdDraw3D.camera.rotateRelative((double)0f, (double)0f, -num2 * 250.0 / StdDraw3D.zoom);
			}
		}
	}
	
	
	public static void show(int i)
	{
		StdDraw3D.renderOverlay();
		StdDraw3D.render3D();
		StdDraw3D.pause(i);
	}
	
	
	private static void renderOverlay()
	{
		if (StdDraw3D.clearOverlay)
		{
			StdDraw3D.clearOverlay = false;
			StdDraw3D.onscreenImage = StdDraw3D.offscreenImage;
		}
		else
		{
			Graphics2D graphics2D = (Graphics2D)StdDraw3D.onscreenImage.getGraphics();
			graphics2D.drawRenderedImage(StdDraw3D.offscreenImage, new AffineTransform());
		}
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
	}
	
	private static void render3D()
	{
		StdDraw3D.rootGroup;
		StdDraw3D.offscreenGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	
	public static void pause(int i)
	{
		int j = i;
		int num = 15;
		while (j > num)
		{
			StdDraw3D.moveEvents(num);
			Toolkit.getDefaultToolkit().sync();
			try
			{
				Thread.currentThread();
				Thread.sleep((long)num);
			}
			catch (InterruptedException arg_2A_0)
			{
				goto IL_2E;
			}
			IL_43:
			j -= num;
			continue;
			goto IL_43;
			IL_2E:
			System.@out.println("Error sleeping");
			goto IL_43;
		}
		StdDraw3D.moveEvents(j);
		if (j == 0)
		{
			return;
		}
		try
		{
			Thread.currentThread();
			Thread.sleep((long)j);
		}
		catch (InterruptedException arg_64_0)
		{
			goto IL_68;
		}
		return;
		IL_68:
		System.@out.println("Error sleeping");
	}
	
	
	public static void showOverlay(int i)
	{
		StdDraw3D.renderOverlay();
		StdDraw3D.pause(i);
	}
	
	
	public static void show3D(int i)
	{
		StdDraw3D.render3D();
		StdDraw3D.pause(i);
	}
	
	
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7, string str)
	{
		StdDraw3D.createVector3f((double)0f, (double)0f, d4);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	
	
	private static object createAppearance(string text, bool flag)
	{
		StdDraw3D.createBlankAppearance();
		throw new NoClassDefFoundError("javax.media.j3d.PolygonAttributes");
	}
	
	private static StdDraw3D.Shape primitive(object obj, double num, double num2, double num3, object obj2, object obj3)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "com.sun.j3d.utils.geometry.Primitive");
		ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Vector3d");
		ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Vector3d");
		obj;
		64;
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Primitive");
	}
	
	
	public static StdDraw3D.Shape wireSphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		StdDraw3D.createVector3f((double)0f, (double)0f, d4);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, string str)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	
	public static StdDraw3D.Shape wireEllipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	
	
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, double d5, double d6, double d7, string str)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d4, d4, d5, d6, d7, str);
	}
	
	
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, d6);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Box");
	}
	
	
	public static StdDraw3D.Shape wireBox(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, d6);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Box");
	}
	
	
	public static StdDraw3D.Shape lines(double[] darr1, double[] darr2, double[] darr3)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.LineStripArray");
	}
	
	
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cylinder");
	}
	
	
	public static StdDraw3D.Shape wireCylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cylinder");
	}
	
	
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cone");
	}
	
	
	public static StdDraw3D.Shape wireCone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cone");
	}
	
	
	public static StdDraw3D.Shape points(double[] darr1, double[] darr2, double[] darr3)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.PointArray");
	}
	
	private static object constructPoint3f(double[] array, double[] array2, double[] array3)
	{
		int num = array.Length;
		num;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	
	private static object createShape3D(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Geometry");
		throw new NoClassDefFoundError("javax.media.j3d.Shape3D");
	}
	
	
	private static StdDraw3D.Shape shape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = true;
		object arg_16_0 = null;
		bool flag = false;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	
	
	private static StdDraw3D.Shape customShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = true;
		object arg_16_0 = null;
		bool flag = true;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	
	
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	public static StdDraw3D.Shape combine(params StdDraw3D.Shape[] sddsarr)
	{
		StdDraw3D.createBranchGroup();
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	
	
	public static StdDraw3D.Shape tube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		StdDraw3D.Vector3D vector3D = new StdDraw3D.Vector3D(d1 + d4, d2 + d5, d3 + d6).times(0.5);
		StdDraw3D.Vector3D vector3D2 = new StdDraw3D.Vector3D(d4 - d1, d5 - d2, d6 - d3);
		StdDraw3D.Shape shape = StdDraw3D.cylinder(vector3D.__x, vector3D.__y, vector3D.__z, d7, vector3D2.mag());
		StdDraw3D.Vector3D sddvd = new StdDraw3D.Vector3D((double)0f, (double)1f, (double)0f);
		StdDraw3D.Vector3D sddvd2 = vector3D2.cross(sddvd);
		double num = vector3D2.angle(sddvd);
		shape.rotateAxis(sddvd2, -num);
		return StdDraw3D.combine(new StdDraw3D.Shape[]
		{
			shape
		});
	}
	
	
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	private static StdDraw3D.Shape polygon(double[] array, double[] array2, double[] array3, bool flag)
	{
		StdDraw3D.constructPoint3f(array, array2, array3);
		throw new NoClassDefFoundError("javax.media.j3d.TriangleFanArray");
	}
	
	
	private static StdDraw3D.Shape wireShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = false;
		object arg_16_0 = null;
		bool flag = false;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	
	private static StdDraw3D.Shape triangles(double[][] array, bool flag)
	{
		int num = array.Length;
		num * 3;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	
	private static StdDraw3D.Shape triangles(double[][] array, Color[] array2, bool flag)
	{
		int num = array.Length;
		num * 3;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	
	
	public static StdDraw3D.Shape text3D(double d1, double d2, double d3, string str, double d4, double d5, double d6)
	{
		new Line2D.Double((double)0f, (double)0f, 1.5, (double)0f);
		throw new NoClassDefFoundError("javax.media.j3d.FontExtrusion");
	}
	
	
	private static StdDraw3D.Shape shape(object obj, bool flag, object obj2, bool flag2)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Transform3D");
		object obj3;
		if (flag2)
		{
			obj3 = StdDraw3D.createCustomAppearance(flag);
		}
		else
		{
			obj3 = StdDraw3D.createAppearance(null, flag);
		}
		obj;
		obj3;
		throw new NoClassDefFoundError("javax.media.j3d.Shape3D");
	}
	
	
	private static Scanner createScanner(string text)
	{
		string charsetName = "ISO-8859-1";
		Locale locale = new Locale("en", "US");
		Scanner result;
		try
		{
			File file = new File(text);
			Scanner scanner;
			if (!file.exists())
			{
				URL uRL = new URL(text);
				URLConnection uRLConnection = uRL.openConnection();
				InputStream inputStream = uRLConnection.getInputStream();
				Scanner.__<clinit>();
				scanner = new Scanner(new BufferedInputStream(inputStream), charsetName);
				scanner.useLocale(locale);
				result = scanner;
				return result;
			}
			scanner = new Scanner(file, charsetName);
			scanner.useLocale(locale);
			result = scanner;
		}
		catch (IOException arg_78_0)
		{
			goto IL_81;
		}
		return result;
		IL_81:
		System.err.println(new StringBuilder().append("Could not open ").append(text).append(".").toString());
		return null;
	}
	
	
	public static StdDraw3D.Shape triangles(double[][] darr)
	{
		return StdDraw3D.triangles(darr, true);
	}
	
	
	public static StdDraw3D.Shape model(string str, bool b)
	{
		return StdDraw3D.model(str, false, b);
	}
	
	
	private static StdDraw3D.Shape model(string text, bool flag, bool flag2)
	{
		if (text == null)
		{
			return null;
		}
		string @this = java.lang.String.instancehelper_substring(text, java.lang.String.instancehelper_lastIndexOf(text, 46) + 1);
		java.lang.String.instancehelper_toLowerCase(@this);
		if (java.lang.String.instancehelper_equals(@this, "ply"))
		{
			return StdDraw3D.drawPLY(text, flag);
		}
		if (java.lang.String.instancehelper_equals(@this, "obj"))
		{
			return StdDraw3D.drawOBJ(text, flag, flag2);
		}
		string arg_5A_0 = "Format not supported!";
		
		throw new RuntimeException(arg_5A_0);
	}
	
	
	private static StdDraw3D.Shape drawPLY(string text, bool flag)
	{
		Scanner scanner = StdDraw3D.createScanner(text);
		int num = -1;
		int num2 = -1;
		int num3 = -1;
		while (true)
		{
			string @this = scanner.next();
			if (java.lang.String.instancehelper_equals(@this, "vertex"))
			{
				num = scanner.nextInt();
			}
			else if (java.lang.String.instancehelper_equals(@this, "face"))
			{
				num2 = scanner.nextInt();
			}
			else if (java.lang.String.instancehelper_equals(@this, "property"))
			{
				num3++;
				scanner.next();
				scanner.next();
			}
			else if (java.lang.String.instancehelper_equals(@this, "end_header"))
			{
				break;
			}
		}
		System.@out.println(new StringBuilder().append(num).append(" ").append(num2).append(" ").append(num3).toString());
		if (num == -1 || num2 == -1 || num3 == -1)
		{
			string arg_CA_0 = "Cannot read format of .ply file!";
			
			throw new RuntimeException(arg_CA_0);
		}
		int arg_E2_0 = num3;
		int arg_DA_0 = num;
		int[] array = new int[2];
		int num4 = arg_DA_0;
		array[1] = num4;
		num4 = arg_E2_0;
		array[0] = num4;
		double[][] array2 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			bool expr_108 = i != 0;
			int expr_10F = 10000;
			if (expr_10F == -1 || (expr_108 ? 1 : 0) % expr_10F == 0)
			{
				System.@out.println(new StringBuilder().append("vertex ").append(i).toString());
			}
			for (int j = 0; j < num3; j++)
			{
				array2[j][i] = scanner.nextDouble();
			}
		}
		int arg_17D_0 = num2;
		int arg_175_0 = 9;
		array = new int[2];
		num4 = arg_175_0;
		array[1] = num4;
		num4 = arg_17D_0;
		array[0] = num4;
		double[][] array3 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int j = 0; j < num2; j++)
		{
			int num5 = scanner.nextInt();
			if (num5 != 3)
			{
				string arg_1BA_0 = "Only triangular faces supported!";
				
				throw new RuntimeException(arg_1BA_0);
			}
			bool expr_1C0 = j != 0;
			int expr_1C7 = 10000;
			if (expr_1C7 == -1 || (expr_1C0 ? 1 : 0) % expr_1C7 == 0)
			{
				System.@out.println(new StringBuilder().append("face ").append(j).toString());
			}
			int num6 = scanner.nextInt();
			array3[j][0] = array2[0][num6];
			array3[j][1] = array2[1][num6];
			array3[j][2] = array2[2][num6];
			num6 = scanner.nextInt();
			array3[j][3] = array2[0][num6];
			array3[j][4] = array2[1][num6];
			array3[j][5] = array2[2][num6];
			num6 = scanner.nextInt();
			array3[j][6] = array2[0][num6];
			array3[j][7] = array2[1][num6];
			array3[j][8] = array2[2][num6];
		}
		return StdDraw3D.triangles(array3);
	}
	
	private static StdDraw3D.Shape drawOBJ(string text, bool flag, bool flag2)
	{
		if (flag2)
		{
		}
		throw new NoClassDefFoundError("com.sun.j3d.loaders.objectfile.ObjectFile");
	}
	
	
	private static object createCustomAppearance(bool flag)
	{
		StdDraw3D.createBlankAppearance();
		throw new NoClassDefFoundError("javax.media.j3d.PolygonAttributes");
	}
	
	
	private static Graphics2D getGraphics2D(BufferedImage bufferedImage)
	{
		Graphics2D graphics2D = (Graphics2D)bufferedImage.getGraphics();
		graphics2D.setColor(StdDraw3D.penColor);
		graphics2D.setFont(StdDraw3D.font);
		BasicStroke stroke = new BasicStroke(StdDraw3D.penRadius, 1, 1);
		graphics2D.setStroke(stroke);
		graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		return graphics2D;
	}
	private static float scaleX(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)1f / StdDraw3D.aspectRatio;
		}
		return (float)((double)StdDraw3D.width * (num * num2 - StdDraw3D.min) / (2.0 * StdDraw3D.zoom));
	}
	private static float scaleY(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = StdDraw3D.aspectRatio;
		}
		return (float)((double)StdDraw3D.height * (StdDraw3D.max - num * num2) / (2.0 * StdDraw3D.zoom));
	}
	
	
	public static void overlayPixel(double d1, double d2)
	{
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fillRect(java.lang.Math.round(StdDraw3D.scaleX(d1)), java.lang.Math.round(StdDraw3D.scaleY(d2)), 1, 1);
	}
	private static double factorX(double num)
	{
		double num2 = (double)StdDraw3D.width;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)StdDraw3D.height;
		}
		return num2 * (num / (2.0 * StdDraw3D.zoom));
	}
	private static double factorY(double num)
	{
		double num2 = (double)StdDraw3D.height;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = (double)StdDraw3D.width;
		}
		return num2 * (num / (2.0 * StdDraw3D.zoom));
	}
	
	
	private static Image getImage(string text)
	{
		ImageIcon imageIcon = new ImageIcon(text);
		if (imageIcon != null)
		{
			if (imageIcon.getImageLoadStatus() == 8)
			{
				goto IL_39;
			}
		}
		try
		{
			URL uRL = new URL(text);
			imageIcon = new ImageIcon(uRL);
		}
		catch (System.Exception arg_26_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_26_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		IL_39:
		if (imageIcon == null || imageIcon.getImageLoadStatus() != 8)
		{
			URL uRL = ClassLiteral<StdDraw3D>.Value.getResource(text);
			if (uRL == null)
			{
				string arg_7D_0 = new StringBuilder().append("image ").append(text).append(" not found").toString();
				
				throw new RuntimeException(arg_7D_0);
			}
			imageIcon = new ImageIcon(uRL);
		}
		return imageIcon.getImage();
	}
	
	
	public static void setCameraPosition(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setPosition(sddvd);
	}
	
	
	public static void setCameraOrientation(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setOrientation(sddvd);
	}
	
	
	public static void setCameraDirection(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setDirection(sddvd);
	}
	
	
	public static void overlaySquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void setPenColor(Color c, int i)
	{
		Color.__<clinit>();
		StdDraw3D.setPenColor(new Color(c.getRed(), c.getGreen(), c.getBlue(), i));
	}
	
	
	public static void overlayCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayText(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
	}
	public static void setFont(Font f)
	{
		StdDraw3D.font = f;
	}
	
	
	public static StdDraw3D.Shape text3D(double d1, double d2, double d3, string str)
	{
		return StdDraw3D.text3D(d1, d2, d3, str, (double)0f, (double)0f, (double)0f);
	}
	
	
	private StdDraw3D()
	{
	}
	
	
	public static void setCanvasSize(int i1, int i2)
	{
		StdDraw3D.setCanvasSize(i1, i2, false);
	}
	
	
	public virtual void stateChanged(ChangeEvent ce)
	{
		object source = ce.getSource();
		if (source == StdDraw3D.numDivSpinner)
		{
			StdDraw3D.numDivisions = ((Integer)StdDraw3D.numDivSpinner.getValue()).intValue();
		}
		if (source == StdDraw3D.fovSpinner)
		{
			StdDraw3D.setPerspectiveProjection(((java.lang.Double)StdDraw3D.fovSpinner.getValue()).doubleValue());
			StdDraw3D.perspectiveButton.setSelected(true);
		}
	}
	[Obsolete]
	
	public virtual void actionPerformed(ActionEvent ae)
	{
		object source = ae.getSource();
		if (source == StdDraw3D.saveButton)
		{
			StdDraw3D.saveAction();
		}
		else if (source == StdDraw3D.loadButton)
		{
			StdDraw3D.loadAction();
		}
		else if (source == StdDraw3D.save3DButton)
		{
			StdDraw3D.save3DAction();
		}
		else if (source == StdDraw3D.quitButton)
		{
			StdDraw3D.quitAction();
		}
		else if (source == StdDraw3D.orbitModeButton)
		{
			StdDraw3D.setCameraMode(0);
		}
		else if (source == StdDraw3D.fpsModeButton)
		{
			StdDraw3D.setCameraMode(1);
		}
		else if (source == StdDraw3D.airplaneModeButton)
		{
			StdDraw3D.setCameraMode(2);
		}
		else if (source == StdDraw3D.lookModeButton)
		{
			StdDraw3D.setCameraMode(3);
		}
		else if (source == StdDraw3D.fixedModeButton)
		{
			StdDraw3D.setCameraMode(4);
		}
		else if (source == StdDraw3D.perspectiveButton)
		{
			StdDraw3D.setPerspectiveProjection(((java.lang.Double)StdDraw3D.fovSpinner.getValue()).doubleValue());
		}
		else if (source == StdDraw3D.parallelButton)
		{
			StdDraw3D.setParallelProjection();
		}
		else if (source == StdDraw3D.antiAliasingButton)
		{
			StdDraw3D.setAntiAliasing(StdDraw3D.antiAliasingButton.isSelected());
		}
		else if (source == StdDraw3D.infoCheckBox)
		{
			StdDraw3D.setInfoDisplay(StdDraw3D.infoCheckBox.isSelected());
		}
	}
//[LineNumberTable(644), Obsolete]
	
	public virtual void componentHidden(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
//[LineNumberTable(650), Obsolete]
	
	public virtual void componentMoved(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
//[LineNumberTable(656), Obsolete]
	
	public virtual void componentShown(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
//[LineNumberTable(662), Obsolete]
	
	public virtual void componentResized(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
//[LineNumberTable(668), Obsolete]
	
	public virtual void windowGainedFocus(WindowEvent we)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
//[LineNumberTable(674), Obsolete]
	
	public virtual void windowLostFocus(WindowEvent we)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	
	
	private static object createPoint3f(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createPoint3f(vector3D.__x, vector3D.__y, vector3D.__z);
	}
	
	
	public static void setPenColor(int i1, int i2, int i3)
	{
		StdDraw3D.penColor = new Color(i1, i2, i3);
	}
	public static Color getPenColor()
	{
		return StdDraw3D.penColor;
	}
	public static float getPenRadius()
	{
		return StdDraw3D.penRadius / 500f;
	}
	public static Font getFont()
	{
		return StdDraw3D.font;
	}
	
	
	public static void fullscreen()
	{
		StdDraw3D.frame.setResizable(true);
		StdDraw3D.frame.setExtendedState(6);
		int num = StdDraw3D.frame.getSize().width;
		int num2 = StdDraw3D.frame.getSize().height;
		int num3 = StdDraw3D.frame.getInsets().top + StdDraw3D.frame.getInsets().bottom;
		int num4 = StdDraw3D.frame.getInsets().left + StdDraw3D.frame.getInsets().right;
		StdDraw3D.setCanvasSize(num - num4, num2 - num3 - StdDraw3D.menuBar.getHeight(), true);
		StdDraw3D.frame.setExtendedState(6);
	}
	
	
	public static bool getAntiAliasing()
	{
		return StdDraw3D.antiAliasingButton.isSelected();
	}
	public static void setNumDivisions(int i)
	{
		StdDraw3D.numDivisions = i;
	}
	public static int getNumDivisions()
	{
		return StdDraw3D.numDivisions;
	}
	
	public static void setOrbitCenter(double d1, double d2, double d3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3d");
	}
	
	public static void setOrbitCenter(StdDraw3D.Vector3D sddvd)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3d");
	}
	
	
	public static StdDraw3D.Vector3D getOrbitCenter()
	{
		object arg_08_0 = StdDraw3D.orbitCenter;
		object obj = null;
		return new StdDraw3D.Vector3D(arg_08_0, obj);
	}
	
	
	public static bool mousePressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = ((!StdDraw3D.mouse1Pressed() && !StdDraw3D.mouse2Pressed() && !StdDraw3D.mouse3Pressed()) ? 0 : 1);
		}
		return result != 0;
	}
	
	
	public static double mouseX()
	{
		double result;
		lock (StdDraw3D.mouseLock)
		{
			result = StdDraw3D.unscaleX(StdDraw3D.mouseX);
		}
		return result;
	}
	
	
	public static double mouseY()
	{
		double result;
		lock (StdDraw3D.mouseLock)
		{
			result = StdDraw3D.unscaleY(StdDraw3D.mouseY);
		}
		return result;
	}
	[Obsolete]
	public virtual void mouseClicked(MouseEvent me)
	{
	}
	[Obsolete]
	public virtual void mouseEntered(MouseEvent me)
	{
	}
	[Obsolete]
	public virtual void mouseExited(MouseEvent me)
	{
	}
	[Obsolete]
	
	public virtual void mousePressed(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseX = (double)me.getX();
			StdDraw3D.mouseY = (double)me.getY();
			if (me.getButton() == 1)
			{
				StdDraw3D.mouse1 = true;
			}
			if (me.getButton() == 2)
			{
				StdDraw3D.mouse2 = true;
			}
			if (me.getButton() == 3)
			{
				StdDraw3D.mouse3 = true;
			}
		}
	}
	[Obsolete]
	
	public virtual void mouseReleased(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			if (me.getButton() == 1)
			{
				StdDraw3D.mouse1 = false;
			}
			if (me.getButton() == 2)
			{
				StdDraw3D.mouse2 = false;
			}
			if (me.getButton() == 3)
			{
				StdDraw3D.mouse3 = false;
			}
		}
	}
	[Obsolete]
	
	public virtual void mouseDragged(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseMotionEvents(me, (double)me.getX(), (double)me.getY(), true);
			StdDraw3D.mouseX = (double)me.getX();
			StdDraw3D.mouseY = (double)me.getY();
		}
	}
	[Obsolete]
	
	public virtual void mouseMoved(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseMotionEvents(me, (double)me.getX(), (double)me.getY(), false);
		}
	}
	[Obsolete]
	
	public virtual void mouseWheelMoved(MouseWheelEvent mwe)
	{
		double arg_07_0 = (double)mwe.getWheelRotation();
		if (StdDraw3D.cameraMode == 0)
		{
			StdDraw3D.view;
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
	}
	
	
	public static bool hasNextKeyTyped()
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (StdDraw3D.keysTyped.IsEmpty ? 0 : 1);
		}
		return result != 0;
	}
	
	
	public static char nextKeyTyped()
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (int)((Character)StdDraw3D.keysTyped.removeLast()).charValue();
		}
		return (char)result;
	}
	[Obsolete]
	
	public virtual void keyTyped(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			int keyChar = (int)ke.getKeyChar();
			StdDraw3D.keysTyped.addFirst(Character.valueOf((char)keyChar));
			if (keyChar == 96)
			{
				int expr_2E = StdDraw3D.getCameraMode() + 1;
				int expr_30 = 5;
				StdDraw3D.setCameraMode((expr_30 != -1) ? (expr_2E % expr_30) : 0);
			}
		}
	}
	[Obsolete]
	
	public virtual void keyPressed(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			StdDraw3D.keysDown.add(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[Obsolete]
	
	public virtual void keyReleased(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			StdDraw3D.keysDown.remove(Integer.valueOf(ke.getKeyCode()));
		}
	}
	
	public static void setBackground(string str)
	{
		StdDraw3D.rootGroup;
		StdDraw3D.bgGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	public static void setBackgroundSphere(string str)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	
	public static void clearSound()
	{
		StdDraw3D.soundGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	
	public static void playAmbientSound(string str)
	{
		StdDraw3D.playAmbientSound(str, (double)1f, false);
	}
	
	
	public static void playAmbientSound(string str, bool b)
	{
		StdDraw3D.playAmbientSound(str, (double)1f, b);
	}
	
	public static void clearFog()
	{
		StdDraw3D.fogGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	
	public static void addFog(Color c, double d1, double d2)
	{
		throw new NoClassDefFoundError("javax.media.j3d.LinearFog");
	}
	
	
	public static StdDraw3D.Light directionalLight(StdDraw3D.Vector3D sddvd, Color c)
	{
		return StdDraw3D.directionalLight(sddvd.__x, sddvd.__y, sddvd.__z, c);
	}
	
	
	public static StdDraw3D.Light pointLight(StdDraw3D.Vector3D sddvd, Color c)
	{
		return StdDraw3D.pointLight(sddvd.__x, sddvd.__y, sddvd.__z, c, (double)1f);
	}
	
	
	public static StdDraw3D.Light pointLight(double d1, double d2, double d3, Color c)
	{
		return StdDraw3D.pointLight(d1, d2, d3, c, (double)1f);
	}
	
	
	public static StdDraw3D.Light pointLight(StdDraw3D.Vector3D sddvd, Color c, double d)
	{
		return StdDraw3D.pointLight(sddvd.__x, sddvd.__y, sddvd.__z, c, d);
	}
	
	
	public static Color randomColor()
	{
		Color.__<clinit>();
		return new Color(new java.util.Random().nextInt());
	}
	
	
	public static Color randomRainbowColor()
	{
		return Color.getHSBColor((float)java.lang.Math.random(), 1f, 1f);
	}
	
	
	public static StdDraw3D.Vector3D randomDirection()
	{
		double a = java.lang.Math.random() * 3.1415926535897931 * 2.0;
		double a2 = java.lang.Math.random() * 3.1415926535897931;
		return new StdDraw3D.Vector3D(java.lang.Math.cos(a) * java.lang.Math.sin(a2), java.lang.Math.sin(a) * java.lang.Math.sin(a2), java.lang.Math.cos(a2));
	}
	
	
	public static void clear(Color c)
	{
		StdDraw3D.setBackground(c);
		StdDraw3D.clear();
	}
	
	
	public static void finished()
	{
		StdDraw3D.show(1000000000);
	}
	
	
	public static void show()
	{
		StdDraw3D.show(0);
	}
	
	
	public static void showOverlay()
	{
		StdDraw3D.showOverlay(0);
	}
	
	
	public static void show3D()
	{
		StdDraw3D.show3D(0);
	}
	
	
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, d5, d6, d7, null);
	}
	
	
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, string str)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireSphere(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.wireSphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, d7, d8, d9, null);
	}
	
	
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, string str)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireEllipsoid(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.wireEllipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, d5, d6, d7, null);
	}
	
	
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, string str)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireCube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.wireBox(d1, d2, d3, d4, d4, d4, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape wireCube(double d1, double d2, double d3, double d4)
	{
		double[] darr = new double[]
		{
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 + d4,
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 + d4,
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 - d4,
			d1 - d4
		};
		double[] darr2 = new double[]
		{
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4,
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4
		};
		double[] darr3 = new double[]
		{
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 + d4,
			d3 + d4,
			d3 - d4,
			d3 - d4,
			d3 + d4
		};
		return StdDraw3D.lines(darr, darr2, darr3);
	}
	
	
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, d7, d8, d9, null);
	}
	
	
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, string str)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireBox(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.wireBox(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, d6, d7, d8, null);
	}
	
	
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, string str)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireCylinder(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.wireCylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, null);
	}
	
	
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, d6, d7, d8, null);
	}
	
	
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, string str)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, str);
	}
	
	
	public static StdDraw3D.Shape wireCone(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.wireCone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f);
	}
	
	
	public static StdDraw3D.Shape point(double d1, double d2, double d3)
	{
		return StdDraw3D.points(new double[]
		{
			d1
		}, new double[]
		{
			d2
		}, new double[]
		{
			d3
		});
	}
	
	
	public static StdDraw3D.Shape points(double[] darr1, double[] darr2, double[] darr3, Color[] carr)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.PointArray");
	}
	
	
	public static StdDraw3D.Shape line(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.lines(new double[]
		{
			d1,
			d4
		}, new double[]
		{
			d2,
			d5
		}, new double[]
		{
			d3,
			d6
		});
	}
	
	
	public static StdDraw3D.Shape lines(double[] darr1, double[] darr2, double[] darr3, Color[] carr)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.LineStripArray");
	}
	
	
	public static StdDraw3D.Shape tubes(double[] darr1, double[] darr2, double[] darr3, double d)
	{
		StdDraw3D.Shape[] array = new StdDraw3D.Shape[(darr1.Length - 1) * 2];
		for (int i = 0; i < darr1.Length - 1; i++)
		{
			array[i] = StdDraw3D.tube(darr1[i], darr2[i], darr3[i], darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
			array[i + darr1.Length - 1] = StdDraw3D.sphere(darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
		}
		return StdDraw3D.combine(array);
	}
	
	
	public static StdDraw3D.Shape tubes(double[] darr1, double[] darr2, double[] darr3, double d, Color[] carr)
	{
		StdDraw3D.Shape[] array = new StdDraw3D.Shape[(darr1.Length - 1) * 2];
		for (int i = 0; i < darr1.Length - 1; i++)
		{
			StdDraw3D.setPenColor(carr[i]);
			array[i] = StdDraw3D.tube(darr1[i], darr2[i], darr3[i], darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
			array[i + darr1.Length - 1] = StdDraw3D.sphere(darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
		}
		return StdDraw3D.combine(array);
	}
	
	
	public static StdDraw3D.Shape polygon(double[] darr1, double[] darr2, double[] darr3)
	{
		return StdDraw3D.polygon(darr1, darr2, darr3, true);
	}
	
	
	public static StdDraw3D.Shape wirePolygon(double[] darr1, double[] darr2, double[] darr3)
	{
		return StdDraw3D.polygon(darr1, darr2, darr3, false);
	}
	
	
	public static StdDraw3D.Shape wireTriangles(double[][] darr)
	{
		return StdDraw3D.triangles(darr, false);
	}
	
	
	public static StdDraw3D.Shape triangles(double[][] darr, Color[] carr)
	{
		return StdDraw3D.triangles(darr, carr, true);
	}
	
	
	public static StdDraw3D.Shape wireTriangles(double[][] darr, Color[] carr)
	{
		return StdDraw3D.triangles(darr, carr, false);
	}
	
	private static StdDraw3D.Shape drawLWS(string text)
	{
		throw new NoClassDefFoundError("com.sun.j3d.loaders.lw3d.Lw3dLoader");
	}
	
	
	public static StdDraw3D.Shape coloredModel(string str)
	{
		return StdDraw3D.model(str, true, true);
	}
	
	
	public static StdDraw3D.Shape coloredModel(string str, bool b)
	{
		return StdDraw3D.model(str, true, b);
	}
	
	
	private static StdDraw3D.Shape customWireShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = false;
		object arg_16_0 = null;
		bool flag = true;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	
	
	public static void overlayPoint(double d1, double d2)
	{
		float num = StdDraw3D.penRadius;
		if (num <= 1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double((double)(StdDraw3D.scaleX(d1) - num / 2f), (double)(StdDraw3D.scaleY(d2) - num / 2f), (double)num, (double)num));
		}
	}
	
	
	public static void overlayLine(double d1, double d2, double d3, double d4)
	{
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Line2D.Double((double)StdDraw3D.scaleX(d1), (double)StdDraw3D.scaleY(d2), (double)StdDraw3D.scaleX(d3), (double)StdDraw3D.scaleY(d4)));
	}
	
	
	public static void overlayFilledCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis can't be negative";
			
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayFilledEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis can't be negative";
			
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayArc(double d1, double d2, double d3, double d4, double d5)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "arc radius can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		while (d5 < d4)
		{
			d5 += 360.0;
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Arc2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4, d4, d5 - d4, 0));
		}
	}
	
	
	public static void overlayFilledSquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height can't be negative";
			
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayFilledRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height can't be negative";
			
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	
	
	public static void overlayPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo(StdDraw3D.scaleX(darr1[0]), StdDraw3D.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo(StdDraw3D.scaleX(darr1[i]), StdDraw3D.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(generalPath);
	}
	
	
	public static void overlayFilledPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo(StdDraw3D.scaleX(darr1[0]), StdDraw3D.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo(StdDraw3D.scaleX(darr1[i]), StdDraw3D.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(generalPath);
	}
	
	
	public static void overlayText(double d1, double d2, string str, double d3)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.rotate(java.lang.Math.toRadians(-d3), num, num2);
		graphics2D.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
		graphics2D.rotate(java.lang.Math.toRadians(d3), num, num2);
	}
	
	
	public static void overlayTextLeft(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)num, (float)(num2 + (double)descent));
	}
	
	
	public static void overlayTextRight(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)(num - (double)num3), (float)(num2 + (double)descent));
	}
	
	
	public static void overlayPicture(double d1, double d2, string str)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			
			throw new RuntimeException(arg_5C_0);
		}
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
	}
	
	
	public static void overlayPicture(double d1, double d2, string str, double d3)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			
			throw new RuntimeException(arg_5C_0);
		}
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		graphics2D.rotate(java.lang.Math.toRadians(-d3), num, num2);
		graphics2D.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		graphics2D.rotate(java.lang.Math.toRadians(d3), num, num2);
	}
	
	
	public static void overlayPicture(double d1, double d2, string str, double d3, double d4)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		if (d3 < (double)0f)
		{
			string arg_42_0 = new StringBuilder().append("width is negative: ").append(d3).toString();
			
			throw new RuntimeException(arg_42_0);
		}
		if (d4 < (double)0f)
		{
			string arg_73_0 = new StringBuilder().append("height is negative: ").append(d4).toString();
			
			throw new RuntimeException(arg_73_0);
		}
		double num3 = StdDraw3D.factorX(d3);
		double num4 = StdDraw3D.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_C7_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			
			throw new RuntimeException(arg_C7_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		}
	}
	
	
	public static void overlayPicture(double d1, double d2, string str, double d3, double d4, double d5)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(d3);
		double num4 = StdDraw3D.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_67_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			
			throw new RuntimeException(arg_67_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		graphics2D.rotate(java.lang.Math.toRadians(-d5), num, num2);
		graphics2D.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		graphics2D.rotate(java.lang.Math.toRadians(d5), num, num2);
	}
	
	
	public static void loadScene3D(string str)
	{
		new File(str);
		IOException ex;
		try
		{
			throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.SceneGraphFileReader");
		}
		catch (IOException arg_13_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_13_0, ByteCodeHelper.MapFlags.NoRemapping);
		}
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
	}
	
	
	public static StdDraw3D.Shape copy(StdDraw3D.Shape sdds)
	{
		object obj = StdDraw3D.Shape.access_1000(sdds);
		StdDraw3D.Shape.access_900(sdds);
		obj;
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	
	
	public static StdDraw3D.Vector3D getCameraPosition()
	{
		return StdDraw3D.camera.getPosition();
	}
	
	
	public static StdDraw3D.Vector3D getCameraOrientation()
	{
		return StdDraw3D.camera.getOrientation();
	}
	
	
	public static StdDraw3D.Vector3D getCameraDirection()
	{
		return StdDraw3D.camera.getDirection();
	}
	
	
	public static void setCameraPosition(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraPosition(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	
	
	public static void setCameraOrientation(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraOrientation(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	
	
	public static void setCameraDirection(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraDirection(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	
	
	public static void setCamera(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		StdDraw3D.camera.setPosition(d1, d2, d3);
		StdDraw3D.camera.setOrientation(d4, d5, d6);
	}
	
	
	public static void setCamera(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
	{
		StdDraw3D.camera.setPosition(sddvd1);
		StdDraw3D.camera.setOrientation(sddvd2);
	}
	public static StdDraw3D.Camera camera()
	{
		return StdDraw3D.camera;
	}
	
	
	/**/public static void main(string[] strarr)
	{
		StdDraw3D.setScale(-1.0, (double)1f);
		StdDraw3D.setInfoDisplay(false);
		StdDraw3D.setPenColor(StdDraw3D.__WHITE);
		StdDraw3D.overlaySquare((double)0f, (double)0f, 0.98);
		StdDraw3D.setPenRadius(0.06);
		StdDraw3D.setPenColor(StdDraw3D.__RED, 220);
		StdDraw3D.overlayCircle((double)0f, (double)0f, 0.8);
		StdDraw3D.setPenColor(StdDraw3D.__RED, 220);
		StdDraw3D.overlayCircle((double)0f, (double)0f, 0.6);
		StdDraw3D.setPenColor(StdDraw3D.__WHITE);
		StdDraw3D.overlayText((double)0f, 0.91, "Standard Draw 3D - Test Program");
		StdDraw3D.overlayText((double)0f, -0.95, "You should see rotating text. Drag the mouse to orbit.");
		StdDraw3D.setPenColor(StdDraw3D.__YELLOW);
		StdDraw3D.setFont(new Font("Arial", 1, 16));
		StdDraw3D.Shape shape = StdDraw3D.text3D((double)0f, (double)0f, (double)0f, "StdDraw3D");
		shape.scale(3.5);
		shape.move(-0.7, -0.1, (double)0f);
		shape = StdDraw3D.combine(new StdDraw3D.Shape[]
		{
			shape
		});
		while (true)
		{
			shape.rotate((double)0f, 1.2, (double)0f);
			StdDraw3D.show(20);
		}
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Camera access_100()
	{
		return StdDraw3D.camera;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static BufferedImage access_300()
	{
		return StdDraw3D.onscreenImage;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static bool access_400()
	{
		return StdDraw3D.infoDisplay;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static BufferedImage access_500()
	{
		return StdDraw3D.infoImage;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access_2600()
	{
		return StdDraw3D.offscreenGroup;
	}
//[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access_2700()
	{
		return StdDraw3D.onscreenGroup;
	}
	
	static StdDraw3D()
	{
		StdDraw3D.__BLACK = Color.BLACK;
		StdDraw3D.__BLUE = Color.BLUE;
		StdDraw3D.__CYAN = Color.CYAN;
		StdDraw3D.__DARK_GRAY = Color.DARK_GRAY;
		StdDraw3D.__GRAY = Color.GRAY;
		StdDraw3D.__GREEN = Color.GREEN;
		StdDraw3D.__LIGHT_GRAY = Color.LIGHT_GRAY;
		StdDraw3D.__MAGENTA = Color.MAGENTA;
		StdDraw3D.__ORANGE = Color.ORANGE;
		StdDraw3D.__PINK = Color.PINK;
		StdDraw3D.__RED = Color.RED;
		StdDraw3D.__WHITE = Color.WHITE;
		StdDraw3D.__YELLOW = Color.YELLOW;
		StdDraw3D.keysDown = new TreeSet();
		StdDraw3D.keysTyped = new LinkedList();
		StdDraw3D.mouseLock = new java.lang.Object();
		StdDraw3D.keyLock = new java.lang.Object();
		StdDraw3D.initialized = false;
		StdDraw3D.fullscreen = false;
		StdDraw3D.immersive = false;
		StdDraw3D.showedOnce = true;
		StdDraw3D.renderedOnce = false;
		StdDraw3D.DEFAULT_FONT = new Font("Arial", 0, 16);
		StdDraw3D.DEFAULT_PEN_COLOR = StdDraw3D.__WHITE;
		StdDraw3D.DEFAULT_BGCOLOR = StdDraw3D.__BLACK;
		throw new NoClassDefFoundError("javax.media.j3d.BoundingSphere");
	}
}


