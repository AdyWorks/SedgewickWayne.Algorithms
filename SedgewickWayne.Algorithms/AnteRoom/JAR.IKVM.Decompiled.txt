using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Whitelist : java.lang.Object
{
	[LineNumberTable(42)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Whitelist()
	{
	}
	[LineNumberTable(new byte[]
	{
		0,
		110,
		103,
		167,
		103,
		102,
		105,
		102,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int[] iarr = @in.readAllInts();
		StaticSETofInts staticSETofInts = new StaticSETofInts(iarr);
		while (!StdIn.IsEmpty)
		{
			int i = StdIn.readInt();
			if (!staticSETofInts.contains(i))
			{
				StdOut.println(i);
			}
		}
	}
}

using IKVM.Attributes;
using System;
[HideFromJava]
internal interface __<Unloadable>
{
	private interface Jama_Matrix
	{
	}
	private interface javax_media_j3d_Transform3D
	{
	}
	private interface javax_media_j3d_TransformGroup
	{
	}
	private interface javax_vecmath_Vector3f
	{
	}
	private interface StdDraw3D$1
	{
	}
	private interface javax_vecmath_Quat4d
	{
	}
	private interface javax_vecmath_Vector3d
	{
	}
	private interface javax_media_j3d_View
	{
	}
	private interface com_sun_j3d_utils_universe_SimpleUniverse
	{
	}
	private interface javax_media_j3d_BranchGroup
	{
	}
	private interface com_sun_j3d_utils_behaviors_vp_OrbitBehavior
	{
	}
	private interface javax_media_j3d_Background
	{
	}
	private interface javax_media_j3d_Group
	{
	}
	private interface javax_media_j3d_Canvas3D
	{
	}
	private interface javax_vecmath_Point3d
	{
	}
	private interface javax_media_j3d_BoundingSphere
	{
	}
	private interface javax_media_j3d_Appearance
	{
	}
	private interface javax_media_j3d_Texture
	{
	}
	private interface javax_vecmath_Point3f
	{
	}
	private interface javax_media_j3d_Light
	{
	}
	private interface com_sun_j3d_utils_geometry_Primitive
	{
	}
	private interface ^3Ljavax_vecmath_Point3f;
	{
	}
	private interface javax_media_j3d_Geometry
	{
	}
	private interface javax_media_j3d_Shape3D
	{
	}
}

using System;
internal class <Module>
{
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class AcyclicLP : java.lang.Object
{
	private double[] distTo;
	private DirectedEdge[] edgeTo;
	[LineNumberTable(new byte[]
	{
		21,
		110,
		121,
		120,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void relax(DirectedEdge directedEdge)
	{
		int num = directedEdge.from();
		int num2 = directedEdge.to();
		if (this.distTo[num2] < this.distTo[num] + directedEdge.weight())
		{
			this.distTo[num2] = this.distTo[num] + directedEdge.weight();
			this.edgeTo[num2] = directedEdge;
		}
	}
	[LineNumberTable(95)]
	public virtual bool hasPathTo(int i)
	{
		return this.distTo[i] > double.NegativeInfinity;
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		113,
		113,
		127,
		3,
		173,
		103,
		104,
		112,
		127,
		7,
		127,
		7,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public AcyclicLP(EdgeWeightedDigraph ewd, int i)
	{
		this.distTo = new double[ewd.V()];
		this.edgeTo = new DirectedEdge[ewd.V()];
		for (int j = 0; j < ewd.V(); j++)
		{
			this.distTo[j] = double.NegativeInfinity;
		}
		this.distTo[i] = (double)0f;
		Topological topological = new Topological(ewd);
		if (!topological.hasOrder())
		{
			string arg_72_0 = "Digraph is not acyclic.";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_72_0);
		}
		Iterator iterator = topological.order().iterator();
		while (iterator.MoveNext())
		{
			int i2 = ((Integer)iterator.Current).intValue();
			Iterator iterator2 = ewd.adj(i2).iterator();
			while (iterator2.hasNext())
			{
				DirectedEdge directedEdge = (DirectedEdge)iterator2.next();
				this.relax(directedEdge);
			}
		}
	}
	[LineNumberTable(85)]
	public virtual double distTo(int i)
	{
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		55,
		107,
		102,
		108,
		39,
		176
	}), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (DirectedEdge directedEdge = this.edgeTo[i]; directedEdge != null; directedEdge = this.edgeTo[directedEdge.from()])
		{
			stack.push(directedEdge);
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		69,
		110,
		105,
		135,
		136,
		112,
		109,
		127,
		20,
		127,
		7,
		159,
		3,
		167,
		255,
		4,
		55,
		235,
		76
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		int i2 = Integer.parseInt(strarr[1]);
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(i);
		AcyclicLP acyclicLP = new AcyclicLP(edgeWeightedDigraph, i2);
		for (int j = 0; j < edgeWeightedDigraph.V(); j++)
		{
			if (acyclicLP.hasPathTo(j))
			{
				StdOut.printf("%d to %d (%.2f)  ", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j),
					java.lang.Double.valueOf(acyclicLP.distTo(j))
				});
				Iterator iterator = acyclicLP.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					DirectedEdge obj = (DirectedEdge)iterator.Current;
					StdOut.print(new StringBuilder().append(obj).append("   ").toString());
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d         no path\n", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j)
				});
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class AcyclicSP : java.lang.Object
{
	private double[] distTo;
	private DirectedEdge[] edgeTo;
	[LineNumberTable(new byte[]
	{
		21,
		110,
		121,
		120,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void relax(DirectedEdge directedEdge)
	{
		int num = directedEdge.from();
		int num2 = directedEdge.to();
		if (this.distTo[num2] > this.distTo[num] + directedEdge.weight())
		{
			this.distTo[num2] = this.distTo[num] + directedEdge.weight();
			this.edgeTo[num2] = directedEdge;
		}
	}
	[LineNumberTable(95)]
	public virtual bool hasPathTo(int i)
	{
		return this.distTo[i] < double.PositiveInfinity;
	}
	[LineNumberTable(new byte[]
	{
		2,
		104,
		113,
		113,
		107,
		49,
		134,
		173,
		103,
		104,
		112,
		127,
		7,
		127,
		7,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public AcyclicSP(EdgeWeightedDigraph ewd, int i)
	{
		this.distTo = new double[ewd.V()];
		this.edgeTo = new DirectedEdge[ewd.V()];
		for (int j = 0; j < ewd.V(); j++)
		{
			this.distTo[j] = double.PositiveInfinity;
		}
		this.distTo[i] = (double)0f;
		Topological topological = new Topological(ewd);
		if (!topological.hasOrder())
		{
			string arg_72_0 = "Digraph is not acyclic.";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_72_0);
		}
		Iterator iterator = topological.order().iterator();
		while (iterator.MoveNext())
		{
			int i2 = ((Integer)iterator.Current).intValue();
			Iterator iterator2 = ewd.adj(i2).iterator();
			while (iterator2.hasNext())
			{
				DirectedEdge directedEdge = (DirectedEdge)iterator2.next();
				this.relax(directedEdge);
			}
		}
	}
	[LineNumberTable(85)]
	public virtual double distTo(int i)
	{
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		55,
		107,
		102,
		108,
		39,
		176
	}), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (DirectedEdge directedEdge = this.edgeTo[i]; directedEdge != null; directedEdge = this.edgeTo[directedEdge.from()])
		{
			stack.push(directedEdge);
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		68,
		110,
		105,
		167,
		104,
		112,
		109,
		127,
		20,
		127,
		7,
		159,
		3,
		167,
		255,
		4,
		55,
		235,
		76
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		int i2 = Integer.parseInt(strarr[1]);
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(i);
		AcyclicSP acyclicSP = new AcyclicSP(edgeWeightedDigraph, i2);
		for (int j = 0; j < edgeWeightedDigraph.V(); j++)
		{
			if (acyclicSP.hasPathTo(j))
			{
				StdOut.printf("%d to %d (%.2f)  ", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j),
					java.lang.Double.valueOf(acyclicSP.distTo(j))
				});
				Iterator iterator = acyclicSP.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					DirectedEdge obj = (DirectedEdge)iterator.Current;
					StdOut.print(new StringBuilder().append(obj).append("   ").toString());
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d         no path\n", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j)
				});
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.lang;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
public class AdjMatrixEdgeWeightedDigraph : java.lang.Object
{
	[Implements(new string[]
	{
		"java.util.Iterator",
		"java.lang.Iterable"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<LDirectedEdge;>;Ljava/lang/Iterable<LDirectedEdge;>;"), SourceFile("AdjMatrixEdgeWeightedDigraph.java")]
	internal sealed class AdjIterator : java.lang.Object, Iterator, Iterable, IEnumerable
	{
		private int v;
		private int w;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal AdjMatrixEdgeWeightedDigraph this$0 = adjMatrixEdgeWeightedDigraph;
		[LineNumberTable(new byte[]
		{
			72,
			115,
			125,
			144
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			while (this.w < AdjMatrixEdgeWeightedDigraph.access$000(this.this$0))
			{
				if (AdjMatrixEdgeWeightedDigraph.access$100(this.this$0)[this.v][this.w] != null)
				{
					return true;
				}
				this.w++;
			}
			return false;
		}
		[LineNumberTable(new byte[]
		{
			80,
			127,
			16
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual DirectedEdge next()
		{
			if (this.hasNext())
			{
				DirectedEdge[] arg_2D_0 = AdjMatrixEdgeWeightedDigraph.access$100(this.this$0)[this.v];
				int num = this.w;
				int arg_2D_1 = num;
				this.w = num + 1;
				return arg_2D_0[arg_2D_1];
			}
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException();
		}
		[LineNumberTable(new byte[]
		{
			67,
			47,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public AdjIterator(AdjMatrixEdgeWeightedDigraph adjMatrixEdgeWeightedDigraph, int num)
		{
			this.w = 0;
			this.v = num;
		}
		[Signature("()Ljava/util/Iterator<LDirectedEdge;>;")]
		public virtual Iterator iterator()
		{
			return this;
		}
		[LineNumberTable(134)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(115), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			return this.next();
		}
		[HideFromJava]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return new IterableEnumerator(this);
		}
	}
	private int V;
	private int E;
	private DirectedEdge[][] adj;
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$000(AdjMatrixEdgeWeightedDigraph adjMatrixEdgeWeightedDigraph)
	{
		return adjMatrixEdgeWeightedDigraph.V;
	}
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static DirectedEdge[][] access$100(AdjMatrixEdgeWeightedDigraph adjMatrixEdgeWeightedDigraph)
	{
		return adjMatrixEdgeWeightedDigraph.adj;
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		104,
		116,
		103,
		103,
		127,
		10
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public AdjMatrixEdgeWeightedDigraph(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		int[] array = new int[]
		{
			0,
			i
		};
		array[0] = i;
		this.adj = (DirectedEdge[][])ByteCodeHelper.multianewarray(typeof(DirectedEdge[][]).TypeHandle, array);
	}
	[LineNumberTable(new byte[]
	{
		46,
		103,
		103,
		108,
		110,
		139
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(DirectedEdge de)
	{
		int num = de.from();
		int num2 = de.to();
		if (this.adj[num][num2] == null)
		{
			this.E++;
			this.adj[num][num2] = de;
		}
	}
	[LineNumberTable(111), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		return new AdjMatrixEdgeWeightedDigraph.AdjIterator(this, i);
	}
	[LineNumberTable(new byte[]
	{
		11,
		105,
		116,
		182,
		105,
		110,
		110,
		127,
		2,
		110,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public AdjMatrixEdgeWeightedDigraph(int i1, int i2) : this(i1)
	{
		if (i2 < 0)
		{
			string arg_17_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_17_0);
		}
		if (i2 > i1 * i1)
		{
			string arg_2D_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		while (this.E != i2)
		{
			int i3 = ByteCodeHelper.d2i((double)i1 * java.lang.Math.random());
			int i4 = ByteCodeHelper.d2i((double)i1 * java.lang.Math.random());
			double d = (double)java.lang.Math.round(100.0 * java.lang.Math.random()) / 100.0;
			this.addEdge(new DirectedEdge(i3, i4, d));
		}
	}
	public virtual int V()
	{
		return this.V;
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		94,
		107,
		102,
		127,
		24,
		110,
		127,
		2,
		127,
		3,
		159,
		5,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string property = System.getProperty("line.separator");
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(new StringBuilder().append(this.V).append(" ").append(this.E).append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(new StringBuilder().append(i).append(": ").toString());
			Iterator iterator = this.adj(i).iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				stringBuilder.append(new StringBuilder().append(obj).append("  ").toString());
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		111,
		105,
		105,
		104,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int i = Integer.parseInt(strarr[0]);
		int i2 = Integer.parseInt(strarr[1]);
		AdjMatrixEdgeWeightedDigraph obj = new AdjMatrixEdgeWeightedDigraph(i, i2);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Alphabet : java.lang.Object
{
	internal static Alphabet __<>BINARY;
	internal static Alphabet __<>OCTAL;
	internal static Alphabet __<>DECIMAL;
	internal static Alphabet __<>HEXADECIMAL;
	internal static Alphabet __<>DNA;
	internal static Alphabet __<>LOWERCASE;
	internal static Alphabet __<>UPPERCASE;
	internal static Alphabet __<>PROTEIN;
	internal static Alphabet __<>BASE64;
	internal static Alphabet __<>ASCII;
	internal static Alphabet __<>EXTENDED_ASCII;
	internal static Alphabet __<>UNICODE16;
	private char[] alphabet;
	private int[] inverse;
	private int R;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet BINARY
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>BINARY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet OCTAL
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>OCTAL;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet DECIMAL
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>DECIMAL;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet HEXADECIMAL
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>HEXADECIMAL;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet DNA
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>DNA;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet LOWERCASE
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>LOWERCASE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet UPPERCASE
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>UPPERCASE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet PROTEIN
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>PROTEIN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet BASE64
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>BASE64;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet ASCII
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>ASCII;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet EXTENDED_ASCII
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>EXTENDED_ASCII;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Alphabet UNICODE16
	{
		[HideFromJava]
		get
		{
			return Alphabet.__<>UNICODE16;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		6,
		104,
		108,
		108,
		167,
		102,
		42,
		134,
		102,
		41,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Alphabet(int num)
	{
		this.alphabet = new char[num];
		this.inverse = new int[num];
		this.R = num;
		for (int i = 0; i < num; i++)
		{
			this.alphabet[i] = (char)i;
		}
		for (int i = 0; i < num; i++)
		{
			this.inverse[i] = i;
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		119,
		98,
		121,
		159,
		16
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int toIndex(char ch)
	{
		if (ch < '\0' || (int)ch >= this.inverse.Length || this.inverse[(int)ch] == -1)
		{
			string arg_44_0 = new StringBuilder().append("Character ").append(ch).append(" not in alphabet").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_44_0);
		}
		return this.inverse[(int)ch];
	}
	[LineNumberTable(new byte[]
	{
		60,
		109,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual char toChar(int i)
	{
		if (i < 0 || i >= this.R)
		{
			string arg_17_0 = "Alphabet index out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		return this.alphabet[i];
	}
	[LineNumberTable(new byte[]
	{
		51,
		103,
		108,
		103,
		44,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int[] toIndices(string str)
	{
		char[] array = java.lang.String.instancehelper_toCharArray(str);
		int[] array2 = new int[java.lang.String.instancehelper_length(str)];
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = this.toIndex(array[i]);
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		68,
		104,
		103,
		48,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string toChars(int[] iarr)
	{
		StringBuilder stringBuilder = new StringBuilder(iarr.Length);
		for (int i = 0; i < iarr.Length; i++)
		{
			stringBuilder.append(this.toChar(iarr[i]));
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		168,
		107,
		107,
		104,
		101,
		127,
		16,
		228,
		60,
		230,
		71,
		108,
		108,
		112,
		108,
		41,
		198,
		107,
		48,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Alphabet(string str)
	{
		bool[] array = new bool[65535];
		for (int i = 0; i < java.lang.String.instancehelper_length(str); i++)
		{
			int num = (int)java.lang.String.instancehelper_charAt(str, i);
			if (array[num])
			{
				string arg_54_0 = new StringBuilder().append("Illegal alphabet: repeated character = '").append((char)num).append("'").toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_54_0);
			}
			array[num] = true;
		}
		this.alphabet = java.lang.String.instancehelper_toCharArray(str);
		this.R = java.lang.String.instancehelper_length(str);
		this.inverse = new int[65535];
		for (int i = 0; i < this.inverse.Length; i++)
		{
			this.inverse[i] = -1;
		}
		for (int i = 0; i < this.R; i++)
		{
			this.inverse[(int)this.alphabet[i]] = i;
		}
	}
	[LineNumberTable(new byte[]
	{
		20,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Alphabet() : this(256)
	{
	}
	[LineNumberTable(75)]
	public virtual bool contains(char ch)
	{
		return this.inverse[(int)ch] != -1;
	}
	public virtual int R()
	{
		return this.R;
	}
	[LineNumberTable(new byte[]
	{
		35,
		98,
		109,
		36,
		134
	})]
	public virtual int lgR()
	{
		int num = 0;
		for (int i = this.R - 1; i >= 1; i /= 2)
		{
			num++;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		76,
		112,
		108,
		134,
		112,
		108,
		134,
		113,
		110,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int[] iarr = Alphabet.__<>BASE64.toIndices("NowIsTheTimeForAllGoodMen");
		string obj = Alphabet.__<>BASE64.toChars(iarr);
		StdOut.println(obj);
		int[] iarr2 = Alphabet.__<>DNA.toIndices("AACGAACGGTTTACCCCG");
		string obj2 = Alphabet.__<>DNA.toChars(iarr2);
		StdOut.println(obj2);
		int[] iarr3 = Alphabet.__<>DECIMAL.toIndices("01234567890123456789");
		string obj3 = Alphabet.__<>DECIMAL.toChars(iarr3);
		StdOut.println(obj3);
	}
	[LineNumberTable(new byte[]
	{
		159,
		157,
		111,
		111,
		111,
		111,
		111,
		111,
		111,
		111,
		111,
		111,
		111
	})]
	static Alphabet()
	{
		Alphabet.__<>BINARY = new Alphabet("01");
		Alphabet.__<>OCTAL = new Alphabet("01234567");
		Alphabet.__<>DECIMAL = new Alphabet("0123456789");
		Alphabet.__<>HEXADECIMAL = new Alphabet("0123456789ABCDEF");
		Alphabet.__<>DNA = new Alphabet("ACTG");
		Alphabet.__<>LOWERCASE = new Alphabet("abcdefghijklmnopqrstuvwxyz");
		Alphabet.__<>UPPERCASE = new Alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Alphabet.__<>PROTEIN = new Alphabet("ACDEFGHIKLMNPQRSTVWY");
		Alphabet.__<>BASE64 = new Alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		Alphabet.__<>ASCII = new Alphabet(128);
		Alphabet.__<>EXTENDED_ASCII = new Alphabet(256);
		Alphabet.__<>UNICODE16 = new Alphabet(65536);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Arbitrage : java.lang.Object
{
	[LineNumberTable(46)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Arbitrage()
	{
	}
	[LineNumberTable(new byte[]
	{
		5,
		102,
		167,
		103,
		102,
		104,
		104,
		104,
		114,
		232,
		61,
		8,
		230,
		74,
		105,
		108,
		107,
		127,
		9,
		127,
		7,
		115,
		159,
		12,
		130,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = StdIn.readInt();
		string[] array = new string[num];
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(num);
		for (int i = 0; i < num; i++)
		{
			array[i] = StdIn.readString();
			for (int j = 0; j < num; j++)
			{
				double a = StdIn.readDouble();
				DirectedEdge directedEdge = new DirectedEdge(i, j, -java.lang.Math.log(a));
				edgeWeightedDigraph.addEdge(directedEdge);
			}
		}
		BellmanFordSP bellmanFordSP = new BellmanFordSP(edgeWeightedDigraph, 0);
		if (bellmanFordSP.hasNegativeCycle())
		{
			double num2 = 1000.0;
			Iterator iterator = bellmanFordSP.negativeCycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
				StdOut.printf("%10.5f %s ", new object[]
				{
					java.lang.Double.valueOf(num2),
					array[directedEdge.from()]
				});
				num2 *= java.lang.Math.exp(-directedEdge.weight());
				StdOut.printf("= %10.5f %s\n", new object[]
				{
					java.lang.Double.valueOf(num2),
					array[directedEdge.to()]
				});
			}
		}
		else
		{
			StdOut.println("No arbitrage opportunity");
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class AssignmentProblem : java.lang.Object
{
	private const int UNMATCHED = -1;
	private int N;
	private double[][] weight;
	private double[] px;
	private double[] py;
	private int[] xy;
	private int[] yx;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		73,
		107,
		107,
		111,
		106,
		226,
		61,
		38,
		230,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isDualFeasible()
	{
		for (int i = 0; i < this.N; i++)
		{
			for (int j = 0; j < this.N; j++)
			{
				if (this.reduced(i, j) < (double)0f)
				{
					StdOut.println("Dual variables are not feasible");
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		88,
		107,
		127,
		2,
		106,
		226,
		61,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isComplementarySlack()
	{
		for (int i = 0; i < this.N; i++)
		{
			if (this.xy[i] != -1 && this.reduced(i, this.xy[i]) != (double)0f)
			{
				StdOut.println("Primal and dual variables are not complementary slack");
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		9,
		112,
		116,
		107,
		61,
		166,
		107,
		63,
		8,
		166,
		110,
		109,
		127,
		9,
		30,
		43,
		233,
		72,
		169,
		127,
		7,
		121,
		106,
		107,
		139,
		162,
		127,
		23,
		127,
		30
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void augment()
	{
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(2 * this.N + 2);
		int num = 2 * this.N;
		int num2 = 2 * this.N + 1;
		for (int i = 0; i < this.N; i++)
		{
			if (this.xy[i] == -1)
			{
				edgeWeightedDigraph.addEdge(new DirectedEdge(num, i, (double)0f));
			}
		}
		for (int i = 0; i < this.N; i++)
		{
			if (this.yx[i] == -1)
			{
				edgeWeightedDigraph.addEdge(new DirectedEdge(this.N + i, num2, this.py[i]));
			}
		}
		for (int i = 0; i < this.N; i++)
		{
			for (int j = 0; j < this.N; j++)
			{
				if (this.xy[i] == j)
				{
					edgeWeightedDigraph.addEdge(new DirectedEdge(this.N + j, i, (double)0f));
				}
				else
				{
					edgeWeightedDigraph.addEdge(new DirectedEdge(i, this.N + j, this.reduced(i, j)));
				}
			}
		}
		DijkstraSP dijkstraSP = new DijkstraSP(edgeWeightedDigraph, num);
		Iterator iterator = dijkstraSP.pathTo(num2).iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			int num3 = directedEdge.from();
			int num4 = directedEdge.to() - this.N;
			if (num3 < this.N)
			{
				this.xy[num3] = num4;
				this.yx[num4] = num3;
			}
		}
		for (int j = 0; j < this.N; j++)
		{
			double[] arg_180_0 = this.px;
			int num5 = j;
			double[] array = arg_180_0;
			array[num5] += dijkstraSP.distTo(j);
		}
		for (int j = 0; j < this.N; j++)
		{
			double[] arg_1B6_0 = this.py;
			int num5 = j;
			double[] array = arg_1B6_0;
			array[num5] += dijkstraSP.distTo(this.N + j);
		}
	}
	[LineNumberTable(180)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		return this.isPerfectMatching() && this.isDualFeasible() && this.isComplementarySlack();
	}
	[LineNumberTable(93)]
	private double reduced(int num, int num2)
	{
		return this.weight[num][num2] + this.px[num] - this.py[num2];
	}
	[LineNumberTable(new byte[]
	{
		101,
		108,
		107,
		108,
		106,
		130,
		235,
		59,
		230,
		73,
		107,
		114,
		106,
		226,
		61,
		230,
		70,
		107,
		114,
		106,
		226,
		61,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isPerfectMatching()
	{
		bool[] array = new bool[this.N];
		for (int i = 0; i < this.N; i++)
		{
			if (array[this.xy[i]])
			{
				StdOut.println("Not a perfect matching");
				return false;
			}
			array[this.xy[i]] = true;
		}
		for (int i = 0; i < this.N; i++)
		{
			if (this.xy[this.yx[i]] != i)
			{
				StdOut.println("xy[] and yx[] are not inverses");
				return false;
			}
		}
		for (int i = 0; i < this.N; i++)
		{
			if (this.yx[this.xy[i]] != i)
			{
				StdOut.println("xy[] and yx[] are not inverses");
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		159,
		171,
		104,
		104,
		127,
		20,
		107,
		109,
		49,
		40,
		230,
		69,
		113,
		177,
		113,
		113,
		122,
		186,
		107,
		122,
		122,
		230,
		61,
		230,
		69,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public AssignmentProblem(double[][] darr)
	{
		this.N = darr.Length;
		int arg_29_0 = this.N;
		int arg_24_0 = this.N;
		int[] array = new int[2];
		int num = arg_24_0;
		array[1] = num;
		num = arg_29_0;
		array[0] = num;
		this.weight = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < this.N; i++)
		{
			for (int j = 0; j < this.N; j++)
			{
				this.weight[i][j] = darr[i][j];
			}
		}
		this.px = new double[this.N];
		this.py = new double[this.N];
		this.xy = new int[this.N];
		this.yx = new int[this.N];
		for (int i = 0; i < this.N; i++)
		{
			this.xy[i] = -1;
		}
		for (int i = 0; i < this.N; i++)
		{
			this.yx[i] = -1;
		}
		for (int i = 0; i < this.N; i++)
		{
			if (!AssignmentProblem.$assertionsDisabled && !this.isDualFeasible())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			if (!AssignmentProblem.$assertionsDisabled && !this.isComplementarySlack())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			this.augment();
		}
		if (!AssignmentProblem.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		58,
		102,
		107,
		107,
		21,
		198
	})]
	public virtual double weight()
	{
		double num = (double)0f;
		for (int i = 0; i < this.N; i++)
		{
			if (this.xy[i] != -1)
			{
				num += this.weight[i][this.xy[i]];
			}
		}
		return num;
	}
	[LineNumberTable(117)]
	public virtual int sol(int i)
	{
		return this.xy[i];
	}
	[LineNumberTable(98)]
	public virtual double dualRow(int i)
	{
		return this.px[i];
	}
	[LineNumberTable(103)]
	public virtual double dualCol(int i)
	{
		return this.py[i];
	}
	[LineNumberTable(new byte[]
	{
		160,
		70,
		110,
		103,
		127,
		6,
		104,
		104,
		47,
		40,
		232,
		70,
		105,
		127,
		6,
		104,
		63,
		45,
		168,
		104,
		63,
		25,
		136,
		104,
		63,
		25,
		136,
		107,
		104,
		63,
		44,
		40,
		203
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int num = @in.readInt();
		int arg_23_0 = num;
		int arg_1E_0 = num;
		int[] array = new int[2];
		int num2 = arg_1E_0;
		array[1] = num2;
		num2 = arg_23_0;
		array[0] = num2;
		double[][] array2 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num; j++)
			{
				array2[i][j] = @in.readDouble();
			}
		}
		AssignmentProblem assignmentProblem = new AssignmentProblem(array2);
		StdOut.println(new StringBuilder().append("weight = ").append(assignmentProblem.weight()).toString());
		for (int j = 0; j < num; j++)
		{
			StdOut.println(new StringBuilder().append(j).append("-").append(assignmentProblem.sol(j)).append("' ").append(array2[j][assignmentProblem.sol(j)]).toString());
		}
		for (int j = 0; j < num; j++)
		{
			StdOut.println(new StringBuilder().append("px[").append(j).append("] = ").append(assignmentProblem.dualRow(j)).toString());
		}
		for (int j = 0; j < num; j++)
		{
			StdOut.println(new StringBuilder().append("py[").append(j).append("] = ").append(assignmentProblem.dualCol(j)).toString());
		}
		for (int j = 0; j < num; j++)
		{
			for (int k = 0; k < num; k++)
			{
				StdOut.println(new StringBuilder().append("reduced[").append(j).append("-").append(k).append("] = ").append(assignmentProblem.reduced(j, k)).toString());
			}
		}
	}
	[LineNumberTable(18)]
	static AssignmentProblem()
	{
		AssignmentProblem.$assertionsDisabled = !ClassLiteral<AssignmentProblem>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Average : java.lang.Object
{
	[LineNumberTable(33)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Average()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		182,
		98,
		166,
		103,
		103,
		101,
		100,
		162,
		166,
		127,
		2
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 0;
		double num2 = (double)0f;
		double num3;
		while (!StdIn.IsEmpty)
		{
			num3 = StdIn.readDouble();
			num2 += num3;
			num++;
		}
		num3 = num2 / (double)num;
		StdOut.println(new StringBuilder().append("Average is ").append(num3).toString());
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class Bag : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("Bag", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("Bag.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("Bag.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LBag$Node<TItem;>;")]
		private Bag.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal Bag this$0 = bag;
		[LineNumberTable(new byte[]
		{
			58,
			111,
			103
		}), Signature("(LBag$Node<TItem;>;)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ListIterator(Bag bag, Bag.Node node)
		{
			this.current = node;
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(113)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			66,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = Bag.Node.access$100(this.current);
			this.current = Bag.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;"), SourceFile("Bag.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LBag$Node<TItem;>;")]
		private Bag.Node next;
		[LineNumberTable(54), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(Bag.1) : this()
		{
		}
		[LineNumberTable(54), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$102(Bag.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(54), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Bag.Node access$202(Bag.Node node, Bag.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(54), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$100(Bag.Node node)
		{
			return node.item;
		}
		[LineNumberTable(54), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Bag.Node access$200(Bag.Node node)
		{
			return node.next;
		}
		[LineNumberTable(54)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node()
		{
		}
	}
	private int N;
	[Signature("LBag$Node<TItem;>;")]
	private Bag.Node first;
	[LineNumberTable(new byte[]
	{
		12,
		104,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Bag()
	{
		this.first = null;
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		38,
		103,
		108,
		109,
		109,
		110
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void add(object obj)
	{
		Bag.Node node = this.first;
		this.first = new Bag.Node(null);
		Bag.Node.access$102(this.first, obj);
		Bag.Node.access$202(this.first, node);
		this.N++;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(101), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new Bag.ListIterator(this, this.first);
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(new byte[]
	{
		77,
		102,
		103,
		102,
		103,
		130,
		127,
		5,
		123,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Bag bag = new Bag();
		while (!StdIn.IsEmpty)
		{
			string obj = StdIn.readString();
			bag.add(obj);
		}
		StdOut.println(new StringBuilder().append("size of bag = ").append(bag.size()).toString());
		Iterator iterator = bag.iterator();
		while (iterator.MoveNext())
		{
			string obj2 = (string)iterator.Current;
			StdOut.println(obj2);
		}
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BellmanFordSP : java.lang.Object
{
	private double[] distTo;
	private DirectedEdge[] edgeTo;
	private bool[] onQueue;
	[Signature("LQueue<Ljava/lang/Integer;>;")]
	private global::Queue queue;
	private int cost;
	[Signature("Ljava/lang/Iterable<LDirectedEdge;>;")]
	private Iterable cycle;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		17,
		104,
		113,
		113,
		113,
		107,
		49,
		134,
		173,
		107,
		113,
		105,
		117,
		118,
		105,
		104,
		130,
		124
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BellmanFordSP(EdgeWeightedDigraph ewd, int i)
	{
		this.distTo = new double[ewd.V()];
		this.edgeTo = new DirectedEdge[ewd.V()];
		this.onQueue = new bool[ewd.V()];
		for (int j = 0; j < ewd.V(); j++)
		{
			this.distTo[j] = double.PositiveInfinity;
		}
		this.distTo[i] = (double)0f;
		this.queue = new global::Queue();
		this.queue.enqueue(Integer.valueOf(i));
		this.onQueue[i] = true;
		while (!this.queue.IsEmpty && !this.hasNegativeCycle())
		{
			int j = ((Integer)this.queue.dequeue()).intValue();
			this.onQueue[j] = false;
			this.relax(ewd, j);
		}
		if (!BellmanFordSP.$assertionsDisabled && !this.check(ewd, i))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual bool hasNegativeCycle()
	{
		return this.cycle != null;
	}
	[Signature("()Ljava/lang/Iterable<LDirectedEdge;>;")]
	public virtual Iterable negativeCycle()
	{
		return this.cycle;
	}
	[LineNumberTable(new byte[]
	{
		40,
		127,
		5,
		103,
		121,
		120,
		105,
		106,
		113,
		169,
		127,
		8,
		102,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void relax(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		Iterator iterator = edgeWeightedDigraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			int num2 = directedEdge.to();
			if (this.distTo[num2] > this.distTo[num] + directedEdge.weight())
			{
				this.distTo[num2] = this.distTo[num] + directedEdge.weight();
				this.edgeTo[num2] = directedEdge;
				if (!this.onQueue[num2])
				{
					this.queue.enqueue(Integer.valueOf(num2));
					this.onQueue[num2] = true;
				}
			}
			int num3 = this.cost;
			bool expr_93 = num3 != 0;
			this.cost = num3 + 1;
			int expr_A4 = edgeWeightedDigraph.V();
			if (expr_A4 == -1 || (expr_93 ? 1 : 0) % expr_A4 == 0)
			{
				this.findNegativeCycle();
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		107,
		102,
		127,
		1,
		140,
		104,
		127,
		5,
		130,
		229,
		70,
		121,
		111,
		130,
		107,
		102,
		125,
		111,
		226,
		60,
		230,
		73,
		110,
		127,
		6,
		105,
		123,
		127,
		16,
		130,
		229,
		57,
		233,
		75,
		110,
		111,
		106,
		105,
		108,
		123,
		127,
		16,
		226,
		57,
		233,
		76,
		106,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		if (this.hasNegativeCycle())
		{
			double num2 = (double)0f;
			Iterator iterator = this.negativeCycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
				num2 += directedEdge.weight();
			}
			if (num2 >= (double)0f)
			{
				System.err.println(new StringBuilder().append("error: weight of negative cycle = ").append(num2).toString());
				return false;
			}
		}
		else
		{
			if (this.distTo[num] != (double)0f || this.edgeTo[num] != null)
			{
				System.err.println("distanceTo[s] and edgeTo[s] inconsistent");
				return false;
			}
			for (int i = 0; i < edgeWeightedDigraph.V(); i++)
			{
				if (i != num)
				{
					if (this.edgeTo[i] == null && this.distTo[i] != double.PositiveInfinity)
					{
						System.err.println("distTo[] and edgeTo[] inconsistent");
						return false;
					}
				}
			}
			for (int i = 0; i < edgeWeightedDigraph.V(); i++)
			{
				Iterator iterator2 = edgeWeightedDigraph.adj(i).iterator();
				while (iterator2.hasNext())
				{
					DirectedEdge directedEdge2 = (DirectedEdge)iterator2.next();
					int num3 = directedEdge2.to();
					if (this.distTo[i] + directedEdge2.weight() < this.distTo[num3])
					{
						System.err.println(new StringBuilder().append("edge ").append(directedEdge2).append(" not relaxed").toString());
						return false;
					}
				}
			}
			for (int i = 0; i < edgeWeightedDigraph.V(); i++)
			{
				if (this.edgeTo[i] != null)
				{
					DirectedEdge directedEdge3 = this.edgeTo[i];
					int num4 = directedEdge3.from();
					if (i != directedEdge3.to())
					{
						return false;
					}
					if (this.distTo[num4] + directedEdge3.weight() != this.distTo[i])
					{
						System.err.println(new StringBuilder().append("edge ").append(directedEdge3).append(" on shortest path not tight").toString());
						return false;
					}
				}
			}
		}
		StdOut.println("Satisfies optimality conditions");
		StdOut.println();
		return true;
	}
	[LineNumberTable(new byte[]
	{
		76,
		104,
		103,
		102,
		106,
		14,
		198,
		103,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void findNegativeCycle()
	{
		int num = this.edgeTo.Length;
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(num);
		for (int i = 0; i < num; i++)
		{
			if (this.edgeTo[i] != null)
			{
				edgeWeightedDigraph.addEdge(this.edgeTo[i]);
			}
		}
		EdgeWeightedDirectedCycle edgeWeightedDirectedCycle = new EdgeWeightedDirectedCycle(edgeWeightedDigraph);
		this.cycle = edgeWeightedDirectedCycle.cycle();
	}
	[LineNumberTable(157)]
	public virtual bool hasPathTo(int i)
	{
		return this.distTo[i] < double.PositiveInfinity;
	}
	[LineNumberTable(new byte[]
	{
		95,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double distTo(int i)
	{
		if (this.hasNegativeCycle())
		{
			string arg_12_0 = "Negative cost cycle exists";
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException(arg_12_0);
		}
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		119,
		104,
		112,
		107,
		102,
		108,
		39,
		176
	}), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (this.hasNegativeCycle())
		{
			string arg_12_0 = "Negative cost cycle exists";
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException(arg_12_0);
		}
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (DirectedEdge directedEdge = this.edgeTo[i]; directedEdge != null; directedEdge = this.edgeTo[directedEdge.from()])
		{
			stack.push(directedEdge);
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		160,
		133,
		110,
		105,
		135,
		168,
		104,
		127,
		5,
		238,
		69,
		112,
		109,
		127,
		20,
		127,
		7,
		159,
		3,
		167,
		255,
		4,
		55,
		235,
		78
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		int i2 = Integer.parseInt(strarr[1]);
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(i);
		BellmanFordSP bellmanFordSP = new BellmanFordSP(edgeWeightedDigraph, i2);
		if (bellmanFordSP.hasNegativeCycle())
		{
			Iterator iterator = bellmanFordSP.negativeCycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				StdOut.println(obj);
			}
		}
		else
		{
			for (int j = 0; j < edgeWeightedDigraph.V(); j++)
			{
				if (bellmanFordSP.hasPathTo(j))
				{
					StdOut.printf("%d to %d (%5.2f)  ", new object[]
					{
						Integer.valueOf(i2),
						Integer.valueOf(j),
						java.lang.Double.valueOf(bellmanFordSP.distTo(j))
					});
					Iterator iterator2 = bellmanFordSP.pathTo(j).iterator();
					while (iterator2.hasNext())
					{
						DirectedEdge obj2 = (DirectedEdge)iterator2.next();
						StdOut.print(new StringBuilder().append(obj2).append("   ").toString());
					}
					StdOut.println();
				}
				else
				{
					StdOut.printf("%d to %d           no path\n", new object[]
					{
						Integer.valueOf(i2),
						Integer.valueOf(j)
					});
				}
			}
		}
	}
	[LineNumberTable(52)]
	static BellmanFordSP()
	{
		BellmanFordSP.$assertionsDisabled = !ClassLiteral<BellmanFordSP>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class BinaryDump : java.lang.Object
{
	[LineNumberTable(23)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryDump()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		168,
		99,
		101,
		201,
		105,
		107,
		118,
		111,
		230,
		60,
		230,
		70,
		104,
		127,
		2
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 16;
		if (strarr.Length == 1)
		{
			num = Integer.parseInt(strarr[0]);
		}
		int num2 = 0;
		while (!BinaryStdIn.IsEmpty)
		{
			if (num == 0)
			{
				BinaryStdIn.readBoolean();
			}
			else
			{
				if (num2 != 0)
				{
					bool expr_28 = num2 != 0;
					int expr_2A = num;
					if (expr_2A == -1 || (expr_28 ? 1 : 0) % expr_2A == 0)
					{
						StdOut.println();
					}
				}
				if (BinaryStdIn.readBoolean())
				{
					StdOut.print(1);
				}
				else
				{
					StdOut.print(0);
				}
			}
			num2++;
		}
		if (num != 0)
		{
			StdOut.println();
		}
		StdOut.println(new StringBuilder().append(num2).append(" bits").toString());
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.net;
using System;
using System.Runtime.CompilerServices;
public sealed class BinaryIn : java.lang.Object
{
	private const int EOF = -1;
	private BufferedInputStream @in;
	private int buffer;
	private int N;
	[LineNumberTable(new byte[]
	{
		77,
		127,
		4,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void fillBuffer()
	{
		try
		{
			this.buffer = this.@in.read();
			this.N = 8;
		}
		catch (IOException arg_1C_0)
		{
			goto IL_20;
		}
		return;
		IL_20:
		System.err.println("EOF");
		this.buffer = -1;
		this.N = -1;
	}
	public bool IsEmpty
	{
		return this.buffer == -1;
	}
	[LineNumberTable(new byte[]
	{
		115,
		184,
		105,
		103,
		102,
		201,
		103,
		110,
		103,
		102,
		120,
		103,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual char readChar()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_12_0);
		}
		int num;
		if (this.N == 8)
		{
			num = this.buffer;
			this.fillBuffer();
			return (char)(num & 255);
		}
		num = this.buffer;
		num <<= 8 - this.N;
		int n = this.N;
		this.fillBuffer();
		if (IsEmpty)
		{
			string arg_6B_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_6B_0);
		}
		this.N = n;
		num |= (int)((uint)this.buffer >> this.N);
		return (char)(num & 255);
	}
	[LineNumberTable(new byte[]
	{
		102,
		120,
		110,
		118,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool readBoolean()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_12_0);
		}
		this.N--;
		int result = ((this.buffer >> this.N & 1) == 1) ? 1 : 0;
		if (this.N == 0)
		{
			this.fillBuffer();
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		135,
		98,
		102,
		103,
		100,
		228,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int readInt()
	{
		int num = 0;
		for (int i = 0; i < 4; i++)
		{
			int num2 = (int)this.readChar();
			num <<= 8;
			num |= num2;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		171,
		99,
		102,
		103,
		100,
		229,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual long readLong()
	{
		long num = 0L;
		for (int i = 0; i < 8; i++)
		{
			int num2 = (int)this.readChar();
			num <<= 8;
			num |= (long)num2;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		48,
		200,
		103,
		104,
		103,
		108,
		102,
		194,
		173,
		138,
		104,
		105,
		109,
		210,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryIn(string str)
	{
		try
		{
			File file = new File(str);
			if (!file.exists())
			{
				URL uRL = java.lang.Object.instancehelper_getClass(this).getResource(str);
				if (uRL == null)
				{
					uRL = new URL(str);
				}
				URLConnection uRLConnection = uRL.openConnection();
				InputStream inputStream = uRLConnection.getInputStream();
				this.@in = new BufferedInputStream(inputStream);
				this.fillBuffer();
				goto IL_74;
			}
			FileInputStream fileInputStream = new FileInputStream(file);
			this.@in = new BufferedInputStream(fileInputStream);
			this.fillBuffer();
		}
		catch (IOException arg_71_0)
		{
			goto IL_76;
		}
		return;
		IL_74:
		return;
		IL_76:
		System.err.println(new StringBuilder().append("Could not open ").append(str).toString());
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		117,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryIn()
	{
		BufferedInputStream.__<clinit>();
		this.@in = new BufferedInputStream(System.@in);
		this.fillBuffer();
	}
	[LineNumberTable(new byte[]
	{
		11,
		104,
		108,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryIn(InputStream @is)
	{
		this.@in = new BufferedInputStream(@is);
		this.fillBuffer();
	}
	[LineNumberTable(new byte[]
	{
		19,
		136,
		103,
		108,
		209,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryIn(Socket s)
	{
		try
		{
			InputStream inputStream = s.getInputStream();
			this.@in = new BufferedInputStream(inputStream);
			this.fillBuffer();
		}
		catch (IOException arg_25_0)
		{
			goto IL_29;
		}
		return;
		IL_29:
		System.err.println(new StringBuilder().append("Could not open ").append(s).toString());
	}
	[LineNumberTable(new byte[]
	{
		33,
		136,
		103,
		103,
		108,
		209,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryIn(URL url)
	{
		try
		{
			URLConnection uRLConnection = url.openConnection();
			InputStream inputStream = uRLConnection.getInputStream();
			this.@in = new BufferedInputStream(inputStream);
			this.fillBuffer();
		}
		catch (IOException arg_2C_0)
		{
			goto IL_30;
		}
		return;
		IL_30:
		System.err.println(new StringBuilder().append("Could not open ").append(url).toString());
	}
	public virtual bool exists()
	{
		return this.@in != null;
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		191,
		15,
		141,
		98,
		102,
		101,
		103,
		232,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual char readChar(int i)
	{
		if (i < 1 || i > 16)
		{
			string arg_28_0 = new StringBuilder().append("Illegal value of r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_28_0);
		}
		if (i == 8)
		{
			return this.readChar();
		}
		int num = 0;
		for (int j = 0; j < i; j++)
		{
			num = (int)((ushort)(num << 1));
			int num2 = this.readBoolean() ? 1 : 0;
			if (num2 != 0)
			{
				num = (int)((ushort)(num | 1));
			}
		}
		return (char)num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		103,
		152,
		102,
		104,
		103,
		104,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string readString()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_12_0);
		}
		StringBuilder stringBuilder = new StringBuilder();
		while (!IsEmpty)
		{
			int c = (int)this.readChar();
			stringBuilder.append((char)c);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		120,
		98,
		102,
		103,
		101,
		229,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual short readShort()
	{
		int num = 0;
		for (int i = 0; i < 2; i++)
		{
			int num2 = (int)this.readChar();
			num = (int)((short)(num << 8));
			num = (int)((short)(num | num2));
		}
		return (short)num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		151,
		191,
		15,
		142,
		98,
		102,
		100,
		103,
		231,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int readInt(int i)
	{
		if (i < 1 || i > 32)
		{
			string arg_28_0 = new StringBuilder().append("Illegal value of r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_28_0);
		}
		if (i == 32)
		{
			return this.readInt();
		}
		int num = 0;
		for (int j = 0; j < i; j++)
		{
			num <<= 1;
			int num2 = this.readBoolean() ? 1 : 0;
			if (num2 != 0)
			{
				num |= 1;
			}
		}
		return num;
	}
	[LineNumberTable(300)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double readDouble()
	{
		DoubleConverter doubleConverter;
		return DoubleConverter.ToDouble(this.readLong(), ref doubleConverter);
	}
	[LineNumberTable(309)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual float readFloat()
	{
		FloatConverter floatConverter;
		return FloatConverter.ToFloat(this.readInt(), ref floatConverter);
	}
	[LineNumberTable(new byte[]
	{
		160,
		205,
		103,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual byte readByte()
	{
		int num = (int)this.readChar();
		return (byte)((sbyte)(num & 255));
	}
	[LineNumberTable(new byte[]
	{
		160,
		215,
		105,
		174,
		104,
		103,
		103,
		98,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		BinaryIn binaryIn = new BinaryIn(strarr[0]);
		BinaryOut.__<clinit>();
		BinaryOut binaryOut = new BinaryOut(strarr[1]);
		while (!binaryIn.IsEmpty)
		{
			int ch = (int)binaryIn.readChar();
			binaryOut.write((char)ch);
		}
		binaryOut.flush();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.net;
using System;
using System.Runtime.CompilerServices;
public sealed class BinaryOut : java.lang.Object
{
	private BufferedOutputStream @out;
	private int buffer;
	private int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		14,
		136,
		103,
		158,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryOut(string str)
	{
		IOException ex;
		try
		{
			FileOutputStream fileOutputStream = new FileOutputStream(str);
			this.@out = new BufferedOutputStream(fileOutputStream);
		}
		catch (IOException arg_20_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_20_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_2A;
		}
		return;
		IL_2A:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		83,
		130,
		127,
		18,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(char ch)
	{
		if (ch < '\0' || ch >= 'Ā')
		{
			string arg_2D_0 = new StringBuilder().append("Illegal 8-bit char = ").append(ch).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		this.writeByte((int)ch);
	}
	[LineNumberTable(new byte[]
	{
		82,
		102,
		125,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void flush()
	{
		this.clearBuffer();
		IOException ex;
		try
		{
			this.@out.flush();
		}
		catch (IOException arg_16_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_16_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_20;
		}
		return;
		IL_20:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		69,
		105,
		127,
		2,
		127,
		4,
		105,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void clearBuffer()
	{
		if (this.N == 0)
		{
			return;
		}
		if (this.N > 0)
		{
			this.buffer <<= 8 - this.N;
		}
		IOException ex;
		try
		{
			this.@out.write(this.buffer);
		}
		catch (IOException arg_40_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_40_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_4A;
		}
		goto IL_56;
		IL_4A:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
		IL_56:
		this.N = 0;
		this.buffer = 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		120,
		98,
		110,
		177,
		110,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void writeBit(bool flag)
	{
		this.buffer <<= 1;
		if (flag)
		{
			this.buffer |= 1;
		}
		this.N++;
		if (this.N == 8)
		{
			this.clearBuffer();
		}
	}
	[LineNumberTable(new byte[]
	{
		51,
		190,
		104,
		126,
		105,
		193,
		102,
		112,
		7,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void writeByte(int num)
	{
		if (!BinaryOut.$assertionsDisabled && (num < 0 || num >= 256))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (this.N == 0)
		{
			IOException ex;
			try
			{
				this.@out.write(num);
			}
			catch (IOException arg_37_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_37_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_41;
			}
			return;
			IL_41:
			IOException this2 = ex;
			Throwable.instancehelper_printStackTrace(this2);
			return;
		}
		for (int i = 0; i < 8; i++)
		{
			int num2 = (((uint)num >> 8 - i - 1 & 1u) == 1u) ? 1 : 0;
			this.writeBit(num2 != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		118,
		112,
		112,
		111,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(int i)
	{
		this.writeByte((int)((uint)i >> 24 & 255u));
		this.writeByte((int)((uint)i >> 16 & 255u));
		this.writeByte((int)((uint)i >> 8 & 255u));
		this.writeByte((int)((uint)i >> 0 & 255u));
	}
	[LineNumberTable(new byte[]
	{
		160,
		91,
		114,
		114,
		114,
		114,
		114,
		114,
		113,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(long l)
	{
		this.writeByte((int)((ulong)l >> 56 & (ulong)255));
		this.writeByte((int)((ulong)l >> 48 & (ulong)255));
		this.writeByte((int)((ulong)l >> 40 & (ulong)255));
		this.writeByte((int)((ulong)l >> 32 & (ulong)255));
		this.writeByte((int)((ulong)l >> 24 & (ulong)255));
		this.writeByte((int)((ulong)l >> 16 & (ulong)255));
		this.writeByte((int)((ulong)l >> 8 & (ulong)255));
		this.writeByte((int)((ulong)l >> 0 & (ulong)255));
	}
	[LineNumberTable(new byte[]
	{
		159,
		80,
		130,
		110,
		127,
		15,
		127,
		35,
		102,
		112,
		7,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(char ch, int i)
	{
		if (i == 8)
		{
			this.write(ch);
			return;
		}
		if (i < 1 || i > 16)
		{
			string arg_38_0 = new StringBuilder().append("Illegal value for r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_38_0);
		}
		if (ch < '\0' || (int)ch >= 1 << i)
		{
			string arg_7A_0 = new StringBuilder().append("Illegal ").append(i).append("-bit char = ").append(ch).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_7A_0);
		}
		for (int j = 0; j < i; j++)
		{
			int num = ((ch >> (i - j - 1 & 31) & '\u0001') == '\u0001') ? 1 : 0;
			this.writeBit(num != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		0,
		104,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryOut(OutputStream os)
	{
		this.@out = new BufferedOutputStream(os);
	}
	[LineNumberTable(new byte[]
	{
		7,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryOut()
	{
		this.@out = new BufferedOutputStream(System.@out);
	}
	[LineNumberTable(new byte[]
	{
		25,
		136,
		103,
		158,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinaryOut(Socket s)
	{
		IOException ex;
		try
		{
			OutputStream outputStream = s.getOutputStream();
			this.@out = new BufferedOutputStream(outputStream);
		}
		catch (IOException arg_20_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_20_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_2A;
		}
		return;
		IL_2A:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		91,
		102,
		125,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void close()
	{
		this.flush();
		IOException ex;
		try
		{
			this.@out.close();
		}
		catch (IOException arg_16_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_16_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_20;
		}
		return;
		IL_20:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		104,
		66,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(bool b)
	{
		this.writeBit(b);
	}
	[LineNumberTable(new byte[]
	{
		159,
		102,
		67,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(byte b)
	{
		int num = (int)((sbyte)b);
		this.writeByte(num & 255);
	}
	[LineNumberTable(new byte[]
	{
		160,
		68,
		111,
		127,
		15,
		127,
		35,
		102,
		112,
		7,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(int i1, int i2)
	{
		if (i2 == 32)
		{
			this.write(i1);
			return;
		}
		if (i2 < 1 || i2 > 32)
		{
			string arg_37_0 = new StringBuilder().append("Illegal value for r = ").append(i2).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_37_0);
		}
		if (i1 < 0 || i1 >= 1 << i2)
		{
			string arg_79_0 = new StringBuilder().append("Illegal ").append(i2).append("-bit char = ").append(i1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_79_0);
		}
		for (int j = 0; j < i2; j++)
		{
			int num = (((uint)i1 >> i2 - j - 1 & 1u) == 1u) ? 1 : 0;
			this.writeBit(num != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		83,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(double d)
	{
		DoubleConverter doubleConverter;
		this.write(DoubleConverter.ToLong(d, ref doubleConverter));
	}
	[LineNumberTable(new byte[]
	{
		160,
		106,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(float f)
	{
		FloatConverter floatConverter;
		this.write(FloatConverter.ToInt(f, ref floatConverter));
	}
	[LineNumberTable(new byte[]
	{
		159,
		85,
		66,
		111,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(short s)
	{
		this.writeByte((int)((uint)s >> 8 & 255u));
		this.writeByte((int)((uint)s >> 0 & 255u));
	}
	[LineNumberTable(new byte[]
	{
		160,
		152,
		107,
		45,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(string str)
	{
		for (int i = 0; i < java.lang.String.instancehelper_length(str); i++)
		{
			this.write(java.lang.String.instancehelper_charAt(str, i));
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		166,
		107,
		46,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void write(string str, int i)
	{
		for (int j = 0; j < java.lang.String.instancehelper_length(str); j++)
		{
			this.write(java.lang.String.instancehelper_charAt(str, j), i);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		178,
		100,
		103,
		166,
		104,
		103,
		103,
		98,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		BinaryOut binaryOut = new BinaryOut(str);
		BinaryIn binaryIn = new BinaryIn();
		while (!binaryIn.IsEmpty)
		{
			int ch = (int)binaryIn.readChar();
			binaryOut.write((char)ch);
		}
		binaryOut.flush();
	}
	[LineNumberTable(40)]
	static BinaryOut()
	{
		BinaryOut.$assertionsDisabled = !ClassLiteral<BinaryOut>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BinarySearch : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		3,
		98,
		101,
		132,
		104,
		108,
		108,
		98,
		98
	})]
	public static int rank(int i, int[] iarr)
	{
		int j = 0;
		int num = iarr.Length - 1;
		while (j <= num)
		{
			int num2 = j + (num - j) / 2;
			if (i < iarr[num2])
			{
				num = num2 - 1;
			}
			else
			{
				if (i <= iarr[num2])
				{
					return num2;
				}
				j = num2 + 1;
			}
		}
		return -1;
	}
	[LineNumberTable(44)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BinarySearch()
	{
	}
	[LineNumberTable(new byte[]
	{
		23,
		110,
		167,
		166,
		103,
		102,
		106,
		102,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int[] array = @in.readAllInts();
		Arrays.sort(array);
		while (!StdIn.IsEmpty)
		{
			int i = StdIn.readInt();
			if (BinarySearch.rank(i, array) == -1)
			{
				StdOut.println(i);
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key::Ljava/lang/Comparable<TKey;>;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class BinarySearchST : java.lang.Object
{
	private const int INIT_CAPACITY = 2;
	[Signature("[TKey;")]
	private IComparable[] keys;
	[Signature("[TValue;")]
	private object[] vals;
	private int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		180,
		232,
		58,
		231,
		71,
		113,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinarySearchST(int i)
	{
		this.N = 0;
		this.keys = (IComparable[])new IComparable[i];
		this.vals = (object[])new object[i];
	}
	[LineNumberTable(new byte[]
	{
		24,
		106,
		104,
		127,
		3
	}), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(IComparable c)
	{
		if (IsEmpty)
		{
			return null;
		}
		int num = this.rank(c);
		if (num < this.N && Comparable.__Helper.compareTo(this.keys[num], c) == 0)
		{
			return this.vals[num];
		}
		return null;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(69)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		32,
		107,
		100,
		104,
		111,
		106,
		106,
		98,
		98
	}), Signature("(TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int rank(IComparable c)
	{
		int i = 0;
		int num = this.N - 1;
		while (i <= num)
		{
			int num2 = i + (num - i) / 2;
			int num3 = Comparable.__Helper.compareTo(c, this.keys[num2]);
			if (num3 < 0)
			{
				num = num2 - 1;
			}
			else
			{
				if (num3 <= 0)
				{
					return num2;
				}
				i = num2 + 1;
			}
		}
		return i;
	}
	[LineNumberTable(new byte[]
	{
		73,
		169,
		168,
		121,
		161,
		109,
		114,
		18,
		230,
		69,
		110,
		110,
		174,
		159,
		10,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(IComparable c)
	{
		if (IsEmpty)
		{
			return;
		}
		int num = this.rank(c);
		if (num == this.N || Comparable.__Helper.compareTo(this.keys[num], c) != 0)
		{
			return;
		}
		for (int i = num; i < this.N - 1; i++)
		{
			this.keys[i] = this.keys[i + 1];
			this.vals[i] = this.vals[i + 1];
		}
		this.N--;
		this.keys[this.N] = null;
		this.vals[this.N] = null;
		if (this.N > 0 && this.N == this.keys.Length / 4)
		{
			this.resize(this.keys.Length / 2);
		}
		if (!BinarySearchST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		187,
		123,
		108,
		108,
		107,
		107,
		11,
		198,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!BinarySearchST.$assertionsDisabled && num < this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		IComparable[] array = (IComparable[])new IComparable[num];
		object[] array2 = (object[])new object[num];
		for (int i = 0; i < this.N; i++)
		{
			array[i] = this.keys[i];
			array2[i] = this.vals[i];
		}
		this.vals = array2;
		this.keys = array;
	}
	[LineNumberTable(220)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		return this.isSorted() && this.rankCheck();
	}
	[LineNumberTable(new byte[]
	{
		115,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable min()
	{
		if (IsEmpty)
		{
			return null;
		}
		return this.keys[0];
	}
	[LineNumberTable(new byte[]
	{
		120,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable max()
	{
		if (IsEmpty)
		{
			return null;
		}
		return this.keys[this.N - 1];
	}
	[LineNumberTable(59), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(IComparable c)
	{
		return this.get(c) != null;
	}
	[LineNumberTable(new byte[]
	{
		160,
		89,
		102,
		104,
		115,
		115,
		108,
		114,
		46,
		134,
		125
	}), Signature("(TKey;TKey;)Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys(IComparable c1, IComparable c2)
	{
		global::Queue queue = new global::Queue();
		if (c1 == null && c2 == null)
		{
			return queue;
		}
		if (c1 == null)
		{
			string arg_1B_0 = "lo is null in keys()";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_1B_0);
		}
		if (c2 == null)
		{
			string arg_2E_0 = "hi is null in keys()";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_2E_0);
		}
		if (Comparable.__Helper.compareTo(c1, c2) > 0)
		{
			return queue;
		}
		for (int i = this.rank(c1); i < this.rank(c2); i++)
		{
			queue.enqueue(this.keys[i]);
		}
		if (this.contains(c2))
		{
			queue.enqueue(this.keys[this.rank(c2)]);
		}
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		160,
		111,
		107,
		60,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isSorted()
	{
		for (int i = 1; i < this.size(); i++)
		{
			if (Comparable.__Helper.compareTo(this.keys[i], this.keys[i - 1]) < 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		118,
		107,
		50,
		134,
		107,
		63,
		6,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool rankCheck()
	{
		for (int i = 0; i < this.size(); i++)
		{
			if (i != this.rank(this.select(i)))
			{
				return false;
			}
		}
		for (int i = 0; i < this.size(); i++)
		{
			if (Comparable.__Helper.compareTo(this.keys[i], this.select(this.rank(this.keys[i]))) != 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		125,
		111
	}), Signature("(I)TKey;")]
	public virtual IComparable select(int i)
	{
		if (i < 0 || i >= this.N)
		{
			return null;
		}
		return this.keys[i];
	}
	[LineNumberTable(35)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BinarySearchST() : this(2)
	{
	}
	[LineNumberTable(new byte[]
	{
		46,
		141,
		168,
		121,
		105,
		193,
		158,
		107,
		114,
		18,
		198,
		105,
		105,
		142,
		122
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(IComparable c, object obj)
	{
		if (obj == null)
		{
			this.delete(c);
			return;
		}
		int num = this.rank(c);
		if (num < this.N && Comparable.__Helper.compareTo(this.keys[num], c) == 0)
		{
			this.vals[num] = obj;
			return;
		}
		if (this.N == this.keys.Length)
		{
			this.resize(2 * this.keys.Length);
		}
		for (int i = this.N; i > num; i += -1)
		{
			this.keys[i] = this.keys[i - 1];
			this.vals[i] = this.vals[i - 1];
		}
		this.keys[num] = c;
		this.vals[num] = obj;
		this.N++;
		if (!BinarySearchST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(199), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		return this.keys(this.min(), this.max());
	}
	[LineNumberTable(new byte[]
	{
		100,
		120,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMin()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Symbol table underflow error";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		this.delete(this.min());
	}
	[LineNumberTable(new byte[]
	{
		106,
		120,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMax()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Symbol table underflow error";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		this.delete(this.max());
	}
	[LineNumberTable(new byte[]
	{
		160,
		66,
		104,
		127,
		3,
		101
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable floor(IComparable c)
	{
		int num = this.rank(c);
		if (num < this.N && Comparable.__Helper.compareTo(c, this.keys[num]) == 0)
		{
			return this.keys[num];
		}
		if (num == 0)
		{
			return null;
		}
		return this.keys[num - 1];
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		104,
		107
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable ceiling(IComparable c)
	{
		int num = this.rank(c);
		if (num == this.N)
		{
			return null;
		}
		return this.keys[num];
	}
	[LineNumberTable(new byte[]
	{
		160,
		79,
		108,
		123
	}), Signature("(TKey;TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int size(IComparable c1, IComparable c2)
	{
		if (Comparable.__Helper.compareTo(c1, c2) > 0)
		{
			return 0;
		}
		if (this.contains(c2))
		{
			return this.rank(c2) - this.rank(c1) + 1;
		}
		return this.rank(c2) - this.rank(c1);
	}
	[LineNumberTable(new byte[]
	{
		160,
		130,
		102,
		105,
		102,
		13,
		198,
		127,
		1,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		BinarySearchST binarySearchST = new BinarySearchST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			binarySearchST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = binarySearchST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(binarySearchST.get(text)).toString());
		}
	}
	[LineNumberTable(28)]
	static BinarySearchST()
	{
		BinarySearchST.$assertionsDisabled = !ClassLiteral<BinarySearchST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.io;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public sealed class BinaryStdIn : java.lang.Object
{
	private static BufferedInputStream @in;
	private const int EOF = -1;
	private static int buffer;
	private static int N;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	public static bool IsEmpty
	{
		return BinaryStdIn.buffer == -1;
	}
	[LineNumberTable(new byte[]
	{
		29,
		119,
		108,
		116,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool readBoolean()
	{
		if (BinaryStdIn.IsEmpty)
		{
			string arg_11_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_11_0);
		}
		BinaryStdIn.N--;
		int result = ((BinaryStdIn.buffer >> BinaryStdIn.N & 1) == 1) ? 1 : 0;
		if (BinaryStdIn.N == 0)
		{
			BinaryStdIn.fillBuffer();
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		95,
		151,
		102,
		103,
		102,
		104,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string readString()
	{
		if (BinaryStdIn.IsEmpty)
		{
			string arg_11_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_11_0);
		}
		StringBuilder stringBuilder = new StringBuilder();
		while (!BinaryStdIn.IsEmpty)
		{
			int c = (int)BinaryStdIn.readChar();
			stringBuilder.append((char)c);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		127,
		98,
		102,
		102,
		100,
		228,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int readInt()
	{
		int num = 0;
		for (int i = 0; i < 4; i++)
		{
			int num2 = (int)BinaryStdIn.readChar();
			num <<= 8;
			num |= num2;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		74,
		191,
		15,
		140,
		98,
		102,
		101,
		102,
		232,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static char readChar(int i)
	{
		if (i < 1 || i > 16)
		{
			string arg_28_0 = new StringBuilder().append("Illegal value of r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_28_0);
		}
		if (i == 8)
		{
			return BinaryStdIn.readChar();
		}
		int num = 0;
		for (int j = 0; j < i; j++)
		{
			num = (int)((ushort)(num << 1));
			int num2 = BinaryStdIn.readBoolean() ? 1 : 0;
			if (num2 != 0)
			{
				num = (int)((ushort)(num | 1));
			}
		}
		return (char)num;
	}
	[LineNumberTable(new byte[]
	{
		44,
		183,
		104,
		102,
		101,
		201,
		102,
		109,
		102,
		101,
		119,
		102,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static char readChar()
	{
		if (BinaryStdIn.IsEmpty)
		{
			string arg_11_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_11_0);
		}
		int num;
		if (BinaryStdIn.N == 8)
		{
			num = BinaryStdIn.buffer;
			BinaryStdIn.fillBuffer();
			return (char)(num & 255);
		}
		num = BinaryStdIn.buffer;
		num <<= 8 - BinaryStdIn.N;
		int n = BinaryStdIn.N;
		BinaryStdIn.fillBuffer();
		if (BinaryStdIn.IsEmpty)
		{
			string arg_62_0 = "Reading from empty input stream";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_62_0);
		}
		BinaryStdIn.N = n;
		num |= (int)((uint)BinaryStdIn.buffer >> BinaryStdIn.N);
		return (char)(num & 255);
	}
	[LineNumberTable(new byte[]
	{
		160,
		80,
		191,
		15,
		141,
		98,
		102,
		100,
		102,
		231,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int readInt(int i)
	{
		if (i < 1 || i > 32)
		{
			string arg_28_0 = new StringBuilder().append("Illegal value of r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_28_0);
		}
		if (i == 32)
		{
			return BinaryStdIn.readInt();
		}
		int num = 0;
		for (int j = 0; j < i; j++)
		{
			num <<= 1;
			int num2 = BinaryStdIn.readBoolean() ? 1 : 0;
			if (num2 != 0)
			{
				num |= 1;
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		127,
		1,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void fillBuffer()
	{
		try
		{
			BinaryStdIn.buffer = BinaryStdIn.@in.read();
			BinaryStdIn.N = 8;
		}
		catch (IOException arg_19_0)
		{
			goto IL_1D;
		}
		return;
		IL_1D:
		System.@out.println("EOF");
		BinaryStdIn.buffer = -1;
		BinaryStdIn.N = -1;
	}
	[LineNumberTable(new byte[]
	{
		160,
		100,
		99,
		102,
		102,
		100,
		229,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static long readLong()
	{
		long num = 0L;
		for (int i = 0; i < 8; i++)
		{
			int num2 = (int)BinaryStdIn.readChar();
			num <<= 8;
			num |= (long)num2;
		}
		return num;
	}
	[LineNumberTable(45)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BinaryStdIn()
	{
	}
	[LineNumberTable(new byte[]
	{
		7,
		252,
		69,
		226,
		61,
		97,
		102,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void close()
	{
		IOException ex;
		try
		{
			BinaryStdIn.@in.close();
		}
		catch (IOException arg_0F_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_0F_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_19;
		}
		return;
		IL_19:
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		string arg_2F_0 = "Could not close BinaryStdIn";
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_2F_0);
	}
	[LineNumberTable(new byte[]
	{
		112,
		98,
		102,
		102,
		101,
		229,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static short readShort()
	{
		int num = 0;
		for (int i = 0; i < 2; i++)
		{
			int num2 = (int)BinaryStdIn.readChar();
			num = (int)((short)(num << 8));
			num = (int)((short)(num | num2));
		}
		return (short)num;
	}
	[LineNumberTable(230)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double readDouble()
	{
		DoubleConverter doubleConverter;
		return DoubleConverter.ToDouble(BinaryStdIn.readLong(), ref doubleConverter);
	}
	[LineNumberTable(239)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static float readFloat()
	{
		FloatConverter floatConverter;
		return FloatConverter.ToFloat(BinaryStdIn.readInt(), ref floatConverter);
	}
	[LineNumberTable(new byte[]
	{
		160,
		135,
		102,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static byte readByte()
	{
		int num = (int)BinaryStdIn.readChar();
		return (byte)((sbyte)(num & 255));
	}
	[LineNumberTable(new byte[]
	{
		160,
		147,
		103,
		102,
		102,
		98,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		while (!BinaryStdIn.IsEmpty)
		{
			int ch = (int)BinaryStdIn.readChar();
			BinaryStdOut.write((char)ch);
		}
		BinaryStdOut.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		244,
		71
	})]
	static BinaryStdIn()
	{
		BufferedInputStream.__<clinit>();
		BinaryStdIn.@in = new BufferedInputStream(System.@in);
		BinaryStdIn.fillBuffer();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.io;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public sealed class BinaryStdOut : java.lang.Object
{
	private static BufferedOutputStream @out;
	private static int buffer;
	private static int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		76,
		111,
		111,
		110,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(int i)
	{
		BinaryStdOut.writeByte((int)((uint)i >> 24 & 255u));
		BinaryStdOut.writeByte((int)((uint)i >> 16 & 255u));
		BinaryStdOut.writeByte((int)((uint)i >> 8 & 255u));
		BinaryStdOut.writeByte((int)((uint)i >> 0 & 255u));
	}
	[LineNumberTable(new byte[]
	{
		90,
		110,
		127,
		15,
		127,
		35,
		102,
		112,
		6,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(int i1, int i2)
	{
		if (i2 == 32)
		{
			BinaryStdOut.write(i1);
			return;
		}
		if (i2 < 1 || i2 > 32)
		{
			string arg_36_0 = new StringBuilder().append("Illegal value for r = ").append(i2).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_36_0);
		}
		if (i1 < 0 || i1 >= 1 << i2)
		{
			string arg_78_0 = new StringBuilder().append("Illegal ").append(i2).append("-bit char = ").append(i1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_78_0);
		}
		for (int j = 0; j < i2; j++)
		{
			int num = (((uint)i1 >> i2 - j - 1 & 1u) == 1u) ? 1 : 0;
			BinaryStdOut.writeBit(num != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		49,
		101,
		124,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void close()
	{
		BinaryStdOut.flush();
		IOException ex;
		try
		{
			BinaryStdOut.@out.close();
		}
		catch (IOException arg_14_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_14_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_1E;
		}
		return;
		IL_1E:
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
	}
	[LineNumberTable(new byte[]
	{
		159,
		90,
		162,
		109,
		127,
		15,
		127,
		35,
		102,
		112,
		6,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(char ch, int i)
	{
		if (i == 8)
		{
			BinaryStdOut.write(ch);
			return;
		}
		if (i < 1 || i > 16)
		{
			string arg_37_0 = new StringBuilder().append("Illegal value for r = ").append(i).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_37_0);
		}
		if (ch < '\0' || (int)ch >= 1 << i)
		{
			string arg_79_0 = new StringBuilder().append("Illegal ").append(i).append("-bit char = ").append(ch).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_79_0);
		}
		for (int j = 0; j < i; j++)
		{
			int num = ((ch >> (i - j - 1 & 31) & '\u0001') == '\u0001') ? 1 : 0;
			BinaryStdOut.writeBit(num != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		115,
		130,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(bool b)
	{
		BinaryStdOut.writeBit(b);
	}
	[LineNumberTable(new byte[]
	{
		160,
		113,
		107,
		44,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(string str)
	{
		for (int i = 0; i < java.lang.String.instancehelper_length(str); i++)
		{
			BinaryStdOut.write(java.lang.String.instancehelper_charAt(str, i));
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		93,
		162,
		127,
		18,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(char ch)
	{
		if (ch < '\0' || ch >= 'Ā')
		{
			string arg_2D_0 = new StringBuilder().append("Illegal 8-bit char = ").append(ch).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		BinaryStdOut.writeByte((int)ch);
	}
	[LineNumberTable(new byte[]
	{
		39,
		101,
		124,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void flush()
	{
		BinaryStdOut.clearBuffer();
		IOException ex;
		try
		{
			BinaryStdOut.@out.flush();
		}
		catch (IOException arg_14_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_14_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_1E;
		}
		return;
		IL_1E:
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
	}
	[LineNumberTable(new byte[]
	{
		26,
		104,
		125,
		127,
		2,
		105,
		102,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void clearBuffer()
	{
		if (BinaryStdOut.N == 0)
		{
			return;
		}
		if (BinaryStdOut.N > 0)
		{
			BinaryStdOut.buffer <<= 8 - BinaryStdOut.N;
		}
		IOException ex;
		try
		{
			BinaryStdOut.@out.write(BinaryStdOut.buffer);
		}
		catch (IOException arg_39_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_39_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_43;
		}
		goto IL_4F;
		IL_43:
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		IL_4F:
		BinaryStdOut.N = 0;
		BinaryStdOut.buffer = 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		131,
		130,
		108,
		175,
		108,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void writeBit(bool flag)
	{
		BinaryStdOut.buffer <<= 1;
		if (flag)
		{
			BinaryStdOut.buffer |= 1;
		}
		BinaryStdOut.N++;
		if (BinaryStdOut.N == 8)
		{
			BinaryStdOut.clearBuffer();
		}
	}
	[LineNumberTable(new byte[]
	{
		8,
		190,
		103,
		125,
		105,
		193,
		102,
		112,
		6,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void writeByte(int num)
	{
		if (!BinaryStdOut.$assertionsDisabled && (num < 0 || num >= 256))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (BinaryStdOut.N == 0)
		{
			IOException ex;
			try
			{
				BinaryStdOut.@out.write(num);
			}
			catch (IOException arg_35_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_35_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_3F;
			}
			return;
			IL_3F:
			IOException @this = ex;
			Throwable.instancehelper_printStackTrace(@this);
			return;
		}
		for (int i = 0; i < 8; i++)
		{
			int num2 = (((uint)num >> 8 - i - 1 & 1u) == 1u) ? 1 : 0;
			BinaryStdOut.writeBit(num2 != 0);
		}
	}
	[LineNumberTable(new byte[]
	{
		116,
		113,
		113,
		113,
		113,
		113,
		113,
		112,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(long l)
	{
		BinaryStdOut.writeByte((int)((ulong)l >> 56 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 48 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 40 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 32 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 24 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 16 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 8 & (ulong)255));
		BinaryStdOut.writeByte((int)((ulong)l >> 0 & (ulong)255));
	}
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BinaryStdOut()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		113,
		131,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(byte b)
	{
		int num = (int)((sbyte)b);
		BinaryStdOut.writeByte(num & 255);
	}
	[LineNumberTable(new byte[]
	{
		108,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(double d)
	{
		DoubleConverter doubleConverter;
		BinaryStdOut.write(DoubleConverter.ToLong(d, ref doubleConverter));
	}
	[LineNumberTable(new byte[]
	{
		160,
		67,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(float f)
	{
		FloatConverter floatConverter;
		BinaryStdOut.write(FloatConverter.ToInt(f, ref floatConverter));
	}
	[LineNumberTable(new byte[]
	{
		159,
		95,
		98,
		110,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(short s)
	{
		BinaryStdOut.writeByte((int)((uint)s >> 8 & 255u));
		BinaryStdOut.writeByte((int)((uint)s >> 0 & 255u));
	}
	[LineNumberTable(new byte[]
	{
		160,
		126,
		107,
		45,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void write(string str, int i)
	{
		for (int j = 0; j < java.lang.String.instancehelper_length(str); j++)
		{
			BinaryStdOut.write(java.lang.String.instancehelper_charAt(str, j), i);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		134,
		137,
		102,
		38,
		166,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		for (int i = 0; i < num; i++)
		{
			BinaryStdOut.write(i);
		}
		BinaryStdOut.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		174,
		117
	})]
	static BinaryStdOut()
	{
		BinaryStdOut.$assertionsDisabled = !ClassLiteral<BinaryStdOut>.Value.desiredAssertionStatus();
		BinaryStdOut.@out = new BufferedOutputStream(System.@out);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Bipartite : java.lang.Object
{
	private bool isBipartite;
	private bool[] color;
	private bool[] marked;
	private int[] edgeTo;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack cycle;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		12,
		105,
		191,
		10,
		169,
		106,
		105,
		118,
		205,
		114,
		103,
		107,
		113,
		102,
		49,
		171,
		182
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Graph graph, int num)
	{
		this.marked[num] = true;
		Iterator iterator = graph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (this.cycle != null)
			{
				return;
			}
			if (!this.marked[num2])
			{
				this.edgeTo[num2] = num;
				this.color[num2] = (this.color[num] ? false : true);
				this.dfs(graph, num2);
			}
			else if (this.color[num2] == this.color[num])
			{
				this.isBipartite = false;
				this.cycle = new global::Stack();
				this.cycle.push(Integer.valueOf(num2));
				for (int num3 = num; num3 != num2; num3 = this.edgeTo[num3])
				{
					this.cycle.push(Integer.valueOf(num3));
				}
				this.cycle.push(Integer.valueOf(num2));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		72,
		107,
		110,
		127,
		10,
		114,
		127,
		27,
		231,
		60,
		238,
		77,
		100,
		127,
		10,
		103,
		133,
		100,
		127,
		9,
		194
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Graph graph)
	{
		if (this.isBipartite)
		{
			for (int i = 0; i < graph.V(); i++)
			{
				Iterator iterator = graph.adj(i).iterator();
				while (iterator.MoveNext())
				{
					int num = ((Integer)iterator.Current).intValue();
					if (this.color[i] == this.color[num])
					{
						System.err.printf("edge %d-%d with %d and %d in same side of bipartition\n", new object[]
						{
							Integer.valueOf(i),
							Integer.valueOf(num),
							Integer.valueOf(i),
							Integer.valueOf(num)
						});
						return false;
					}
				}
			}
		}
		else
		{
			int i = -1;
			int num2 = -1;
			Iterator iterator2 = this.oddCycle().iterator();
			while (iterator2.hasNext())
			{
				int num3 = ((Integer)iterator2.next()).intValue();
				if (i == -1)
				{
					i = num3;
				}
				num2 = num3;
			}
			if (i != num2)
			{
				System.err.printf("cycle begins with %d and ends with %d\n", new object[]
				{
					Integer.valueOf(i),
					Integer.valueOf(num2)
				});
				return false;
			}
		}
		return true;
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable oddCycle()
	{
		return this.cycle;
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		104,
		103,
		113,
		113,
		145,
		107,
		106,
		8,
		230,
		69,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Bipartite(Graph g)
	{
		this.isBipartite = true;
		this.color = new bool[g.V()];
		this.marked = new bool[g.V()];
		this.edgeTo = new int[g.V()];
		for (int i = 0; i < g.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(g, i);
			}
		}
		if (!Bipartite.$assertionsDisabled && !this.check(g))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual bool isBipartite()
	{
		return this.isBipartite;
	}
	[LineNumberTable(new byte[]
	{
		55,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool color(int i)
	{
		if (!this.isBipartite)
		{
			string arg_12_0 = "Graph is not bipartite";
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException(arg_12_0);
		}
		return this.color[i];
	}
	[LineNumberTable(new byte[]
	{
		105,
		105,
		105,
		137,
		103,
		104,
		119,
		103,
		104,
		106,
		106,
		244,
		61,
		232,
		71,
		104,
		111,
		111,
		234,
		61,
		232,
		70,
		166,
		104,
		105,
		106,
		109,
		63,
		15,
		234,
		69,
		106,
		127,
		11,
		159,
		3,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		int num3 = Integer.parseInt(strarr[2]);
		Graph graph = new Graph(num);
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = i;
		}
		StdRandom.shuffle(array);
		for (int i = 0; i < num2; i++)
		{
			int j = StdRandom.uniform(num / 2);
			int num4 = StdRandom.uniform(num / 2);
			graph.addEdge(array[j], array[num / 2 + num4]);
		}
		for (int i = 0; i < num3; i++)
		{
			int j = ByteCodeHelper.d2i(java.lang.Math.random() * (double)num);
			int num4 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)num);
			graph.addEdge(j, num4);
		}
		StdOut.println(graph);
		Bipartite bipartite = new Bipartite(graph);
		if (bipartite.isBipartite())
		{
			StdOut.println("Graph is bipartite");
			for (int j = 0; j < graph.V(); j++)
			{
				StdOut.println(new StringBuilder().append(j).append(": ").append(bipartite.color(j)).toString());
			}
		}
		else
		{
			StdOut.print("Graph has an odd-length cycle: ");
			Iterator iterator = bipartite.oddCycle().iterator();
			while (iterator.MoveNext())
			{
				int num4 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(num4).append(" ").toString());
			}
			StdOut.println();
		}
	}
	[LineNumberTable(35)]
	static Bipartite()
	{
		Bipartite.$assertionsDisabled = !ClassLiteral<Bipartite>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BipartiteMatching : java.lang.Object
{
	[LineNumberTable(18)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BipartiteMatching()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		167,
		105,
		105,
		106,
		108,
		104,
		104,
		106,
		121,
		255,
		8,
		60,
		235,
		70,
		104,
		116,
		22,
		232,
		71,
		107,
		101,
		127,
		11,
		107,
		127,
		8,
		121,
		255,
		20,
		61,
		235,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		int i = 2 * num;
		int i2 = 2 * num + 1;
		FlowNetwork flowNetwork = new FlowNetwork(2 * num + 2);
		for (int j = 0; j < num2; j++)
		{
			int k = StdRandom.uniform(num);
			int num3 = StdRandom.uniform(num) + num;
			flowNetwork.addEdge(new FlowEdge(k, num3, double.PositiveInfinity));
			StdOut.println(new StringBuilder().append(k).append("-").append(num3).toString());
		}
		for (int j = 0; j < num; j++)
		{
			flowNetwork.addEdge(new FlowEdge(i, j, (double)1f));
			flowNetwork.addEdge(new FlowEdge(j + num, i2, (double)1f));
		}
		FordFulkerson fordFulkerson = new FordFulkerson(flowNetwork, i, i2);
		StdOut.println();
		StdOut.println(new StringBuilder().append("Size of maximum matching = ").append(ByteCodeHelper.d2i(fordFulkerson.value())).toString());
		for (int k = 0; k < num; k++)
		{
			Iterator iterator = flowNetwork.adj(k).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (flowEdge.from() == k && flowEdge.flow() > (double)0f)
				{
					StdOut.println(new StringBuilder().append(flowEdge.from()).append("-").append(flowEdge.to()).toString());
				}
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class BlackFilter : java.lang.Object
{
	[LineNumberTable(31)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BlackFilter()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		166,
		110,
		104,
		103,
		103,
		162,
		103,
		102,
		105,
		102,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SET sET = new SET();
		In.__<clinit>();
		In @in = new In(strarr[0]);
		while (!@in.IsEmpty)
		{
			string text = @in.readString();
			sET.add(text);
		}
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!sET.contains(text))
			{
				StdOut.println(text);
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BoruvkaMST : java.lang.Object
{
	[Signature("LBag<LEdge;>;")]
	private Bag mst;
	private double weight;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(114)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(Edge edge, Edge edge2)
	{
		return edge.weight() < edge2.weight();
	}
	[LineNumberTable(new byte[]
	{
		71,
		102,
		127,
		1,
		140,
		106,
		112,
		127,
		14,
		194,
		109,
		127,
		5,
		116,
		109,
		111,
		130,
		107,
		162,
		127,
		5,
		116,
		109,
		111,
		130,
		162,
		191,
		8,
		109,
		127,
		5,
		116,
		113,
		162,
		127,
		8,
		116,
		109,
		112,
		127,
		16,
		162,
		202
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedGraph edgeWeightedGraph)
	{
		double num = (double)0f;
		Iterator iterator = this.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			num += edge.weight();
		}
		double num2 = 1E-12;
		if (java.lang.Math.abs(num - this.weight()) > num2)
		{
			System.err.printf("Weight of edges does not equal weight(): %f vs. %f\n", new object[]
			{
				java.lang.Double.valueOf(num),
				java.lang.Double.valueOf(this.weight())
			});
			return false;
		}
		UF uF = new UF(edgeWeightedGraph.V());
		Iterator iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (uF.connected(num3, i))
			{
				System.err.println("Not a forest");
				return false;
			}
			uF.union(num3, i);
		}
		iterator2 = edgeWeightedGraph.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (!uF.connected(num3, i))
			{
				System.err.println("Not a spanning forest");
				return false;
			}
		}
		iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			uF = new UF(edgeWeightedGraph.V());
			Iterator iterator3 = this.mst.iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (edge3 != edge2)
				{
					uF.union(num4, i2);
				}
			}
			iterator3 = edgeWeightedGraph.edges().iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (!uF.connected(num4, i2) && edge3.weight() < edge2.weight())
				{
					System.err.println(new StringBuilder().append("Edge ").append(edge3).append(" violates cut optimality conditions").toString());
					return false;
				}
			}
		}
		return true;
	}
	[Signature("()Ljava/lang/Iterable<LEdge;>;")]
	public virtual Iterable edges()
	{
		return this.mst;
	}
	public virtual double weight()
	{
		return this.weight;
	}
	[LineNumberTable(new byte[]
	{
		8,
		232,
		57,
		235,
		72,
		172,
		223,
		7,
		108,
		127,
		8,
		116,
		116,
		104,
		121,
		121,
		165,
		112,
		102,
		100,
		148,
		108,
		109,
		117,
		234,
		56,
		235,
		50,
		233,
		93,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BoruvkaMST(EdgeWeightedGraph ewg)
	{
		this.mst = new Bag();
		UF uF = new UF(ewg.V());
		int num = 1;
		while (num < ewg.V() && this.mst.size() < ewg.V() - 1)
		{
			Edge[] array = new Edge[ewg.V()];
			Iterator iterator = ewg.edges().iterator();
			while (iterator.MoveNext())
			{
				Edge edge = (Edge)iterator.Current;
				int num2 = edge.either();
				int num3 = edge.other(num2);
				int num4 = uF.find(num2);
				int num5 = uF.find(num3);
				if (num4 != num5)
				{
					if (array[num4] == null || BoruvkaMST.less(edge, array[num4]))
					{
						array[num4] = edge;
					}
					if (array[num5] == null || BoruvkaMST.less(edge, array[num5]))
					{
						array[num5] = edge;
					}
				}
			}
			for (int i = 0; i < ewg.V(); i++)
			{
				Edge edge = array[i];
				if (edge != null)
				{
					int num2 = edge.either();
					int num3 = edge.other(num2);
					if (!uF.connected(num2, num3))
					{
						this.mst.add(edge);
						this.weight += edge.weight();
						uF.union(num2, num3);
					}
				}
			}
			num += num;
		}
		if (!BoruvkaMST.$assertionsDisabled && !this.check(ewg))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		67,
		110,
		103,
		103,
		127,
		2,
		137,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedGraph ewg = new EdgeWeightedGraph(i);
		BoruvkaMST boruvkaMST = new BoruvkaMST(ewg);
		Iterator iterator = boruvkaMST.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge obj = (Edge)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.printf("%.5f\n", new object[]
		{
			java.lang.Double.valueOf(boruvkaMST.weight())
		});
	}
	[LineNumberTable(50)]
	static BoruvkaMST()
	{
		BoruvkaMST.$assertionsDisabled = !ClassLiteral<BoruvkaMST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class BoyerMoore : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int R;
	private int[] right;
	private char[] pattern;
	private string pat;
	[LineNumberTable(new byte[]
	{
		159,
		182,
		104,
		107,
		167,
		113,
		107,
		41,
		134,
		107,
		47,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BoyerMoore(string str)
	{
		this.R = 256;
		this.pat = str;
		this.right = new int[this.R];
		for (int i = 0; i < this.R; i++)
		{
			this.right[i] = -1;
		}
		for (int i = 0; i < java.lang.String.instancehelper_length(str); i++)
		{
			this.right[(int)java.lang.String.instancehelper_charAt(str, i)] = i;
		}
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		103,
		109,
		103,
		43,
		198,
		108,
		102,
		41,
		134,
		103,
		43,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BoyerMoore(char[] charr, int i)
	{
		this.R = i;
		this.pattern = new char[charr.Length];
		for (int j = 0; j < charr.Length; j++)
		{
			this.pattern[j] = charr[j];
		}
		this.right = new int[i];
		for (int j = 0; j < i; j++)
		{
			this.right[j] = -1;
		}
		for (int j = 0; j < charr.Length; j++)
		{
			this.right[(int)charr[j]] = j;
		}
	}
	[LineNumberTable(new byte[]
	{
		19,
		108,
		135,
		107,
		98,
		106,
		121,
		123,
		226,
		61,
		232,
		70,
		229,
		56,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int search(string str)
	{
		int num = java.lang.String.instancehelper_length(this.pat);
		int num2 = java.lang.String.instancehelper_length(str);
		int num3;
		for (int i = 0; i <= num2 - num; i += num3)
		{
			num3 = 0;
			for (int j = num - 1; j >= 0; j += -1)
			{
				if (java.lang.String.instancehelper_charAt(this.pat, j) != java.lang.String.instancehelper_charAt(str, i + j))
				{
					num3 = java.lang.Math.max(1, j - this.right[(int)java.lang.String.instancehelper_charAt(str, i + j)]);
					break;
				}
			}
			if (num3 == 0)
			{
				return i;
			}
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		38,
		104,
		131,
		107,
		98,
		106,
		113,
		119,
		226,
		61,
		232,
		70,
		229,
		56,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int search(char[] charr)
	{
		int num = this.pattern.Length;
		int num2 = charr.Length;
		int num3;
		for (int i = 0; i <= num2 - num; i += num3)
		{
			num3 = 0;
			for (int j = num - 1; j >= 0; j += -1)
			{
				if (this.pattern[j] != charr[i + j])
				{
					num3 = java.lang.Math.max(1, j - this.right[(int)charr[i + j]]);
					break;
				}
			}
			if (num3 == 0)
			{
				return i;
			}
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		58,
		100,
		100,
		103,
		135,
		104,
		109,
		106,
		170,
		159,
		0,
		106,
		105,
		42,
		136,
		134,
		106,
		105,
		42,
		136,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = strarr[0];
		string text2 = strarr[1];
		char[] charr = java.lang.String.instancehelper_toCharArray(text);
		char[] charr2 = java.lang.String.instancehelper_toCharArray(text2);
		BoyerMoore boyerMoore = new BoyerMoore(text);
		BoyerMoore boyerMoore2 = new BoyerMoore(charr, 256);
		int num = boyerMoore.search(text2);
		int num2 = boyerMoore2.search(charr2);
		StdOut.println(new StringBuilder().append("text:    ").append(text2).toString());
		StdOut.print("pattern: ");
		for (int i = 0; i < num; i++)
		{
			StdOut.print(" ");
		}
		StdOut.println(text);
		StdOut.print("pattern: ");
		for (int i = 0; i < num2; i++)
		{
			StdOut.print(" ");
		}
		StdOut.println(text);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BreadthFirstDirectedPaths : java.lang.Object
{
	private const int INFINITY = 2147483647;
	private bool[] marked;
	private int[] edgeTo;
	private int[] distTo;
	[LineNumberTable(new byte[]
	{
		27,
		102,
		105,
		105,
		108,
		107,
		113,
		127,
		7,
		106,
		105,
		114,
		105,
		174,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void bfs(Digraph digraph, int num)
	{
		global::Queue queue = new global::Queue();
		this.marked[num] = true;
		this.distTo[num] = 0;
		queue.enqueue(Integer.valueOf(num));
		while (!queue.IsEmpty)
		{
			int num2 = ((Integer)queue.dequeue()).intValue();
			Iterator iterator = digraph.adj(num2).iterator();
			while (iterator.MoveNext())
			{
				int num3 = ((Integer)iterator.Current).intValue();
				if (!this.marked[num3])
				{
					this.edgeTo[num3] = num2;
					this.distTo[num3] = this.distTo[num2] + 1;
					this.marked[num3] = true;
					queue.enqueue(Integer.valueOf(num3));
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		46,
		102,
		127,
		1,
		105,
		105,
		142,
		107,
		113,
		127,
		11,
		107,
		106,
		115,
		106,
		175,
		101
	}), Signature("(LDigraph;Ljava/lang/Iterable<Ljava/lang/Integer;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void bfs(Digraph digraph, Iterable iterable)
	{
		global::Queue queue = new global::Queue();
		Iterator iterator = iterable.iterator();
		while (iterator.MoveNext())
		{
			int num = ((Integer)iterator.Current).intValue();
			this.marked[num] = true;
			this.distTo[num] = 0;
			queue.enqueue(Integer.valueOf(num));
		}
		while (!queue.IsEmpty)
		{
			int num2 = ((Integer)queue.dequeue()).intValue();
			Iterator iterator2 = digraph.adj(num2).iterator();
			while (iterator2.hasNext())
			{
				int num3 = ((Integer)iterator2.next()).intValue();
				if (!this.marked[num3])
				{
					this.edgeTo[num3] = num2;
					this.distTo[num3] = this.distTo[num2] + 1;
					this.marked[num3] = true;
					queue.enqueue(Integer.valueOf(num3));
				}
			}
		}
	}
	[LineNumberTable(121)]
	public virtual bool hasPathTo(int i)
	{
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		113,
		113,
		113,
		126,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BreadthFirstDirectedPaths(Digraph d, int i)
	{
		this.marked = new bool[d.V()];
		this.distTo = new int[d.V()];
		this.edgeTo = new int[d.V()];
		for (int j = 0; j < d.V(); j++)
		{
			this.distTo[j] = 2147483647;
		}
		this.bfs(d, i);
	}
	[LineNumberTable(131)]
	public virtual int distTo(int i)
	{
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		91,
		107,
		134,
		108,
		44,
		139,
		108
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		int num = i;
		while (this.distTo[num] != 0)
		{
			stack.push(Integer.valueOf(num));
			num = this.edgeTo[num];
		}
		stack.push(Integer.valueOf(num));
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		17,
		104,
		113,
		113,
		113,
		126,
		106
	}), Signature("(LDigraph;Ljava/lang/Iterable<Ljava/lang/Integer;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BreadthFirstDirectedPaths(Digraph d, Iterable i)
	{
		this.marked = new bool[d.V()];
		this.distTo = new int[d.V()];
		this.edgeTo = new int[d.V()];
		for (int j = 0; j < d.V(); j++)
		{
			this.distTo[j] = 2147483647;
		}
		this.bfs(d, i);
	}
	[LineNumberTable(new byte[]
	{
		104,
		110,
		167,
		105,
		136,
		112,
		109,
		127,
		20,
		127,
		12,
		110,
		159,
		3,
		199,
		255,
		4,
		53,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		int num = Integer.parseInt(strarr[1]);
		BreadthFirstDirectedPaths breadthFirstDirectedPaths = new BreadthFirstDirectedPaths(digraph, num);
		for (int j = 0; j < digraph.V(); j++)
		{
			if (breadthFirstDirectedPaths.hasPathTo(j))
			{
				StdOut.printf("%d to %d (%d):  ", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j),
					Integer.valueOf(breadthFirstDirectedPaths.distTo(j))
				});
				Iterator iterator = breadthFirstDirectedPaths.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					int num2 = ((Integer)iterator.Current).intValue();
					if (num2 == num)
					{
						StdOut.print(num2);
					}
					else
					{
						StdOut.print(new StringBuilder().append("->").append(num2).toString());
					}
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d (-):  not connected\n", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class BreadthFirstPaths : java.lang.Object
{
	private const int INFINITY = 2147483647;
	private bool[] marked;
	private int[] edgeTo;
	private int[] distTo;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		44,
		102,
		126,
		105,
		105,
		140,
		107,
		113,
		127,
		7,
		106,
		105,
		114,
		105,
		174,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void bfs(Graph graph, int num)
	{
		global::Queue queue = new global::Queue();
		for (int i = 0; i < graph.V(); i++)
		{
			this.distTo[i] = 2147483647;
		}
		this.distTo[num] = 0;
		this.marked[num] = true;
		queue.enqueue(Integer.valueOf(num));
		while (!queue.IsEmpty)
		{
			int i = ((Integer)queue.dequeue()).intValue();
			Iterator iterator = graph.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int num2 = ((Integer)iterator.Current).intValue();
				if (!this.marked[num2])
				{
					this.edgeTo[num2] = i;
					this.distTo[num2] = this.distTo[i] + 1;
					this.marked[num2] = true;
					queue.enqueue(Integer.valueOf(num2));
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		124,
		106,
		127,
		23,
		226,
		69,
		110,
		127,
		10,
		115,
		127,
		16,
		127,
		22,
		127,
		22,
		130,
		127,
		4,
		127,
		16,
		127,
		23,
		127,
		23,
		231,
		52,
		233,
		83,
		110,
		117,
		105,
		119,
		127,
		16,
		127,
		23,
		127,
		23,
		226,
		57,
		233,
		75
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Graph graph, int num)
	{
		if (this.distTo[num] != 0)
		{
			StdOut.println(new StringBuilder().append("distance of source ").append(num).append(" to itself = ").append(this.distTo[num]).toString());
			return false;
		}
		for (int i = 0; i < graph.V(); i++)
		{
			Iterator iterator = graph.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int num2 = ((Integer)iterator.Current).intValue();
				if (this.hasPathTo(i) != this.hasPathTo(num2))
				{
					StdOut.println(new StringBuilder().append("edge ").append(i).append("-").append(num2).toString());
					StdOut.println(new StringBuilder().append("hasPathTo(").append(i).append(") = ").append(this.hasPathTo(i)).toString());
					StdOut.println(new StringBuilder().append("hasPathTo(").append(num2).append(") = ").append(this.hasPathTo(num2)).toString());
					return false;
				}
				if (this.hasPathTo(i) && this.distTo[num2] > this.distTo[i] + 1)
				{
					StdOut.println(new StringBuilder().append("edge ").append(i).append("-").append(num2).toString());
					StdOut.println(new StringBuilder().append("distTo[").append(i).append("] = ").append(this.distTo[i]).toString());
					StdOut.println(new StringBuilder().append("distTo[").append(num2).append("] = ").append(this.distTo[num2]).toString());
					return false;
				}
			}
		}
		for (int i = 0; i < graph.V(); i++)
		{
			if (this.hasPathTo(i))
			{
				if (i != num)
				{
					int num3 = this.edgeTo[i];
					if (this.distTo[i] != this.distTo[num3] + 1)
					{
						StdOut.println(new StringBuilder().append("shortest path edge ").append(num3).append("-").append(i).toString());
						StdOut.println(new StringBuilder().append("distTo[").append(num3).append("] = ").append(this.distTo[num3]).toString());
						StdOut.println(new StringBuilder().append("distTo[").append(i).append("] = ").append(this.distTo[i]).toString());
						return false;
					}
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		65,
		102,
		127,
		1,
		105,
		105,
		142,
		107,
		113,
		127,
		11,
		107,
		106,
		115,
		106,
		175,
		101
	}), Signature("(LGraph;Ljava/lang/Iterable<Ljava/lang/Integer;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void bfs(Graph graph, Iterable iterable)
	{
		global::Queue queue = new global::Queue();
		Iterator iterator = iterable.iterator();
		while (iterator.MoveNext())
		{
			int num = ((Integer)iterator.Current).intValue();
			this.marked[num] = true;
			this.distTo[num] = 0;
			queue.enqueue(Integer.valueOf(num));
		}
		while (!queue.IsEmpty)
		{
			int num2 = ((Integer)queue.dequeue()).intValue();
			Iterator iterator2 = graph.adj(num2).iterator();
			while (iterator2.hasNext())
			{
				int num3 = ((Integer)iterator2.next()).intValue();
				if (!this.marked[num3])
				{
					this.edgeTo[num3] = num2;
					this.distTo[num3] = this.distTo[num2] + 1;
					this.marked[num3] = true;
					queue.enqueue(Integer.valueOf(num3));
				}
			}
		}
	}
	[LineNumberTable(140)]
	public virtual bool hasPathTo(int i)
	{
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		18,
		104,
		113,
		113,
		113,
		136,
		124
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BreadthFirstPaths(Graph g, int i)
	{
		this.marked = new bool[g.V()];
		this.distTo = new int[g.V()];
		this.edgeTo = new int[g.V()];
		this.bfs(g, i);
		if (!BreadthFirstPaths.$assertionsDisabled && !this.check(g, i))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(150)]
	public virtual int distTo(int i)
	{
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		110,
		107,
		134,
		108,
		44,
		139,
		108
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		int num = i;
		while (this.distTo[num] != 0)
		{
			stack.push(Integer.valueOf(num));
			num = this.edgeTo[num];
		}
		stack.push(Integer.valueOf(num));
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		33,
		104,
		113,
		113,
		113,
		126,
		106
	}), Signature("(LGraph;Ljava/lang/Iterable<Ljava/lang/Integer;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BreadthFirstPaths(Graph g, Iterable i)
	{
		this.marked = new bool[g.V()];
		this.distTo = new int[g.V()];
		this.edgeTo = new int[g.V()];
		for (int j = 0; j < g.V(); j++)
		{
			this.distTo[j] = 2147483647;
		}
		this.bfs(g, i);
	}
	[LineNumberTable(new byte[]
	{
		160,
		104,
		110,
		167,
		105,
		136,
		112,
		109,
		127,
		20,
		127,
		12,
		110,
		159,
		3,
		199,
		255,
		4,
		53,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph graph = new Graph(i);
		int num = Integer.parseInt(strarr[1]);
		BreadthFirstPaths breadthFirstPaths = new BreadthFirstPaths(graph, num);
		for (int j = 0; j < graph.V(); j++)
		{
			if (breadthFirstPaths.hasPathTo(j))
			{
				StdOut.printf("%d to %d (%d):  ", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j),
					Integer.valueOf(breadthFirstPaths.distTo(j))
				});
				Iterator iterator = breadthFirstPaths.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					int num2 = ((Integer)iterator.Current).intValue();
					if (num2 == num)
					{
						StdOut.print(num2);
					}
					else
					{
						StdOut.print(new StringBuilder().append("-").append(num2).toString());
					}
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d (-):  not connected\n", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
			}
		}
	}
	[LineNumberTable(56)]
	static BreadthFirstPaths()
	{
		BreadthFirstPaths.$assertionsDisabled = !ClassLiteral<BreadthFirstPaths>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key::Ljava/lang/Comparable<TKey;>;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class BST : java.lang.Object
{
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("BST.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TKey;")]
		private IComparable key;
		[Signature("TValue;")]
		private object val;
		[Signature("LBST<TKey;TValue;>.Node;")]
		private BST.Node left;
		[Signature("LBST<TKey;TValue;>.Node;")]
		private BST.Node right;
		private int N;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal BST this$0 = bST;
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$000(BST.Node node)
		{
			return node.N;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static IComparable access$100(BST.Node node)
		{
			return node.key;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BST.Node access$200(BST.Node node)
		{
			return node.left;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BST.Node access$300(BST.Node node)
		{
			return node.right;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$400(BST.Node node)
		{
			return node.val;
		}
		[LineNumberTable(new byte[]
		{
			159,
			179,
			111,
			103,
			103,
			104
		}), Signature("(TKey;TValue;I)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Node(BST bST, IComparable comparable, object obj, int n)
		{
			this.key = comparable;
			this.val = obj;
			this.N = n;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BST.Node access$202(BST.Node node, BST.Node result)
		{
			node.left = result;
			return result;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BST.Node access$302(BST.Node node, BST.Node result)
		{
			node.right = result;
			return result;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$402(BST.Node node, object result)
		{
			node.val = result;
			return result;
		}
		[LineNumberTable(31), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$002(BST.Node node, int num)
		{
			node.N = num;
			return num;
		}
	}
	[Signature("LBST<TKey;TValue;>.Node;")]
	private BST.Node root;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(51)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public int Size
	{
		return this.size(this.root);
	}
	[LineNumberTable(new byte[]
	{
		6,
		101
	}), Signature("(LBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int size(BST.Node node)
	{
		if (node == null)
		{
			return 0;
		}
		return BST.Node.access$000(node);
	}
	[LineNumberTable(71), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(IComparable c)
	{
		return this.get(this.root, c);
	}
	[LineNumberTable(new byte[]
	{
		25,
		101,
		109,
		116,
		116
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private object get(BST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num < 0)
		{
			return this.get(BST.Node.access$200(node), comparable);
		}
		if (num > 0)
		{
			return this.get(BST.Node.access$300(node), comparable);
		}
		return BST.Node.access$400(node);
	}
	[LineNumberTable(new byte[]
	{
		83,
		115,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(IComparable c)
	{
		this.root = this.delete(this.root, c);
		if (!BST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		43,
		111,
		109,
		123,
		123,
		104,
		127,
		3
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;TValue;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node put(BST.Node node, IComparable comparable, object obj)
	{
		if (node == null)
		{
			return new BST.Node(this, comparable, obj, 1);
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num < 0)
		{
			BST.Node.access$202(node, this.put(BST.Node.access$200(node), comparable, obj));
		}
		else if (num > 0)
		{
			BST.Node.access$302(node, this.put(BST.Node.access$300(node), comparable, obj));
		}
		else
		{
			BST.Node.access$402(node, obj);
		}
		BST.Node.access$002(node, 1 + this.size(BST.Node.access$200(node)) + this.size(BST.Node.access$300(node)));
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		185,
		114,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		if (!this.isBST())
		{
			StdOut.println("Not in symmetric order");
		}
		if (!this.isSizeConsistent())
		{
			StdOut.println("Subtree counts not consistent");
		}
		if (!this.isRankConsistent())
		{
			StdOut.println("Ranks not consistent");
		}
		return this.isBST() && this.isSizeConsistent() && this.isRankConsistent();
	}
	[LineNumberTable(46)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		63,
		113,
		115,
		127,
		3
	}), Signature("(LBST<TKey;TValue;>.Node;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node deleteMin(BST.Node node)
	{
		if (BST.Node.access$200(node) == null)
		{
			return BST.Node.access$300(node);
		}
		BST.Node.access$202(node, this.deleteMin(BST.Node.access$200(node)));
		BST.Node.access$002(node, this.size(BST.Node.access$200(node)) + this.size(BST.Node.access$300(node)) + 1);
		return node;
	}
	[LineNumberTable(new byte[]
	{
		76,
		113,
		115,
		127,
		3
	}), Signature("(LBST<TKey;TValue;>.Node;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node deleteMax(BST.Node node)
	{
		if (BST.Node.access$300(node) == null)
		{
			return BST.Node.access$200(node);
		}
		BST.Node.access$302(node, this.deleteMax(BST.Node.access$300(node)));
		BST.Node.access$002(node, this.size(BST.Node.access$200(node)) + this.size(BST.Node.access$300(node)) + 1);
		return node;
	}
	[LineNumberTable(new byte[]
	{
		88,
		101,
		109,
		125,
		154,
		113,
		113,
		98,
		110,
		115,
		141,
		127,
		3
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node delete(BST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num < 0)
		{
			BST.Node.access$202(node, this.delete(BST.Node.access$200(node), comparable));
		}
		else if (num > 0)
		{
			BST.Node.access$302(node, this.delete(BST.Node.access$300(node), comparable));
		}
		else
		{
			if (BST.Node.access$300(node) == null)
			{
				return BST.Node.access$200(node);
			}
			if (BST.Node.access$200(node) == null)
			{
				return BST.Node.access$300(node);
			}
			BST.Node node2 = node;
			node = this.min(BST.Node.access$300(node2));
			BST.Node.access$302(node, this.deleteMin(BST.Node.access$300(node2)));
			BST.Node.access$202(node, BST.Node.access$200(node2));
		}
		BST.Node.access$002(node, this.size(BST.Node.access$200(node)) + this.size(BST.Node.access$300(node)) + 1);
		return node;
	}
	[LineNumberTable(new byte[]
	{
		114,
		106
	}), Signature("(LBST<TKey;TValue;>.Node;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node min(BST.Node node)
	{
		if (BST.Node.access$200(node) == null)
		{
			return node;
		}
		return this.min(BST.Node.access$200(node));
	}
	[LineNumberTable(new byte[]
	{
		124,
		106
	}), Signature("(LBST<TKey;TValue;>.Node;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node max(BST.Node node)
	{
		if (BST.Node.access$300(node) == null)
		{
			return node;
		}
		return this.max(BST.Node.access$300(node));
	}
	[LineNumberTable(new byte[]
	{
		160,
		71,
		101,
		109,
		101,
		116,
		110,
		101
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node floor(BST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num == 0)
		{
			return node;
		}
		if (num < 0)
		{
			return this.floor(BST.Node.access$200(node), comparable);
		}
		BST.Node node2 = this.floor(BST.Node.access$300(node), comparable);
		if (node2 != null)
		{
			return node2;
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		87,
		101,
		109,
		101,
		100,
		110,
		101,
		130
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node ceiling(BST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num == 0)
		{
			return node;
		}
		if (num >= 0)
		{
			return this.ceiling(BST.Node.access$300(node), comparable);
		}
		BST.Node node2 = this.ceiling(BST.Node.access$200(node), comparable);
		if (node2 != null)
		{
			return node2;
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		109,
		101,
		109,
		116,
		120
	}), Signature("(LBST<TKey;TValue;>.Node;I)LBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BST.Node select(BST.Node node, int num)
	{
		if (node == null)
		{
			return null;
		}
		int num2 = this.size(BST.Node.access$200(node));
		if (num2 > num)
		{
			return this.select(BST.Node.access$200(node), num);
		}
		if (num2 < num)
		{
			return this.select(BST.Node.access$300(node), num - num2 - 1);
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		122,
		101,
		109,
		116,
		127,
		2
	}), Signature("(TKey;LBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int rank(IComparable comparable, BST.Node node)
	{
		if (node == null)
		{
			return 0;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		if (num < 0)
		{
			return this.rank(comparable, BST.Node.access$200(node));
		}
		if (num > 0)
		{
			return 1 + this.size(BST.Node.access$200(node)) + this.rank(comparable, BST.Node.access$300(node));
		}
		return this.size(BST.Node.access$200(node));
	}
	[LineNumberTable(new byte[]
	{
		109,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable min()
	{
		if (IsEmpty)
		{
			return null;
		}
		return BST.Node.access$100(this.min(this.root));
	}
	[LineNumberTable(new byte[]
	{
		119,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable max()
	{
		if (IsEmpty)
		{
			return null;
		}
		return BST.Node.access$100(this.max(this.root));
	}
	[LineNumberTable(new byte[]
	{
		160,
		137,
		102,
		111
	}), Signature("(TKey;TKey;)Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys(IComparable c1, IComparable c2)
	{
		global::Queue queue = new global::Queue();
		this.keys(this.root, queue, c1, c2);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		160,
		143,
		100,
		109,
		110,
		116,
		116,
		118
	}), Signature("(LBST<TKey;TValue;>.Node;LQueue<TKey;>;TKey;TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void keys(BST.Node node, global::Queue queue, IComparable comparable, IComparable comparable2)
	{
		if (node == null)
		{
			return;
		}
		int num = Comparable.__Helper.compareTo(comparable, BST.Node.access$100(node));
		int num2 = Comparable.__Helper.compareTo(comparable2, BST.Node.access$100(node));
		if (num < 0)
		{
			this.keys(BST.Node.access$200(node), queue, comparable, comparable2);
		}
		if (num <= 0 && num2 >= 0)
		{
			queue.enqueue(BST.Node.access$100(node));
		}
		if (num2 > 0)
		{
			this.keys(BST.Node.access$300(node), queue, comparable, comparable2);
		}
	}
	[LineNumberTable(66), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(IComparable c)
	{
		return this.get(c) != null;
	}
	[LineNumberTable(231), Signature("(TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int rank(IComparable c)
	{
		return this.rank(c, this.root);
	}
	[LineNumberTable(new byte[]
	{
		160,
		161,
		101
	}), Signature("(LBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int height(BST.Node node)
	{
		if (node == null)
		{
			return -1;
		}
		return 1 + java.lang.Math.max(this.height(BST.Node.access$200(node)), this.height(BST.Node.access$300(node)));
	}
	[LineNumberTable(308)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isBST()
	{
		return this.isBST(this.root, null, null);
	}
	[LineNumberTable(322)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isSizeConsistent()
	{
		return this.isSizeConsistent(this.root);
	}
	[LineNumberTable(new byte[]
	{
		160,
		217,
		107,
		50,
		134,
		127,
		1,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isRankConsistent()
	{
		for (int i = 0; i < this.size(); i++)
		{
			if (i != this.rank(this.select(i)))
			{
				return false;
			}
		}
		Iterator iterator = this.keys().iterator();
		while (iterator.MoveNext())
		{
			IComparable comparable = (IComparable)iterator.Current;
			if (Comparable.__Helper.compareTo(comparable, this.select(this.rank(comparable))) != 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		201,
		101,
		116,
		116
	}), Signature("(LBST<TKey;TValue;>.Node;TKey;TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isBST(BST.Node node, IComparable comparable, IComparable comparable2)
	{
		return node == null || ((comparable == null || Comparable.__Helper.compareTo(BST.Node.access$100(node), comparable) > 0) && (comparable2 == null || Comparable.__Helper.compareTo(BST.Node.access$100(node), comparable2) < 0) && (this.isBST(BST.Node.access$200(node), comparable, BST.Node.access$100(node)) && this.isBST(BST.Node.access$300(node), BST.Node.access$100(node), comparable2)));
	}
	[LineNumberTable(new byte[]
	{
		160,
		210,
		101,
		127,
		6
	}), Signature("(LBST<TKey;TValue;>.Node;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isSizeConsistent(BST.Node node)
	{
		return node == null || (BST.Node.access$000(node) == this.size(BST.Node.access$200(node)) + this.size(BST.Node.access$300(node)) + 1 && (this.isSizeConsistent(BST.Node.access$200(node)) && this.isSizeConsistent(BST.Node.access$300(node))));
	}
	[LineNumberTable(new byte[]
	{
		160,
		102,
		111,
		110
	}), Signature("(I)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable select(int i)
	{
		if (i < 0 || i >= this.size())
		{
			return null;
		}
		BST.Node node = this.select(this.root, i);
		return BST.Node.access$100(node);
	}
	[LineNumberTable(247), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		return this.keys(this.min(), this.max());
	}
	[LineNumberTable(new byte[]
	{
		159,
		170,
		168
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BST()
	{
	}
	[LineNumberTable(new byte[]
	{
		37,
		109,
		116,
		122
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(IComparable c, object obj)
	{
		if (obj == null)
		{
			this.delete(c);
			return;
		}
		this.root = this.put(this.root, c, obj);
		if (!BST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		168,
		102,
		102,
		108,
		104,
		108,
		101,
		108,
		108,
		108,
		98
	}), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable levelOrder()
	{
		global::Queue queue = new global::Queue();
		global::Queue queue2 = new global::Queue();
		queue2.enqueue(this.root);
		while (!queue2.IsEmpty)
		{
			BST.Node node = (BST.Node)queue2.dequeue();
			if (node != null)
			{
				queue.enqueue(BST.Node.access$100(node));
				queue2.enqueue(BST.Node.access$200(node));
				queue2.enqueue(BST.Node.access$300(node));
			}
		}
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		57,
		120,
		114,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMin()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Symbol table underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		this.root = this.deleteMin(this.root);
		if (!BST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		70,
		120,
		114,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMax()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Symbol table underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		this.root = this.deleteMax(this.root);
		if (!BST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		65,
		110,
		101
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable floor(IComparable c)
	{
		BST.Node node = this.floor(this.root, c);
		if (node == null)
		{
			return null;
		}
		return BST.Node.access$100(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		110,
		101
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable ceiling(IComparable c)
	{
		BST.Node node = this.ceiling(this.root, c);
		if (node == null)
		{
			return null;
		}
		return BST.Node.access$100(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		152,
		108,
		123
	}), Signature("(TKey;TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int size(IComparable c1, IComparable c2)
	{
		if (Comparable.__Helper.compareTo(c1, c2) > 0)
		{
			return 0;
		}
		if (this.contains(c2))
		{
			return this.rank(c2) - this.rank(c1) + 1;
		}
		return this.rank(c2) - this.rank(c1);
	}
	[LineNumberTable(273)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int height()
	{
		return this.height(this.root);
	}
	[LineNumberTable(new byte[]
	{
		160,
		229,
		102,
		105,
		102,
		13,
		230,
		69,
		127,
		1,
		159,
		14,
		133,
		127,
		1,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		BST bST = new BST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			bST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = bST.levelOrder().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(bST.get(text)).toString());
		}
		StdOut.println();
		iterator = bST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(bST.get(text)).toString());
		}
	}
	[LineNumberTable(28)]
	static BST()
	{
		BST.$assertionsDisabled = !ClassLiteral<BST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key::Ljava/lang/Comparable<TKey;>;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class BTree : java.lang.Object
{
	[EnclosingMethod("BTree", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("BTree.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), SourceFile("BTree.java")]
	internal sealed class Entry : java.lang.Object
	{
		private IComparable key;
		private object value;
		private BTree.Node next;
		[LineNumberTable(32), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static IComparable access$300(BTree.Entry entry)
		{
			return entry.key;
		}
		[LineNumberTable(32), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$400(BTree.Entry entry)
		{
			return entry.value;
		}
		[LineNumberTable(32), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BTree.Node access$500(BTree.Entry entry)
		{
			return entry.next;
		}
		[LineNumberTable(new byte[]
		{
			159,
			178,
			104,
			103,
			103,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Entry(IComparable comparable, object obj, BTree.Node node)
		{
			this.key = comparable;
			this.value = obj;
			this.next = node;
		}
		[LineNumberTable(32), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static IComparable access$302(BTree.Entry entry, IComparable result)
		{
			entry.key = result;
			return result;
		}
		[LineNumberTable(32), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BTree.Node access$502(BTree.Entry entry, BTree.Node result)
		{
			entry.next = result;
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static | Modifiers.Final), SourceFile("BTree.java")]
	internal sealed class Node : java.lang.Object
	{
		private int m;
		private BTree.Entry[] children;
		[LineNumberTable(24), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(int num, BTree.1) : this(num)
		{
		}
		[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static BTree.Entry[] access$100(BTree.Node node)
		{
			return node.children;
		}
		[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$200(BTree.Node node)
		{
			return node.m;
		}
		[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$208(BTree.Node node)
		{
			int num = node.m;
			int arg_13_0 = num;
			node.m = num + 1;
			return arg_13_0;
		}
		[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$202(BTree.Node node, int result)
		{
			node.m = result;
			return result;
		}
		[LineNumberTable(new byte[]
		{
			159,
			169,
			40,
			108
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node(int num)
		{
			this.children = new BTree.Entry[4];
			this.m = num;
		}
	}
	private const int M = 4;
	private BTree.Node root;
	private int HT;
	private int N;
	[LineNumberTable(new byte[]
	{
		6,
		167,
		99,
		107,
		60,
		232,
		71,
		107,
		126,
		21,
		230,
		69
	}), Signature("(LBTree$Node;TKey;I)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private object search(BTree.Node node, IComparable comparable, int num)
	{
		BTree.Entry[] array = BTree.Node.access$100(node);
		if (num == 0)
		{
			for (int i = 0; i < BTree.Node.access$200(node); i++)
			{
				if (this.eq(comparable, BTree.Entry.access$300(array[i])))
				{
					return BTree.Entry.access$400(array[i]);
				}
			}
		}
		else
		{
			for (int i = 0; i < BTree.Node.access$200(node); i++)
			{
				if (i + 1 == BTree.Node.access$200(node) || this.less(comparable, BTree.Entry.access$300(array[i + 1])))
				{
					return this.search(BTree.Entry.access$500(array[i]), comparable, num - 1);
				}
			}
		}
		return null;
	}
	[LineNumberTable(161)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool eq(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) == 0;
	}
	[LineNumberTable(157)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		44,
		169,
		100,
		110,
		59,
		230,
		71,
		110,
		127,
		4,
		126,
		101,
		116,
		104,
		226,
		58,
		233,
		75,
		127,
		4,
		105,
		103,
		107
	}), Signature("(LBTree$Node;TKey;TValue;I)LBTree$Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BTree.Node insert(BTree.Node node, IComparable comparable, object obj, int num)
	{
		BTree.Entry entry = new BTree.Entry(comparable, obj, null);
		int i;
		if (num == 0)
		{
			for (i = 0; i < BTree.Node.access$200(node); i++)
			{
				if (this.less(comparable, BTree.Entry.access$300(BTree.Node.access$100(node)[i])))
				{
					break;
				}
			}
		}
		else
		{
			i = 0;
			while (i < BTree.Node.access$200(node))
			{
				if (i + 1 == BTree.Node.access$200(node) || this.less(comparable, BTree.Entry.access$300(BTree.Node.access$100(node)[i + 1])))
				{
					BTree.Entry[] arg_79_0 = BTree.Node.access$100(node);
					int arg_79_1 = i;
					i++;
					BTree.Node node2 = this.insert(BTree.Entry.access$500(arg_79_0[arg_79_1]), comparable, obj, num - 1);
					if (node2 == null)
					{
						return null;
					}
					BTree.Entry.access$302(entry, BTree.Entry.access$300(BTree.Node.access$100(node2)[0]));
					BTree.Entry.access$502(entry, node2);
					break;
				}
				else
				{
					i++;
				}
			}
		}
		for (int j = BTree.Node.access$200(node); j > i; j += -1)
		{
			BTree.Node.access$100(node)[j] = BTree.Node.access$100(node)[j - 1];
		}
		BTree.Node.access$100(node)[i] = entry;
		BTree.Node.access$208(node);
		if (BTree.Node.access$200(node) < 4)
		{
			return null;
		}
		return this.split(node);
	}
	[LineNumberTable(new byte[]
	{
		75,
		104,
		104,
		102,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private BTree.Node split(BTree.Node node)
	{
		BTree.Node node2 = new BTree.Node(2, null);
		BTree.Node.access$202(node, 2);
		for (int i = 0; i < 2; i++)
		{
			BTree.Node.access$100(node2)[i] = BTree.Node.access$100(node)[2 + i];
		}
		return node2;
	}
	[LineNumberTable(new byte[]
	{
		87,
		102,
		135,
		102,
		107,
		63,
		38,
		235,
		69,
		110,
		127,
		29,
		31,
		34,
		233,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private string toString(BTree.Node node, int num, string str)
	{
		string text = "";
		BTree.Entry[] array = BTree.Node.access$100(node);
		if (num == 0)
		{
			for (int i = 0; i < BTree.Node.access$200(node); i++)
			{
				text = new StringBuilder().append(text).append(str).append(BTree.Entry.access$300(array[i])).append(" ").append(BTree.Entry.access$400(array[i])).append("\n").toString();
			}
		}
		else
		{
			for (int i = 0; i < BTree.Node.access$200(node); i++)
			{
				if (i > 0)
				{
					text = new StringBuilder().append(text).append(str).append("(").append(BTree.Entry.access$300(array[i])).append(")\n").toString();
				}
				text = new StringBuilder().append(text).append(this.toString(BTree.Entry.access$500(array[i]), num - 1, new StringBuilder().append(str).append("     ").toString())).toString();
			}
		}
		return text;
	}
	[LineNumberTable(44)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public BTree()
	{
		this.root = new BTree.Node(0, null);
	}
	[LineNumberTable(new byte[]
	{
		29,
		117,
		110,
		164,
		104,
		127,
		7,
		124,
		103,
		110
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(IComparable c, object obj)
	{
		BTree.Node node = this.insert(this.root, c, obj, this.HT);
		this.N++;
		if (node == null)
		{
			return;
		}
		BTree.Node node2 = new BTree.Node(2, null);
		BTree.Node.access$100(node2)[0] = new BTree.Entry(BTree.Entry.access$300(BTree.Node.access$100(this.root)[0]), null, this.root);
		BTree.Node.access$100(node2)[1] = new BTree.Entry(BTree.Entry.access$300(BTree.Node.access$100(node)[0]), null, node);
		this.root = node2;
		this.HT++;
	}
	[LineNumberTable(54), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(IComparable c)
	{
		return this.search(this.root, c, this.HT);
	}
	public int Size
	{
		return this.N;
	}
	public virtual int height()
	{
		return this.HT;
	}
	[LineNumberTable(134)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.toString(this.root, this.HT, "")).append("\n").toString();
	}
	[LineNumberTable(new byte[]
	{
		119,
		166,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		112,
		176,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		133,
		127,
		5,
		127,
		5,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		BTree bTree = new BTree();
		bTree.put("www.cs.princeton.edu", "128.112.136.11");
		bTree.put("www.princeton.edu", "128.112.128.15");
		bTree.put("www.yale.edu", "130.132.143.21");
		bTree.put("www.simpsons.com", "209.052.165.60");
		bTree.put("www.apple.com", "17.112.152.32");
		bTree.put("www.amazon.com", "207.171.182.16");
		bTree.put("www.ebay.com", "66.135.192.87");
		bTree.put("www.cnn.com", "64.236.16.20");
		bTree.put("www.google.com", "216.239.41.99");
		bTree.put("www.nytimes.com", "199.239.136.200");
		bTree.put("www.microsoft.com", "207.126.99.140");
		bTree.put("www.dell.com", "143.166.224.230");
		bTree.put("www.slashdot.org", "66.35.250.151");
		bTree.put("www.espn.com", "199.181.135.201");
		bTree.put("www.weather.com", "63.111.66.11");
		bTree.put("www.yahoo.com", "216.109.118.65");
		StdOut.println(new StringBuilder().append("cs.princeton.edu:  ").append((string)bTree.get("www.cs.princeton.edu")).toString());
		StdOut.println(new StringBuilder().append("hardvardsucks.com: ").append((string)bTree.get("www.harvardsucks.com")).toString());
		StdOut.println(new StringBuilder().append("simpsons.com:      ").append((string)bTree.get("www.simpsons.com")).toString());
		StdOut.println(new StringBuilder().append("apple.com:         ").append((string)bTree.get("www.apple.com")).toString());
		StdOut.println(new StringBuilder().append("ebay.com:          ").append((string)bTree.get("www.ebay.com")).toString());
		StdOut.println(new StringBuilder().append("dell.com:          ").append((string)bTree.get("www.dell.com")).toString());
		StdOut.println();
		StdOut.println(new StringBuilder().append("size:    ").append(bTree.size()).toString());
		StdOut.println(new StringBuilder().append("height:  ").append(bTree.height()).toString());
		StdOut.println(bTree);
		StdOut.println();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Cat : java.lang.Object
{
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Cat()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		113,
		105,
		110,
		103,
		103,
		230,
		60,
		230,
		70,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Out.__<clinit>();
		Out @out = new Out(strarr[strarr.Length - 1]);
		for (int i = 0; i < strarr.Length - 1; i++)
		{
			In.__<clinit>();
			In @in = new In(strarr[i]);
			string obj = @in.readAll();
			@out.println(obj);
			@in.close();
		}
		@out.close();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class CC : java.lang.Object
{
	private bool[] marked;
	private int[] id;
	private int[] size;
	private int count;
	[LineNumberTable(new byte[]
	{
		28,
		105,
		110,
		118,
		127,
		7,
		106,
		170
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Graph graph, int num)
	{
		this.marked[num] = true;
		this.id[num] = this.count;
		int[] arg_24_0 = this.size;
		int num2 = this.count;
		int[] array = arg_24_0;
		array[num2]++;
		Iterator iterator = graph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num3 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num3])
			{
				this.dfs(graph, num3);
			}
		}
	}
	[LineNumberTable(94)]
	public virtual int id(int i)
	{
		return this.id[i];
	}
	[LineNumberTable(new byte[]
	{
		14,
		104,
		113,
		113,
		113,
		107,
		106,
		104,
		238,
		61,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public CC(Graph g)
	{
		this.marked = new bool[g.V()];
		this.id = new int[g.V()];
		this.size = new int[g.V()];
		for (int i = 0; i < g.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(g, i);
				this.count++;
			}
		}
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(103)]
	public virtual int size(int i)
	{
		return this.size[this.id[i]];
	}
	[LineNumberTable(122)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool areConnected(int i1, int i2)
	{
		return this.id(i1) == this.id(i2);
	}
	[LineNumberTable(new byte[]
	{
		80,
		110,
		103,
		167,
		103,
		191,
		0,
		109,
		104,
		42,
		168,
		109,
		55,
		232,
		69,
		104,
		127,
		9,
		159,
		3,
		229,
		60,
		232,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph graph = new Graph(i);
		CC cC = new CC(graph);
		int num = cC.count();
		StdOut.println(new StringBuilder().append(num).append(" components").toString());
		global::Queue[] array = (global::Queue[])new global::Queue[num];
		for (int j = 0; j < num; j++)
		{
			array[j] = new global::Queue();
		}
		for (int j = 0; j < graph.V(); j++)
		{
			array[cC.id(j)].enqueue(Integer.valueOf(j));
		}
		for (int j = 0; j < num; j++)
		{
			Iterator iterator = array[j].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class ClosestPair : java.lang.Object
{
	private Point2D best1;
	private Point2D best2;
	private double bestDistance;
	[LineNumberTable(new byte[]
	{
		5,
		144,
		107,
		164,
		110,
		112,
		170,
		172,
		99,
		106,
		121,
		14,
		232,
		70,
		140,
		127,
		7,
		112,
		102,
		100,
		106,
		105,
		106,
		234,
		57,
		11,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private double closest(Point2D[] array, Point2D[] array2, Point2D[] array3, int num, int num2)
	{
		if (num2 <= num)
		{
			return double.PositiveInfinity;
		}
		int num3 = num + (num2 - num) / 2;
		Point2D point2D = array[num3];
		double a = this.closest(array, array2, array3, num, num3);
		double b = this.closest(array, array2, array3, num3 + 1, num2);
		double num4 = java.lang.Math.min(a, b);
		ClosestPair.merge(array2, array3, num, num3, num2);
		int num5 = 0;
		for (int i = num; i <= num2; i++)
		{
			if (java.lang.Math.abs(array2[i].x() - point2D.x()) < num4)
			{
				int arg_86_1 = num5;
				num5++;
				array3[arg_86_1] = array2[i];
			}
		}
		for (int i = 0; i < num5; i++)
		{
			int num6 = i + 1;
			while (num6 < num5 && array3[num6].y() - array3[i].y() < num4)
			{
				double num7 = array3[i].distanceTo(array3[num6]);
				if (num7 < num4)
				{
					num4 = num7;
					if (num7 < this.bestDistance)
					{
						this.bestDistance = num4;
						this.best1 = array3[i];
						this.best2 = array3[num6];
					}
				}
				num6++;
			}
		}
		return num4;
	}
	[LineNumberTable(new byte[]
	{
		60,
		103,
		38,
		230,
		69,
		102,
		106,
		112,
		113,
		121,
		234,
		60,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(IComparable[] array, IComparable[] array2, int num, int num2, int num3)
	{
		int i;
		for (i = num; i <= num3; i++)
		{
			array2[i] = array[i];
		}
		i = num;
		int num4 = num2 + 1;
		for (int j = num; j <= num3; j++)
		{
			if (i > num2)
			{
				int arg_30_1 = j;
				int arg_2F_1 = num4;
				num4++;
				array[arg_30_1] = array2[arg_2F_1];
			}
			else if (num4 > num3)
			{
				int arg_41_1 = j;
				int arg_40_1 = i;
				i++;
				array[arg_41_1] = array2[arg_40_1];
			}
			else if (ClosestPair.less(array2[num4], array2[i]))
			{
				int arg_5A_1 = j;
				int arg_59_1 = num4;
				num4++;
				array[arg_5A_1] = array2[arg_59_1];
			}
			else
			{
				int arg_66_1 = j;
				int arg_65_1 = i;
				i++;
				array[arg_66_1] = array2[arg_65_1];
			}
		}
	}
	[LineNumberTable(103)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		163,
		8,
		176,
		99,
		165,
		103,
		114,
		171,
		104,
		111,
		108,
		105,
		107,
		225,
		59,
		230,
		74,
		104,
		185,
		136,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ClosestPair(Point2D[] pdarr)
	{
		this.bestDistance = double.PositiveInfinity;
		int num = pdarr.Length;
		if (num <= 1)
		{
			return;
		}
		Point2D[] array = new Point2D[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = pdarr[i];
		}
		Arrays.sort(array, Point2D.__<>X_ORDER);
		for (int i = 0; i < num - 1; i++)
		{
			if (array[i].equals(array[i + 1]))
			{
				this.bestDistance = (double)0f;
				this.best1 = array[i];
				this.best2 = array[i + 1];
				return;
			}
		}
		Point2D[] array2 = new Point2D[num];
		for (int j = 0; j < num; j++)
		{
			array2[j] = array[j];
		}
		Point2D[] array3 = new Point2D[num];
		this.closest(array, array2, array3, 0, num - 1);
	}
	public virtual double distance()
	{
		return this.bestDistance;
	}
	public virtual Point2D either()
	{
		return this.best1;
	}
	public virtual Point2D other()
	{
		return this.best2;
	}
	[LineNumberTable(new byte[]
	{
		77,
		102,
		103,
		102,
		103,
		104,
		235,
		61,
		230,
		69,
		104,
		127,
		42
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = StdIn.readInt();
		Point2D[] array = new Point2D[num];
		for (int i = 0; i < num; i++)
		{
			double d = StdIn.readDouble();
			double d2 = StdIn.readDouble();
			array[i] = new Point2D(d, d2);
		}
		ClosestPair closestPair = new ClosestPair(array);
		StdOut.println(new StringBuilder().append(closestPair.distance()).append(" from ").append(closestPair.either()).append(" to ").append(closestPair.other()).toString());
	}
}

using IKVM.Attributes;
using java.awt;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class CollisionSystem : java.lang.Object
{
	[Implements(new string[]
	{
		"java.lang.Comparable"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LCollisionSystem$Event;>;"), SourceFile("CollisionSystem.java")]
	internal sealed class Event : java.lang.Object, Comparable
	{
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private double time;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private Particle a;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private Particle b;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private int countA;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private int countB;
		[LineNumberTable(new byte[]
		{
			63,
			104,
			105,
			103,
			103,
			113,
			103,
			113,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Event(double num, Particle particle, Particle particle2)
		{
			this.time = num;
			this.a = particle;
			this.b = particle2;
			if (particle != null)
			{
				this.countA = particle.count();
			}
			else
			{
				this.countA = -1;
			}
			if (particle2 != null)
			{
				this.countB = particle2.count();
			}
			else
			{
				this.countB = -1;
			}
		}
		[LineNumberTable(new byte[]
		{
			82,
			125,
			125
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool isValid()
		{
			return (this.a == null || this.a.count() == this.countA) && (this.b == null || this.b.count() == this.countB);
		}
		[LineNumberTable(106), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Particle access$000(CollisionSystem.Event @event)
		{
			return @event.a;
		}
		[LineNumberTable(106), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Particle access$100(CollisionSystem.Event @event)
		{
			return @event.b;
		}
		[LineNumberTable(106), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static double access$200(CollisionSystem.Event @event)
		{
			return @event.time;
		}
		[LineNumberTable(new byte[]
		{
			75,
			112,
			112
		})]
		public virtual int compareTo(CollisionSystem.Event @event)
		{
			if (this.time < @event.time)
			{
				return -1;
			}
			if (this.time > @event.time)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(106), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(object obj)
		{
			return this.compareTo((CollisionSystem.Event)obj);
		}
		[HideFromJava]
		int IComparable.Object;)IcompareTo(object obj)
		{
			return this.compareTo(obj);
		}
	}
	[Signature("LMinPQ<LCollisionSystem$Event;>;")]
	private MinPQ pq;
	private double t;
	private double hz;
	private Particle[] particles;
	[LineNumberTable(new byte[]
	{
		159,
		168,
		164,
		108,
		112,
		108,
		255,
		2,
		61,
		230,
		71,
		104,
		104,
		127,
		7,
		127,
		9
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void predict(Particle particle, double num)
	{
		if (particle == null)
		{
			return;
		}
		for (int i = 0; i < this.particles.Length; i++)
		{
			double num2 = particle.timeToHit(this.particles[i]);
			if (this.t + num2 <= num)
			{
				this.pq.insert(new CollisionSystem.Event(this.t + num2, particle, this.particles[i]));
			}
		}
		double num3 = particle.timeToHitVerticalWall();
		double num4 = particle.timeToHitHorizontalWall();
		if (this.t + num3 <= num)
		{
			this.pq.insert(new CollisionSystem.Event(this.t + num3, particle, null));
		}
		if (this.t + num4 <= num)
		{
			this.pq.insert(new CollisionSystem.Event(this.t + num4, null, particle));
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		101,
		108,
		45,
		166,
		103,
		106,
		159,
		8
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void redraw(double num)
	{
		StdDraw.clear();
		for (int i = 0; i < this.particles.Length; i++)
		{
			this.particles[i].draw();
		}
		StdDraw.show(20);
		if (this.t < num)
		{
			this.pq.insert(new CollisionSystem.Event(this.t + (double)1f / this.hz, null, null));
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		162,
		232,
		59,
		108,
		240,
		69,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public CollisionSystem(Particle[] parr)
	{
		this.t = (double)0f;
		this.hz = 0.5;
		this.particles = parr;
	}
	[LineNumberTable(new byte[]
	{
		11,
		107,
		108,
		48,
		166,
		215,
		176,
		113,
		106,
		103,
		167,
		110,
		59,
		136,
		173,
		111,
		110,
		110,
		174,
		105,
		105,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void simulate(double d)
	{
		this.pq = new MinPQ();
		for (int i = 0; i < this.particles.Length; i++)
		{
			this.predict(this.particles[i], d);
		}
		this.pq.insert(new CollisionSystem.Event((double)0f, null, null));
		while (!this.pq.IsEmpty)
		{
			CollisionSystem.Event @event = (CollisionSystem.Event)this.pq.delMin();
			if (@event.isValid())
			{
				Particle particle = CollisionSystem.Event.access$000(@event);
				Particle particle2 = CollisionSystem.Event.access$100(@event);
				for (int j = 0; j < this.particles.Length; j++)
				{
					this.particles[j].move(CollisionSystem.Event.access$200(@event) - this.t);
				}
				this.t = CollisionSystem.Event.access$200(@event);
				if (particle != null && particle2 != null)
				{
					particle.bounceOff(particle2);
				}
				else if (particle != null && particle2 == null)
				{
					particle.bounceOffVerticalWall();
				}
				else if (particle == null && particle2 != null)
				{
					particle2.bounceOffHorizontalWall();
				}
				else if (particle == null && particle2 == null)
				{
					this.redraw(d);
				}
				this.predict(particle, d);
				this.predict(particle2, d);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		97,
		119,
		247,
		72,
		230,
		70,
		101,
		105,
		103,
		116,
		197,
		102,
		103,
		105,
		103,
		104,
		104,
		104,
		104,
		104,
		103,
		103,
		103,
		109,
		245,
		53,
		233,
		80,
		104,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		StdDraw.setXscale(0.045454545454545456, 0.95454545454545459);
		StdDraw.setYscale(0.045454545454545456, 0.95454545454545459);
		StdDraw.show(0);
		Particle[] array;
		if (strarr.Length == 1)
		{
			int num = Integer.parseInt(strarr[0]);
			array = new Particle[num];
			for (int i = 0; i < num; i++)
			{
				array[i] = new Particle();
			}
		}
		else
		{
			int num = StdIn.readInt();
			array = new Particle[num];
			for (int i = 0; i < num; i++)
			{
				double d = StdIn.readDouble();
				double d2 = StdIn.readDouble();
				double d3 = StdIn.readDouble();
				double d4 = StdIn.readDouble();
				double d5 = StdIn.readDouble();
				double d6 = StdIn.readDouble();
				int r = StdIn.readInt();
				int g = StdIn.readInt();
				int b = StdIn.readInt();
				Color c = new Color(r, g, b);
				array[i] = new Particle(d, d2, d3, d4, d5, d6, c);
			}
		}
		CollisionSystem collisionSystem = new CollisionSystem(array);
		collisionSystem.simulate(10000.0);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Complex : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double re;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double im;
	[LineNumberTable(new byte[]
	{
		159,
		177,
		104,
		105,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Complex(double d1, double d2)
	{
		this.re = d1;
		this.im = d2;
	}
	[LineNumberTable(new byte[]
	{
		37,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex reciprocal()
	{
		double num = this.re * this.re + this.im * this.im;
		return new Complex(this.re / num, -this.im / num);
	}
	[LineNumberTable(new byte[]
	{
		20,
		98,
		125,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex times(Complex c)
	{
		double d = this.re * c.re - this.im * c.im;
		double d2 = this.re * c.im + this.im * c.re;
		return new Complex(d, d2);
	}
	[LineNumberTable(108)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex sin()
	{
		return new Complex(java.lang.Math.sin(this.re) * java.lang.Math.cosh(this.im), java.lang.Math.cos(this.re) * java.lang.Math.sinh(this.im));
	}
	[LineNumberTable(113)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex cos()
	{
		return new Complex(java.lang.Math.cos(this.re) * java.lang.Math.cosh(this.im), -java.lang.Math.sin(this.re) * java.lang.Math.sinh(this.im));
	}
	[LineNumberTable(new byte[]
	{
		47,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex divides(Complex c)
	{
		return this.times(c.reciprocal());
	}
	public virtual double re()
	{
		return this.re;
	}
	public virtual double im()
	{
		return this.im;
	}
	[LineNumberTable(new byte[]
	{
		4,
		98,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex plus(Complex c)
	{
		double d = this.re + c.re;
		double d2 = this.im + c.im;
		return new Complex(d, d2);
	}
	[LineNumberTable(new byte[]
	{
		12,
		98,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex minus(Complex c)
	{
		double d = this.re - c.re;
		double d2 = this.im - c.im;
		return new Complex(d, d2);
	}
	[LineNumberTable(83)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex conjugate()
	{
		return new Complex(this.re, -this.im);
	}
	[LineNumberTable(49)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double abs()
	{
		return java.lang.Math.hypot(this.re, this.im);
	}
	[LineNumberTable(118)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex tan()
	{
		return this.sin().divides(this.cos());
	}
	[LineNumberTable(new byte[]
	{
		159,
		184,
		127,
		16,
		127,
		16,
		127,
		38
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		if (this.im == (double)0f)
		{
			return new StringBuilder().append(this.re).append("").toString();
		}
		if (this.re == (double)0f)
		{
			return new StringBuilder().append(this.im).append("i").toString();
		}
		if (this.im < (double)0f)
		{
			return new StringBuilder().append(this.re).append(" - ").append(-this.im).append("i").toString();
		}
		return new StringBuilder().append(this.re).append(" + ").append(this.im).append("i").toString();
	}
	[LineNumberTable(50)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double phase()
	{
		return java.lang.Math.atan2(this.im, this.re);
	}
	[LineNumberTable(79)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex times(double d)
	{
		return new Complex(d * this.re, d * this.im);
	}
	[LineNumberTable(103)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Complex exp()
	{
		return new Complex(java.lang.Math.exp(this.re) * java.lang.Math.cos(this.im), java.lang.Math.exp(this.re) * java.lang.Math.sin(this.im));
	}
	[LineNumberTable(new byte[]
	{
		75,
		111,
		111,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Complex plus(Complex c1, Complex c2)
	{
		double d = c1.re + c2.re;
		double d2 = c1.im + c2.im;
		return new Complex(d, d2);
	}
	[LineNumberTable(new byte[]
	{
		85,
		120,
		152,
		127,
		0,
		127,
		0,
		127,
		5,
		127,
		5,
		127,
		6,
		127,
		6,
		127,
		6,
		127,
		6,
		127,
		6,
		127,
		12,
		127,
		5,
		127,
		5,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Complex complex = new Complex(5.0, 6.0);
		Complex complex2 = new Complex(-3.0, 4.0);
		StdOut.println(new StringBuilder().append("a            = ").append(complex).toString());
		StdOut.println(new StringBuilder().append("b            = ").append(complex2).toString());
		StdOut.println(new StringBuilder().append("Re(a)        = ").append(complex.re()).toString());
		StdOut.println(new StringBuilder().append("Im(a)        = ").append(complex.im()).toString());
		StdOut.println(new StringBuilder().append("b + a        = ").append(complex2.plus(complex)).toString());
		StdOut.println(new StringBuilder().append("a - b        = ").append(complex.minus(complex2)).toString());
		StdOut.println(new StringBuilder().append("a * b        = ").append(complex.times(complex2)).toString());
		StdOut.println(new StringBuilder().append("b * a        = ").append(complex2.times(complex)).toString());
		StdOut.println(new StringBuilder().append("a / b        = ").append(complex.divides(complex2)).toString());
		StdOut.println(new StringBuilder().append("(a / b) * b  = ").append(complex.divides(complex2).times(complex2)).toString());
		StdOut.println(new StringBuilder().append("conj(a)      = ").append(complex.conjugate()).toString());
		StdOut.println(new StringBuilder().append("|a|          = ").append(complex.abs()).toString());
		StdOut.println(new StringBuilder().append("tan(a)       = ").append(complex.tan()).toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Copy : java.lang.Object
{
	[LineNumberTable(14)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Copy()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		159,
		103,
		102,
		102,
		98,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		while (!BinaryStdIn.IsEmpty)
		{
			int ch = (int)BinaryStdIn.readChar();
			BinaryStdOut.write((char)ch);
		}
		BinaryStdOut.flush();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Count : java.lang.Object
{
	[LineNumberTable(33)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Count()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		110,
		103,
		103,
		102,
		104,
		105,
		112,
		31,
		0,
		168,
		104,
		63,
		16,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Alphabet.__<clinit>();
		Alphabet alphabet = new Alphabet(strarr[0]);
		int num = alphabet.R();
		int[] array = new int[num];
		string @this = StdIn.readAll();
		int num2 = java.lang.String.instancehelper_length(@this);
		for (int i = 0; i < num2; i++)
		{
			if (alphabet.contains(java.lang.String.instancehelper_charAt(@this, i)))
			{
				int[] arg_54_0 = array;
				int num3 = alphabet.toIndex(java.lang.String.instancehelper_charAt(@this, i));
				int[] array2 = arg_54_0;
				array2[num3]++;
			}
		}
		for (int i = 0; i < num; i++)
		{
			StdOut.println(new StringBuilder().append(alphabet.toChar(i)).append(" ").append(array[i]).toString());
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Comparable"
}), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LCounter;>;")]
public class Counter : java.lang.Object, Comparable
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private string name;
	private int count;
	[LineNumberTable(new byte[]
	{
		159,
		181,
		104,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Counter(string str)
	{
		this.name = str;
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		110
	})]
	public virtual void increment()
	{
		this.count++;
	}
	[LineNumberTable(new byte[]
	{
		18,
		112,
		112
	})]
	public virtual int compareTo(Counter c)
	{
		if (this.count < c.count)
		{
			return -1;
		}
		if (this.count > c.count)
		{
			return 1;
		}
		return 0;
	}
	public virtual int tally()
	{
		return this.count;
	}
	[LineNumberTable(61)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.count).append(" ").append(this.name).toString();
	}
	[LineNumberTable(new byte[]
	{
		29,
		105,
		169,
		103,
		102,
		63,
		3,
		230,
		69,
		102,
		45,
		230,
		69,
		102,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		Counter[] array = new Counter[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = new Counter(new StringBuilder().append("counter").append(i).toString());
		}
		for (int i = 0; i < num2; i++)
		{
			array[StdRandom.uniform(num)].increment();
		}
		for (int i = 0; i < num; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(30), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(object obj)
	{
		return this.compareTo((Counter)obj);
	}
	[HideFromJava]
	int IComparable.Object;)IcompareTo(object obj)
	{
		return this.compareTo(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class CPM : java.lang.Object
{
	[LineNumberTable(52)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private CPM()
	{
	}
	[LineNumberTable(new byte[]
	{
		11,
		166,
		100,
		166,
		107,
		107,
		104,
		115,
		117,
		179,
		103,
		105,
		103,
		22,
		232,
		56,
		235,
		79,
		169,
		106,
		106,
		104,
		63,
		31,
		168,
		127,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = StdIn.readInt();
		int num2 = 2 * num;
		int num3 = 2 * num + 1;
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(2 * num + 2);
		for (int i = 0; i < num; i++)
		{
			double d = StdIn.readDouble();
			edgeWeightedDigraph.addEdge(new DirectedEdge(num2, i, (double)0f));
			edgeWeightedDigraph.addEdge(new DirectedEdge(i + num, num3, (double)0f));
			edgeWeightedDigraph.addEdge(new DirectedEdge(i, i + num, d));
			int num4 = StdIn.readInt();
			for (int j = 0; j < num4; j++)
			{
				int i2 = StdIn.readInt();
				edgeWeightedDigraph.addEdge(new DirectedEdge(num + i, i2, (double)0f));
			}
		}
		AcyclicLP acyclicLP = new AcyclicLP(edgeWeightedDigraph, num2);
		StdOut.println(" job   start  finish");
		StdOut.println("--------------------");
		for (int k = 0; k < num; k++)
		{
			StdOut.printf("%4d %7.1f %7.1f\n", new object[]
			{
				Integer.valueOf(k),
				java.lang.Double.valueOf(acyclicLP.distTo(k)),
				java.lang.Double.valueOf(acyclicLP.distTo(k + num))
			});
		}
		StdOut.printf("Finish time: %7.1f\n", new object[]
		{
			java.lang.Double.valueOf(acyclicLP.distTo(num3))
		});
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Cycle : java.lang.Object
{
	private bool[] marked;
	private int[] edgeTo;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack cycle;
	[LineNumberTable(new byte[]
	{
		13,
		110,
		127,
		7,
		100,
		107,
		113,
		113,
		228,
		58,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool hasSelfLoop(Graph graph)
	{
		for (int i = 0; i < graph.V(); i++)
		{
			Iterator iterator = graph.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int num = ((Integer)iterator.Current).intValue();
				if (i == num)
				{
					this.cycle = new global::Stack();
					this.cycle.push(Integer.valueOf(i));
					this.cycle.push(Integer.valueOf(i));
					return true;
				}
			}
		}
		return false;
	}
	[LineNumberTable(new byte[]
	{
		29,
		145,
		174,
		127,
		10,
		106,
		107,
		113,
		113,
		113,
		130,
		206,
		127,
		7,
		235,
		48,
		233,
		83
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool hasParallelEdges(Graph graph)
	{
		this.marked = new bool[graph.V()];
		for (int i = 0; i < graph.V(); i++)
		{
			Iterator iterator = graph.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int num = ((Integer)iterator.Current).intValue();
				if (this.marked[num])
				{
					this.cycle = new global::Stack();
					this.cycle.push(Integer.valueOf(i));
					this.cycle.push(Integer.valueOf(num));
					this.cycle.push(Integer.valueOf(i));
					return true;
				}
				this.marked[num] = true;
			}
			iterator = graph.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int num = ((Integer)iterator.Current).intValue();
				this.marked[num] = false;
			}
		}
		return false;
	}
	[LineNumberTable(new byte[]
	{
		71,
		105,
		191,
		10,
		137,
		106,
		105,
		203,
		100,
		107,
		102,
		49,
		171,
		113,
		182
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Graph graph, int num, int num2)
	{
		this.marked[num2] = true;
		Iterator iterator = graph.adj(num2).iterator();
		while (iterator.MoveNext())
		{
			int num3 = ((Integer)iterator.Current).intValue();
			if (this.cycle != null)
			{
				return;
			}
			if (!this.marked[num3])
			{
				this.edgeTo[num3] = num2;
				this.dfs(graph, num2, num3);
			}
			else if (num3 != num)
			{
				this.cycle = new global::Stack();
				for (int num4 = num2; num4 != num3; num4 = this.edgeTo[num4])
				{
					this.cycle.push(Integer.valueOf(num4));
				}
				this.cycle.push(Integer.valueOf(num3));
				this.cycle.push(Integer.valueOf(num2));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		104,
		106,
		106,
		113,
		113,
		107,
		106,
		9,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Cycle(Graph g)
	{
		if (this.hasSelfLoop(g))
		{
			return;
		}
		if (this.hasParallelEdges(g))
		{
			return;
		}
		this.marked = new bool[g.V()];
		this.edgeTo = new int[g.V()];
		for (int i = 0; i < g.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(g, -1, i);
			}
		}
	}
	public virtual bool hasCycle()
	{
		return this.cycle != null;
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable cycle()
	{
		return this.cycle;
	}
	[LineNumberTable(new byte[]
	{
		98,
		110,
		103,
		103,
		104,
		127,
		7,
		159,
		3,
		167,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph g = new Graph(i);
		Cycle cycle = new Cycle(g);
		if (cycle.hasCycle())
		{
			Iterator iterator = cycle.cycle().iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
		else
		{
			StdOut.println("Graph is acyclic");
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Comparable"
}), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LDate;>;")]
public class Date : java.lang.Object, Comparable
{
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static int[] DAYS;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int month;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int day;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int year;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		33,
		107,
		112,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isValid(int num, int num2, int num3)
	{
		return num >= 1 && num <= 12 && num2 >= 1 && num2 <= Date.DAYS[num] && (num != 2 || num2 != 29 || Date.isLeapYear(num3));
	}
	[LineNumberTable(new byte[]
	{
		44,
		116,
		113
	})]
	private static bool isLeapYear(int num)
	{
		int expr_06 = 400;
		if (expr_06 == -1 || num % expr_06 == 0)
		{
			return true;
		}
		int expr_17 = 100;
		if (expr_17 == -1 || num % expr_17 == 0)
		{
			return false;
		}
		int expr_27 = 4;
		return expr_27 == -1 || num % expr_27 == 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		104,
		122,
		103,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Date(int i1, int i2, int i3)
	{
		if (!Date.isValid(i1, i2, i3))
		{
			string arg_1C_0 = "Invalid date";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		this.month = i1;
		this.day = i2;
		this.year = i3;
	}
	[LineNumberTable(new byte[]
	{
		81,
		112,
		112,
		112,
		112,
		112,
		112
	})]
	public virtual int compareTo(Date d)
	{
		if (this.year < d.year)
		{
			return -1;
		}
		if (this.year > d.year)
		{
			return 1;
		}
		if (this.month < d.month)
		{
			return -1;
		}
		if (this.month > d.month)
		{
			return 1;
		}
		if (this.day < d.day)
		{
			return -1;
		}
		if (this.day > d.day)
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(new byte[]
	{
		54,
		127,
		24,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Date next()
	{
		if (Date.isValid(this.month, this.day + 1, this.year))
		{
			return new Date(this.month, this.day + 1, this.year);
		}
		if (Date.isValid(this.month + 1, 1, this.year))
		{
			return new Date(this.month + 1, 1, this.year);
		}
		return new Date(1, 1, this.year + 1);
	}
	[LineNumberTable(114)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool isAfter(Date d)
	{
		return this.compareTo(d) > 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		187,
		104,
		108,
		101,
		144,
		110,
		110,
		110,
		127,
		10
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Date(string str)
	{
		string[] array = java.lang.String.instancehelper_split(str, "/");
		if (array.Length != 3)
		{
			string arg_23_0 = "Invalid date";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_23_0);
		}
		this.month = Integer.parseInt(array[0]);
		this.day = Integer.parseInt(array[1]);
		this.year = Integer.parseInt(array[2]);
		if (!Date.isValid(this.month, this.day, this.year))
		{
			string arg_76_0 = "Invalid date";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_76_0);
		}
	}
	public virtual int month()
	{
		return this.month;
	}
	public virtual int day()
	{
		return this.day;
	}
	public virtual int year()
	{
		return this.year;
	}
	[LineNumberTable(122)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool isBefore(Date d)
	{
		return this.compareTo(d) < 0;
	}
	[LineNumberTable(145)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.month).append("/").append(this.day).append("/").append(this.year).toString();
	}
	[LineNumberTable(new byte[]
	{
		103,
		102,
		101,
		112,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override bool equals(object obj)
	{
		if (obj == this)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (obj.GetType() != this.GetType())
		{
			return false;
		}
		Date date = (Date)obj;
		return this.month == date.month && this.day == date.day && this.year == date.year;
	}
	public override int hashCode()
	{
		int num = 17;
		num = 31 * num + this.month;
		num = 31 * num + this.day;
		return 31 * num + this.year;
	}
	[LineNumberTable(new byte[]
	{
		126,
		110,
		102,
		103,
		103,
		6,
		230,
		69,
		113,
		108,
		177,
		111,
		102,
		103,
		103,
		6,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Date date = new Date(2, 25, 2004);
		StdOut.println(date);
		for (int i = 0; i < 10; i++)
		{
			date = date.next();
			StdOut.println(date);
		}
		StdOut.println(date.isAfter(date.next()));
		StdOut.println(date.isAfter(date));
		StdOut.println(date.next().isAfter(date));
		Date date2 = new Date(10, 16, 1971);
		StdOut.println(date2);
		for (int j = 0; j < 10; j++)
		{
			date2 = date2.next();
			StdOut.println(date2);
		}
	}
	[LineNumberTable(19), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(object obj)
	{
		return this.compareTo((Date)obj);
	}
	[LineNumberTable(20)]
	static Date()
	{
		Date.DAYS = new int[]
		{
			0,
			31,
			29,
			31,
			30,
			31,
			30,
			31,
			31,
			30,
			31,
			30,
			31
		};
	}
	[HideFromJava]
	int IComparable.Object;)IcompareTo(object obj)
	{
		return this.compareTo(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DeDup : java.lang.Object
{
	[LineNumberTable(33)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DeDup()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		166,
		103,
		102,
		105,
		103,
		134,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SET sET = new SET();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!sET.contains(text))
			{
				sET.add(text);
				StdOut.println(text);
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DegreesOfSeparation : java.lang.Object
{
	[LineNumberTable(78)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private DegreesOfSeparation()
	{
	}
	[LineNumberTable(new byte[]
	{
		41,
		100,
		100,
		196,
		104,
		104,
		105,
		127,
		2,
		161,
		105,
		139,
		106,
		103,
		109,
		106,
		107,
		127,
		13,
		223,
		11,
		138,
		130,
		138,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		string str2 = strarr[1];
		string str3 = strarr[2];
		SymbolGraph symbolGraph = new SymbolGraph(str, str2);
		Graph g = symbolGraph.G();
		if (!symbolGraph.contains(str3))
		{
			StdOut.println(new StringBuilder().append(str3).append(" not in database.").toString());
			return;
		}
		int i = symbolGraph.index(str3);
		BreadthFirstPaths breadthFirstPaths = new BreadthFirstPaths(g, i);
		while (!StdIn.IsEmpty)
		{
			string str4 = StdIn.readLine();
			if (symbolGraph.contains(str4))
			{
				int i2 = symbolGraph.index(str4);
				if (breadthFirstPaths.hasPathTo(i2))
				{
					Iterator iterator = breadthFirstPaths.pathTo(i2).iterator();
					while (iterator.MoveNext())
					{
						int i3 = ((Integer)iterator.Current).intValue();
						StdOut.println(new StringBuilder().append("   ").append(symbolGraph.name(i3)).toString());
					}
				}
				else
				{
					StdOut.println("Not connected");
				}
			}
			else
			{
				StdOut.println("   Not in database.");
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DepthFirstDirectedPaths : java.lang.Object
{
	private bool[] marked;
	private int[] edgeTo;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int s;
	[LineNumberTable(new byte[]
	{
		11,
		105,
		127,
		7,
		106,
		105,
		170
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.marked[num] = true;
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num2])
			{
				this.edgeTo[num2] = num;
				this.dfs(digraph, num2);
			}
		}
	}
	[LineNumberTable(77)]
	public virtual bool hasPathTo(int i)
	{
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		113,
		113,
		103,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DepthFirstDirectedPaths(Digraph d, int i)
	{
		this.marked = new bool[d.V()];
		this.edgeTo = new int[d.V()];
		this.s = i;
		this.dfs(d, i);
	}
	[LineNumberTable(new byte[]
	{
		39,
		107,
		102,
		107,
		44,
		139,
		113
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (int num = i; num != this.s; num = this.edgeTo[num])
		{
			stack.push(Integer.valueOf(num));
		}
		stack.push(Integer.valueOf(this.s));
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		51,
		110,
		167,
		105,
		136,
		112,
		109,
		127,
		4,
		127,
		12,
		110,
		159,
		3,
		199,
		255,
		4,
		53,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		int num = Integer.parseInt(strarr[1]);
		DepthFirstDirectedPaths depthFirstDirectedPaths = new DepthFirstDirectedPaths(digraph, num);
		for (int j = 0; j < digraph.V(); j++)
		{
			if (depthFirstDirectedPaths.hasPathTo(j))
			{
				StdOut.printf("%d to %d:  ", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
				Iterator iterator = depthFirstDirectedPaths.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					int num2 = ((Integer)iterator.Current).intValue();
					if (num2 == num)
					{
						StdOut.print(num2);
					}
					else
					{
						StdOut.print(new StringBuilder().append("-").append(num2).toString());
					}
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d:  not connected\n", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DepthFirstOrder : java.lang.Object
{
	private bool[] marked;
	private int[] pre;
	private int[] post;
	[Signature("LQueue<Ljava/lang/Integer;>;")]
	private global::Queue preorder;
	[Signature("LQueue<Ljava/lang/Integer;>;")]
	private global::Queue postorder;
	private int preCounter;
	private int postCounter;
	[LineNumberTable(new byte[]
	{
		42,
		105,
		123,
		113,
		127,
		7,
		106,
		170,
		113,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.marked[num] = true;
		int[] arg_23_0 = this.pre;
		int num2 = this.preCounter;
		int arg_23_2 = num2;
		this.preCounter = num2 + 1;
		arg_23_0[num] = arg_23_2;
		this.preorder.enqueue(Integer.valueOf(num));
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num3 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num3])
			{
				this.dfs(digraph, num3);
			}
		}
		this.postorder.enqueue(Integer.valueOf(num));
		int[] arg_9A_0 = this.post;
		num2 = this.postCounter;
		int arg_9A_2 = num2;
		this.postCounter = num2 + 1;
		arg_9A_0[num] = arg_9A_2;
	}
	[LineNumberTable(new byte[]
	{
		56,
		105,
		123,
		113,
		127,
		2,
		104,
		107,
		137,
		98,
		113,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		this.marked[num] = true;
		int[] arg_23_0 = this.pre;
		int num2 = this.preCounter;
		int arg_23_2 = num2;
		this.preCounter = num2 + 1;
		arg_23_0[num] = arg_23_2;
		this.preorder.enqueue(Integer.valueOf(num));
		Iterator iterator = edgeWeightedDigraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			int num3 = directedEdge.to();
			if (!this.marked[num3])
			{
				this.dfs(edgeWeightedDigraph, num3);
			}
		}
		this.postorder.enqueue(Integer.valueOf(num));
		int[] arg_9F_0 = this.post;
		num2 = this.postCounter;
		int arg_9F_2 = num2;
		this.postCounter = num2 + 1;
		arg_9F_0[num] = arg_9F_2;
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable post()
	{
		return this.postorder;
	}
	[LineNumberTable(134)]
	public virtual int post(int i)
	{
		return this.post[i];
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable pre()
	{
		return this.preorder;
	}
	[LineNumberTable(125)]
	public virtual int pre(int i)
	{
		return this.pre[i];
	}
	[LineNumberTable(new byte[]
	{
		16,
		104,
		113,
		113,
		107,
		107,
		113,
		107,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DepthFirstOrder(Digraph d)
	{
		this.pre = new int[d.V()];
		this.post = new int[d.V()];
		this.postorder = new global::Queue();
		this.preorder = new global::Queue();
		this.marked = new bool[d.V()];
		for (int i = 0; i < d.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(d, i);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		108,
		102,
		127,
		6,
		110
	}), Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable reversePost()
	{
		global::Stack stack = new global::Stack();
		Iterator iterator = this.postorder.iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			stack.push(Integer.valueOf(i));
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		30,
		104,
		113,
		113,
		107,
		107,
		113,
		107,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DepthFirstOrder(EdgeWeightedDigraph ewd)
	{
		this.pre = new int[ewd.V()];
		this.post = new int[ewd.V()];
		this.postorder = new global::Queue();
		this.preorder = new global::Queue();
		this.marked = new bool[ewd.V()];
		for (int i = 0; i < ewd.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(ewd, i);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		119,
		98,
		127,
		6,
		106,
		106,
		130,
		198,
		98,
		127,
		6,
		106,
		106,
		130,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Digraph digraph)
	{
		int num = 0;
		Iterator iterator = this.post().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			if (this.post(i) != num)
			{
				StdOut.println("post(v) and post() inconsistent");
				return false;
			}
			num++;
		}
		num = 0;
		iterator = this.pre().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			if (this.pre(i) != num)
			{
				StdOut.println("pre(v) and pre() inconsistent");
				return false;
			}
			num++;
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		82,
		110,
		135,
		103,
		106,
		106,
		107,
		63,
		24,
		198,
		106,
		127,
		10,
		159,
		3,
		133,
		106,
		127,
		10,
		159,
		3,
		133,
		106,
		127,
		10,
		159,
		3,
		167
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		DepthFirstOrder depthFirstOrder = new DepthFirstOrder(digraph);
		StdOut.println("   v  pre post");
		StdOut.println("--------------");
		for (int j = 0; j < digraph.V(); j++)
		{
			StdOut.printf("%4d %4d %4d\n", new object[]
			{
				Integer.valueOf(j),
				Integer.valueOf(depthFirstOrder.pre(j)),
				Integer.valueOf(depthFirstOrder.post(j))
			});
		}
		StdOut.print("Preorder:  ");
		Iterator iterator = depthFirstOrder.pre().iterator();
		while (iterator.MoveNext())
		{
			int i2 = ((Integer)iterator.Current).intValue();
			StdOut.print(new StringBuilder().append(i2).append(" ").toString());
		}
		StdOut.println();
		StdOut.print("Postorder: ");
		iterator = depthFirstOrder.post().iterator();
		while (iterator.MoveNext())
		{
			int i2 = ((Integer)iterator.Current).intValue();
			StdOut.print(new StringBuilder().append(i2).append(" ").toString());
		}
		StdOut.println();
		StdOut.print("Reverse postorder: ");
		iterator = depthFirstOrder.reversePost().iterator();
		while (iterator.MoveNext())
		{
			int i2 = ((Integer)iterator.Current).intValue();
			StdOut.print(new StringBuilder().append(i2).append(" ").toString());
		}
		StdOut.println();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DepthFirstPaths : java.lang.Object
{
	private bool[] marked;
	private int[] edgeTo;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int s;
	[LineNumberTable(new byte[]
	{
		14,
		105,
		127,
		7,
		106,
		105,
		170
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Graph graph, int num)
	{
		this.marked[num] = true;
		Iterator iterator = graph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num2])
			{
				this.edgeTo[num2] = num;
				this.dfs(graph, num2);
			}
		}
	}
	[LineNumberTable(79)]
	public virtual bool hasPathTo(int i)
	{
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		5,
		104,
		103,
		113,
		113,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DepthFirstPaths(Graph g, int i)
	{
		this.s = i;
		this.edgeTo = new int[g.V()];
		this.marked = new bool[g.V()];
		this.dfs(g, i);
	}
	[LineNumberTable(new byte[]
	{
		40,
		107,
		102,
		107,
		44,
		139,
		113
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (int num = i; num != this.s; num = this.edgeTo[num])
		{
			stack.push(Integer.valueOf(num));
		}
		stack.push(Integer.valueOf(this.s));
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		52,
		110,
		103,
		105,
		136,
		112,
		109,
		127,
		4,
		127,
		12,
		110,
		159,
		3,
		199,
		255,
		4,
		53,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph graph = new Graph(i);
		int num = Integer.parseInt(strarr[1]);
		DepthFirstPaths depthFirstPaths = new DepthFirstPaths(graph, num);
		for (int j = 0; j < graph.V(); j++)
		{
			if (depthFirstPaths.hasPathTo(j))
			{
				StdOut.printf("%d to %d:  ", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
				Iterator iterator = depthFirstPaths.pathTo(j).iterator();
				while (iterator.MoveNext())
				{
					int num2 = ((Integer)iterator.Current).intValue();
					if (num2 == num)
					{
						StdOut.print(num2);
					}
					else
					{
						StdOut.print(new StringBuilder().append("-").append(num2).toString());
					}
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d:  not connected\n", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(j)
				});
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DepthFirstSearch : java.lang.Object
{
	private bool[] marked;
	private int count;
	[LineNumberTable(new byte[]
	{
		5,
		110,
		105,
		127,
		7,
		106,
		170
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Graph graph, int num)
	{
		this.count++;
		this.marked[num] = true;
		Iterator iterator = graph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num2])
			{
				this.dfs(graph, num2);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		104,
		113,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DepthFirstSearch(Graph g, int i)
	{
		this.marked = new bool[g.V()];
		this.dfs(g, i);
	}
	[LineNumberTable(70)]
	public virtual bool marked(int i)
	{
		return this.marked[i];
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(new byte[]
	{
		35,
		110,
		103,
		105,
		104,
		109,
		106,
		31,
		1,
		232,
		69,
		101,
		122,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph graph = new Graph(i);
		int i2 = Integer.parseInt(strarr[1]);
		DepthFirstSearch depthFirstSearch = new DepthFirstSearch(graph, i2);
		for (int j = 0; j < graph.V(); j++)
		{
			if (depthFirstSearch.marked(j))
			{
				StdOut.print(new StringBuilder().append(j).append(" ").toString());
			}
		}
		StdOut.println();
		if (depthFirstSearch.count() != graph.V())
		{
			StdOut.println("NOT connected");
		}
		else
		{
			StdOut.println("connected");
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Digraph : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int V;
	private int E;
	[Signature("[LBag<Ljava/lang/Integer;>;")]
	private Bag[] adj;
	public virtual int V()
	{
		return this.V;
	}
	[LineNumberTable(new byte[]
	{
		108,
		120
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		if (i < 0 || i >= this.V)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.adj[i];
	}
	[LineNumberTable(new byte[]
	{
		31,
		136,
		108,
		121,
		118,
		107,
		45,
		166,
		103,
		116,
		102,
		103,
		104,
		233,
		61,
		239,
		72,
		2,
		97,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Digraph(In i)
	{
		try
		{
			this.V = i.readInt();
			if (this.V < 0)
			{
				string arg_27_0 = "Number of vertices in a Digraph must be nonnegative";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_27_0);
			}
			this.adj = (Bag[])new Bag[this.V];
			int j;
			for (j = 0; j < this.V; j++)
			{
				this.adj[j] = new Bag();
			}
			j = i.readInt();
			if (j < 0)
			{
				string arg_76_0 = "Number of edges in a Digraph must be nonnegative";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_76_0);
			}
			for (int k = 0; k < j; k++)
			{
				int i2 = i.readInt();
				int i3 = i.readInt();
				this.addEdge(i2, i3);
			}
		}
		catch (NoSuchElementException arg_A2_0)
		{
			goto IL_A6;
		}
		return;
		IL_A6:
		string arg_B6_0 = "Invalid input format in Digraph constructor";
		Throwable.__<suppressFillInStackTrace>();
		throw new InputMismatchException(arg_B6_0);
	}
	[LineNumberTable(new byte[]
	{
		95,
		127,
		42,
		127,
		42,
		115,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(int i1, int i2)
	{
		if (i1 < 0 || i1 >= this.V)
		{
			string arg_43_0 = new StringBuilder().append("vertex ").append(i1).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_43_0);
		}
		if (i2 < 0 || i2 >= this.V)
		{
			string arg_8C_0 = new StringBuilder().append("vertex ").append(i2).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_8C_0);
		}
		this.adj[i1].add(Integer.valueOf(i2));
		this.E++;
	}
	[LineNumberTable(new byte[]
	{
		12,
		104,
		116,
		103,
		103,
		113,
		102,
		45,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Digraph(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices in a Digraph must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		this.adj = (Bag[])new Bag[i];
		for (int j = 0; j < i; j++)
		{
			this.adj[j] = new Bag();
		}
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		57,
		110,
		108,
		142,
		102,
		127,
		9,
		143,
		127,
		2,
		246,
		57,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Digraph(Digraph d) : this(d.V())
	{
		this.E = d.E();
		for (int i = 0; i < d.V(); i++)
		{
			global::Stack stack = new global::Stack();
			Iterator iterator = d.adj[i].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				stack.push(Integer.valueOf(i2));
			}
			iterator = stack.iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				this.adj[i].add(Integer.valueOf(i2));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		117,
		108,
		107,
		127,
		7,
		10,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Digraph reverse()
	{
		Digraph digraph = new Digraph(this.V);
		for (int i = 0; i < this.V; i++)
		{
			Iterator iterator = this.adj(i).iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				digraph.addEdge(i2, i);
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		69,
		102,
		107,
		127,
		34,
		110,
		127,
		1,
		127,
		9,
		159,
		4,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		string property = System.getProperty("line.separator");
		stringBuilder.append(new StringBuilder().append(this.V).append(" vertices, ").append(this.E).append(" edges ").append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(java.lang.String.format("%d: ", new object[]
			{
				Integer.valueOf(i)
			}));
			Iterator iterator = this.adj[i].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				stringBuilder.append(java.lang.String.format("%d ", new object[]
				{
					Integer.valueOf(i2)
				}));
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		86,
		110,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph obj = new Digraph(i);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DigraphGenerator : java.lang.Object
{
	[EnclosingMethod("DigraphGenerator", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("DigraphGenerator.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.lang.Comparable"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static | Modifiers.Final), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LDigraphGenerator$Edge;>;"), SourceFile("DigraphGenerator.java")]
	internal sealed class Edge : java.lang.Object, Comparable
	{
		private int v;
		private int w;
		[LineNumberTable(23), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Edge(int num, int num2, DigraphGenerator.1) : this(num, num2)
		{
		}
		[LineNumberTable(new byte[]
		{
			159,
			168,
			104,
			103,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Edge(int num, int num2)
		{
			this.v = num;
			this.w = num2;
		}
		[LineNumberTable(new byte[]
		{
			159,
			173,
			112,
			112,
			112,
			112
		})]
		public virtual int compareTo(DigraphGenerator.Edge edge)
		{
			if (this.v < edge.v)
			{
				return -1;
			}
			if (this.v > edge.v)
			{
				return 1;
			}
			if (this.w < edge.w)
			{
				return -1;
			}
			if (this.w > edge.w)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(23), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(object obj)
		{
			return this.compareTo((DigraphGenerator.Edge)obj);
		}
		[HideFromJava]
		int IComparable.Object;)IcompareTo(object obj)
		{
			return this.compareTo(obj);
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		123,
		116,
		103,
		102,
		105,
		103,
		103,
		106,
		110,
		104,
		136,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph simple(int i1, int i2)
	{
		if ((long)i2 > (long)i1 * (long)(i1 - 1))
		{
			string arg_15_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_15_0);
		}
		if (i2 < 0)
		{
			string arg_29_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_29_0);
		}
		Digraph digraph = new Digraph(i1);
		SET sET = new SET();
		while (digraph.E() < i2)
		{
			int num = StdRandom.uniform(i1);
			int num2 = StdRandom.uniform(i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(num, num2, null);
			if (num != num2 && !sET.contains(c))
			{
				sET.add(c);
				digraph.addEdge(num, num2);
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		56,
		126,
		116,
		103,
		102,
		103,
		112,
		102,
		105,
		103,
		104,
		107,
		111,
		104,
		141,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph dag(int i1, int i2)
	{
		if ((long)i2 > (long)i1 * (long)(i1 - 1) / 2L)
		{
			string arg_18_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		if (i2 < 0)
		{
			string arg_2C_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		Digraph digraph = new Digraph(i1);
		SET sET = new SET();
		int[] array = new int[i1];
		for (int j = 0; j < i1; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		while (digraph.E() < i2)
		{
			int j = StdRandom.uniform(i1);
			int num = StdRandom.uniform(i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(j, num, null);
			if (j < num && !sET.contains(c))
			{
				sET.add(c);
				digraph.addEdge(array[j], array[num]);
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		97,
		126,
		118,
		103,
		166,
		103,
		112,
		166,
		104,
		107,
		107,
		104,
		237,
		60,
		230,
		71,
		105,
		103,
		104,
		107,
		111,
		104,
		141,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph rootedInDAG(int i1, int i2)
	{
		if ((long)i2 > (long)i1 * (long)(i1 - 1) / 2L)
		{
			string arg_18_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		if (i2 < i1 - 1)
		{
			string arg_2E_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2E_0);
		}
		Digraph digraph = new Digraph(i1);
		SET sET = new SET();
		int[] array = new int[i1];
		for (int j = 0; j < i1; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i1 - 1; j++)
		{
			int num = StdRandom.uniform(j + 1, i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(j, num, null);
			sET.add(c);
			digraph.addEdge(array[j], array[num]);
		}
		while (digraph.E() < i2)
		{
			int j = StdRandom.uniform(i1);
			int num = StdRandom.uniform(i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(j, num, null);
			if (j < num && !sET.contains(c))
			{
				sET.add(c);
				digraph.addEdge(array[j], array[num]);
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		126,
		118,
		103,
		166,
		103,
		112,
		166,
		104,
		107,
		107,
		104,
		237,
		60,
		230,
		71,
		105,
		103,
		104,
		107,
		111,
		104,
		141,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph rootedOutDAG(int i1, int i2)
	{
		if ((long)i2 > (long)i1 * (long)(i1 - 1) / 2L)
		{
			string arg_18_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		if (i2 < i1 - 1)
		{
			string arg_2E_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2E_0);
		}
		Digraph digraph = new Digraph(i1);
		SET sET = new SET();
		int[] array = new int[i1];
		for (int j = 0; j < i1; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i1 - 1; j++)
		{
			int num = StdRandom.uniform(j + 1, i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(num, j, null);
			sET.add(c);
			digraph.addEdge(array[num], array[j]);
		}
		while (digraph.E() < i2)
		{
			int j = StdRandom.uniform(i1);
			int num = StdRandom.uniform(i1);
			DigraphGenerator.Edge c = new DigraphGenerator.Edge(num, j, null);
			if (j < num && !sET.contains(c))
			{
				sET.add(c);
				digraph.addEdge(array[num], array[j]);
			}
		}
		return digraph;
	}
	[LineNumberTable(93)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph complete(int i)
	{
		return DigraphGenerator.simple(i, i * (i - 1));
	}
	[LineNumberTable(new byte[]
	{
		160,
		133,
		103,
		103,
		112,
		102,
		104,
		46,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph path(int i)
	{
		Digraph digraph = new Digraph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i - 1; j++)
		{
			digraph.addEdge(array[j], array[j + 1]);
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		165,
		103,
		103,
		112,
		102,
		104,
		46,
		166,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph cycle(int i)
	{
		Digraph digraph = new Digraph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i - 1; j++)
		{
			digraph.addEdge(array[j], array[j + 1]);
		}
		digraph.addEdge(array[i - 1], array[0]);
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		149,
		103,
		103,
		112,
		102,
		102,
		48,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph binaryTree(int i)
	{
		Digraph digraph = new Digraph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 1; j < i; j++)
		{
			digraph.addEdge(array[j], array[(j - 1) / 2]);
		}
		return digraph;
	}
	[LineNumberTable(134)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph tournament(int i)
	{
		return DigraphGenerator.dag(i, i * (i - 1) / 2);
	}
	[LineNumberTable(226)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph rootedInTree(int i)
	{
		return DigraphGenerator.rootedInDAG(i, i - 1);
	}
	[LineNumberTable(238)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph rootedOutTree(int i)
	{
		return DigraphGenerator.rootedOutDAG(i, i - 1);
	}
	[LineNumberTable(new byte[]
	{
		159,
		164,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DigraphGenerator()
	{
	}
	[LineNumberTable(new byte[]
	{
		26,
		114,
		112,
		103,
		102,
		102,
		100,
		105,
		232,
		61,
		38,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph simple(int i, double d)
	{
		if (d < (double)0f || d > (double)1f)
		{
			string arg_1C_0 = "Probability must be between 0 and 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		Digraph digraph = new Digraph(i);
		for (int j = 0; j < i; j++)
		{
			for (int k = 0; k < i; k++)
			{
				if (j != k && StdRandom.bernoulli(d))
				{
					digraph.addEdge(j, k);
				}
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		194,
		104,
		112,
		104,
		112,
		110,
		176,
		167,
		134,
		103,
		102,
		41,
		230,
		69,
		137,
		99,
		109,
		45,
		232,
		70,
		105,
		99,
		104,
		52,
		168,
		167,
		107,
		109,
		108,
		104,
		240,
		60,
		232,
		72,
		107,
		109,
		108,
		104,
		240,
		60,
		232,
		39,
		233,
		97,
		108,
		103,
		104,
		107,
		120,
		104,
		137,
		133
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Digraph strong(int i1, int i2, int i3)
	{
		if (i3 >= i1 || i3 <= 0)
		{
			string arg_12_0 = "Number of components must be between 1 and V";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_12_0);
		}
		if (i2 <= 2 * (i1 - i3))
		{
			string arg_2A_0 = "Number of edges must be at least 2(V-c)";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2A_0);
		}
		if ((long)i2 > (long)i1 * (long)(i1 - 1) / 2L)
		{
			string arg_48_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_48_0);
		}
		Digraph digraph = new Digraph(i1);
		SET sET = new SET();
		int[] array = new int[i1];
		for (int j = 0; j < i1; j++)
		{
			array[j] = StdRandom.uniform(i3);
		}
		for (int j = 0; j < i3; j++)
		{
			int num = 0;
			for (int k = 0; k < digraph.V(); k++)
			{
				if (array[k] == j)
				{
					num++;
				}
			}
			int[] array2 = new int[num];
			int num2 = 0;
			for (int l = 0; l < i1; l++)
			{
				if (array[l] == j)
				{
					int[] arg_CC_0 = array2;
					int arg_CC_1 = num2;
					num2++;
					arg_CC_0[arg_CC_1] = l;
				}
			}
			StdRandom.shuffle(array2);
			for (int l = 0; l < num - 1; l++)
			{
				int num3 = StdRandom.uniform(l + 1, num);
				DigraphGenerator.Edge c = new DigraphGenerator.Edge(num3, l, null);
				sET.add(c);
				digraph.addEdge(array2[num3], array2[l]);
			}
			for (int l = 0; l < num - 1; l++)
			{
				int num3 = StdRandom.uniform(l + 1, num);
				DigraphGenerator.Edge c = new DigraphGenerator.Edge(l, num3, null);
				sET.add(c);
				digraph.addEdge(array2[l], array2[num3]);
			}
		}
		while (digraph.E() < i2)
		{
			int j = StdRandom.uniform(i1);
			int num = StdRandom.uniform(i1);
			DigraphGenerator.Edge c2 = new DigraphGenerator.Edge(j, num, null);
			if (!sET.contains(c2) && j != num && array[j] <= array[num])
			{
				sET.add(c2);
				digraph.addEdge(j, num);
			}
		}
		return digraph;
	}
	[LineNumberTable(new byte[]
	{
		161,
		7,
		105,
		105,
		111,
		112,
		138,
		111,
		113,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		113,
		138,
		111,
		113,
		138,
		111,
		113,
		138,
		111,
		112,
		138,
		111,
		112,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int i = Integer.parseInt(strarr[1]);
		System.@out.println("complete graph");
		System.@out.println(DigraphGenerator.complete(num));
		System.@out.println();
		System.@out.println("simple");
		System.@out.println(DigraphGenerator.simple(num, i));
		System.@out.println();
		System.@out.println("path");
		System.@out.println(DigraphGenerator.path(num));
		System.@out.println();
		System.@out.println("cycle");
		System.@out.println(DigraphGenerator.cycle(num));
		System.@out.println();
		System.@out.println("binary tree");
		System.@out.println(DigraphGenerator.binaryTree(num));
		System.@out.println();
		System.@out.println("tournament");
		System.@out.println(DigraphGenerator.tournament(num));
		System.@out.println();
		System.@out.println("DAG");
		System.@out.println(DigraphGenerator.dag(num, i));
		System.@out.println();
		System.@out.println("rooted-in DAG");
		System.@out.println(DigraphGenerator.rootedInDAG(num, i));
		System.@out.println();
		System.@out.println("rooted-out DAG");
		System.@out.println(DigraphGenerator.rootedOutDAG(num, i));
		System.@out.println();
		System.@out.println("rooted-in tree");
		System.@out.println(DigraphGenerator.rootedInTree(num));
		System.@out.println();
		System.@out.println("rooted-out DAG");
		System.@out.println(DigraphGenerator.rootedOutTree(num));
		System.@out.println();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DijkstraAllPairsSP : java.lang.Object
{
	private DijkstraSP[] all;
	[LineNumberTable(75)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double dist(int i1, int i2)
	{
		return this.all[i1].distTo(i2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		104,
		113,
		107,
		47,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DijkstraAllPairsSP(EdgeWeightedDigraph ewd)
	{
		this.all = new DijkstraSP[ewd.V()];
		for (int i = 0; i < ewd.V(); i++)
		{
			this.all[i] = new DijkstraSP(ewd, i);
		}
	}
	[LineNumberTable(53), Signature("(II)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable path(int i1, int i2)
	{
		return this.all[i1].pathTo(i2);
	}
	[LineNumberTable(64)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool hasPath(int i1, int i2)
	{
		return this.dist(i1, i2) < double.PositiveInfinity;
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DijkstraSP : java.lang.Object
{
	private double[] distTo;
	private DirectedEdge[] edgeTo;
	[Signature("LIndexMinPQ<Ljava/lang/Double;>;")]
	private IndexMinPQ pq;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		14,
		104,
		127,
		1,
		109,
		191,
		18,
		113,
		113,
		107,
		49,
		134,
		173,
		113,
		121,
		109,
		108,
		127,
		6,
		106,
		162,
		124
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DijkstraSP(EdgeWeightedDigraph ewd, int i)
	{
		Iterator iterator = ewd.edges().iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			if (directedEdge.weight() < (double)0f)
			{
				string arg_5E_0 = new StringBuilder().append("edge ").append(directedEdge).append(" has negative weight").toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_5E_0);
			}
		}
		this.distTo = new double[ewd.V()];
		this.edgeTo = new DirectedEdge[ewd.V()];
		for (int j = 0; j < ewd.V(); j++)
		{
			this.distTo[j] = double.PositiveInfinity;
		}
		this.distTo[i] = (double)0f;
		this.pq = new IndexMinPQ(ewd.V());
		this.pq.insert(i, java.lang.Double.valueOf(this.distTo[i]));
		while (!this.pq.IsEmpty)
		{
			int j = this.pq.delMin();
			Iterator iterator2 = ewd.adj(j).iterator();
			while (iterator2.hasNext())
			{
				DirectedEdge directedEdge2 = (DirectedEdge)iterator2.next();
				this.relax(directedEdge2);
			}
		}
		if (!DijkstraSP.$assertionsDisabled && !this.check(ewd, i))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		77,
		107,
		102,
		108,
		39,
		176
	}), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable pathTo(int i)
	{
		if (!this.hasPathTo(i))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (DirectedEdge directedEdge = this.edgeTo[i]; directedEdge != null; directedEdge = this.edgeTo[directedEdge.from()])
		{
			stack.push(directedEdge);
		}
		return stack;
	}
	[LineNumberTable(107)]
	public virtual double distTo(int i)
	{
		return this.distTo[i];
	}
	[LineNumberTable(new byte[]
	{
		41,
		110,
		124,
		120,
		105,
		127,
		10,
		155
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void relax(DirectedEdge directedEdge)
	{
		int num = directedEdge.from();
		int num2 = directedEdge.to();
		if (this.distTo[num2] > this.distTo[num] + directedEdge.weight())
		{
			this.distTo[num2] = this.distTo[num] + directedEdge.weight();
			this.edgeTo[num2] = directedEdge;
			if (this.pq.contains(num2))
			{
				this.pq.decreaseKey(num2, java.lang.Double.valueOf(this.distTo[num2]));
			}
			else
			{
				this.pq.insert(num2, java.lang.Double.valueOf(this.distTo[num2]));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		92,
		127,
		1,
		109,
		111,
		228,
		69,
		121,
		111,
		130,
		107,
		102,
		125,
		111,
		226,
		60,
		230,
		73,
		110,
		127,
		3,
		105,
		123,
		127,
		16,
		130,
		229,
		57,
		233,
		75,
		110,
		111,
		105,
		104,
		107,
		122,
		127,
		15,
		226,
		57,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		Iterator iterator = edgeWeightedDigraph.edges().iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			if (directedEdge.weight() < (double)0f)
			{
				System.err.println("negative edge weight detected");
				return false;
			}
		}
		if (this.distTo[num] != (double)0f || this.edgeTo[num] != null)
		{
			System.err.println("distTo[s] and edgeTo[s] inconsistent");
			return false;
		}
		for (int i = 0; i < edgeWeightedDigraph.V(); i++)
		{
			if (i != num)
			{
				if (this.edgeTo[i] == null && this.distTo[i] != double.PositiveInfinity)
				{
					System.err.println("distTo[] and edgeTo[] inconsistent");
					return false;
				}
			}
		}
		for (int i = 0; i < edgeWeightedDigraph.V(); i++)
		{
			Iterator iterator2 = edgeWeightedDigraph.adj(i).iterator();
			while (iterator2.hasNext())
			{
				DirectedEdge directedEdge2 = (DirectedEdge)iterator2.next();
				int num2 = directedEdge2.to();
				if (this.distTo[i] + directedEdge2.weight() < this.distTo[num2])
				{
					System.err.println(new StringBuilder().append("edge ").append(directedEdge2).append(" not relaxed").toString());
					return false;
				}
			}
		}
		for (int i = 0; i < edgeWeightedDigraph.V(); i++)
		{
			if (this.edgeTo[i] != null)
			{
				DirectedEdge directedEdge = this.edgeTo[i];
				int num3 = directedEdge.from();
				if (i != directedEdge.to())
				{
					return false;
				}
				if (this.distTo[num3] + directedEdge.weight() != this.distTo[i])
				{
					System.err.println(new StringBuilder().append("edge ").append(directedEdge).append(" on shortest path not tight").toString());
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(117)]
	public virtual bool hasPathTo(int i)
	{
		return this.distTo[i] < double.PositiveInfinity;
	}
	[LineNumberTable(new byte[]
	{
		160,
		78,
		110,
		103,
		169,
		200,
		112,
		109,
		127,
		20,
		106,
		127,
		7,
		191,
		3,
		167,
		255,
		4,
		53,
		235,
		78
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(i);
		int i2 = Integer.parseInt(strarr[1]);
		DijkstraSP dijkstraSP = new DijkstraSP(edgeWeightedDigraph, i2);
		for (int j = 0; j < edgeWeightedDigraph.V(); j++)
		{
			if (dijkstraSP.hasPathTo(j))
			{
				StdOut.printf("%d to %d (%.2f)  ", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j),
					java.lang.Double.valueOf(dijkstraSP.distTo(j))
				});
				if (dijkstraSP.hasPathTo(j))
				{
					Iterator iterator = dijkstraSP.pathTo(j).iterator();
					while (iterator.MoveNext())
					{
						DirectedEdge obj = (DirectedEdge)iterator.Current;
						StdOut.print(new StringBuilder().append(obj).append("   ").toString());
					}
				}
				StdOut.println();
			}
			else
			{
				StdOut.printf("%d to %d         no path\n", new object[]
				{
					Integer.valueOf(i2),
					Integer.valueOf(j)
				});
			}
		}
	}
	[LineNumberTable(51)]
	static DijkstraSP()
	{
		DijkstraSP.$assertionsDisabled = !ClassLiteral<DijkstraSP>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DirectedCycle : java.lang.Object
{
	private bool[] marked;
	private int[] edgeTo;
	private bool[] onStack;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack cycle;
	[LineNumberTable(new byte[]
	{
		14,
		105,
		105,
		191,
		10,
		169,
		106,
		105,
		202,
		106,
		107,
		102,
		49,
		171,
		113,
		214,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.onStack[num] = true;
		this.marked[num] = true;
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (this.cycle != null)
			{
				return;
			}
			if (!this.marked[num2])
			{
				this.edgeTo[num2] = num;
				this.dfs(digraph, num2);
			}
			else if (this.onStack[num2])
			{
				this.cycle = new global::Stack();
				for (int num3 = num; num3 != num2; num3 = this.edgeTo[num3])
				{
					this.cycle.push(Integer.valueOf(num3));
				}
				this.cycle.push(Integer.valueOf(num2));
				this.cycle.push(Integer.valueOf(num));
			}
		}
		this.onStack[num] = false;
	}
	public virtual bool hasCycle()
	{
		return this.cycle != null;
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable cycle()
	{
		return this.cycle;
	}
	[LineNumberTable(new byte[]
	{
		4,
		104,
		113,
		113,
		113,
		107,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DirectedCycle(Digraph d)
	{
		this.marked = new bool[d.V()];
		this.onStack = new bool[d.V()];
		this.edgeTo = new int[d.V()];
		for (int i = 0; i < d.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(d, i);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		62,
		139,
		100,
		127,
		6,
		102,
		132,
		100,
		127,
		9,
		226,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Digraph digraph)
	{
		if (this.hasCycle())
		{
			int num = -1;
			int num2 = -1;
			Iterator iterator = this.cycle().iterator();
			while (iterator.MoveNext())
			{
				int num3 = ((Integer)iterator.Current).intValue();
				if (num == -1)
				{
					num = num3;
				}
				num2 = num3;
			}
			if (num != num2)
			{
				System.err.printf("cycle begins with %d and ends with %d\n", new object[]
				{
					Integer.valueOf(num),
					Integer.valueOf(num2)
				});
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		83,
		110,
		135,
		103,
		104,
		106,
		127,
		7,
		159,
		3,
		199,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph d = new Digraph(i);
		DirectedCycle directedCycle = new DirectedCycle(d);
		if (directedCycle.hasCycle())
		{
			StdOut.print("Cycle: ");
			Iterator iterator = directedCycle.cycle().iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
		else
		{
			StdOut.println("No cycle");
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class DirectedDFS : java.lang.Object
{
	private bool[] marked;
	private int count;
	[LineNumberTable(new byte[]
	{
		18,
		110,
		105,
		127,
		7,
		148
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.count++;
		this.marked[num] = true;
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num2])
			{
				this.dfs(digraph, num2);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		10,
		104,
		113,
		127,
		1,
		148
	}), Signature("(LDigraph;Ljava/lang/Iterable<Ljava/lang/Integer;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DirectedDFS(Digraph d, Iterable i)
	{
		this.marked = new bool[d.V()];
		Iterator iterator = i.iterator();
		while (iterator.MoveNext())
		{
			int num = ((Integer)iterator.Current).intValue();
			if (!this.marked[num])
			{
				this.dfs(d, num);
			}
		}
	}
	[LineNumberTable(82)]
	public virtual bool marked(int i)
	{
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		104,
		113,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DirectedDFS(Digraph d, int i)
	{
		this.marked = new bool[d.V()];
		this.dfs(d, i);
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(new byte[]
	{
		51,
		110,
		167,
		102,
		103,
		106,
		13,
		230,
		70,
		169,
		109,
		63,
		12,
		168,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		Bag bag = new Bag();
		for (int j = 1; j < strarr.Length; j++)
		{
			int k = Integer.parseInt(strarr[j]);
			bag.add(Integer.valueOf(k));
		}
		DirectedDFS directedDFS = new DirectedDFS(digraph, bag);
		for (int k = 0; k < digraph.V(); k++)
		{
			if (directedDFS.marked(k))
			{
				StdOut.print(new StringBuilder().append(k).append(" ").toString());
			}
		}
		StdOut.println();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DirectedEdge : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int v;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int w;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double weight;
	public virtual int from()
	{
		return this.v;
	}
	public virtual int to()
	{
		return this.w;
	}
	public virtual double weight()
	{
		return this.weight;
	}
	[LineNumberTable(new byte[]
	{
		159,
		179,
		104,
		116,
		116,
		121,
		103,
		103,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public DirectedEdge(int i1, int i2, double d)
	{
		if (i1 < 0)
		{
			string arg_16_0 = "Vertex names must be nonnegative integers";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_16_0);
		}
		if (i2 < 0)
		{
			string arg_2A_0 = "Vertex names must be nonnegative integers";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_2A_0);
		}
		if (java.lang.Double.isNaN(d))
		{
			string arg_43_0 = "Weight is NaN";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_43_0);
		}
		this.v = i1;
		this.w = i2;
		this.weight = d;
	}
	[LineNumberTable(75)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.v).append("->").append(this.w).append(" ").append(java.lang.String.format("%5.2f", new object[]
		{
			java.lang.Double.valueOf(this.weight)
		})).toString();
	}
	[LineNumberTable(new byte[]
	{
		32,
		115,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		DirectedEdge obj = new DirectedEdge(12, 23, 3.14);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DoublingRatio : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		159,
		183,
		102,
		103,
		102,
		43,
		166,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double timeTrial(int i)
	{
		int num = 1000000;
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = StdRandom.uniform(-num, num);
		}
		Stopwatch stopwatch = new Stopwatch();
		ThreeSum.count(array);
		return stopwatch.elapsedTime();
	}
	[LineNumberTable(31)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private DoublingRatio()
	{
	}
	[LineNumberTable(new byte[]
	{
		7,
		105,
		102,
		104,
		127,
		14,
		226,
		61
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double num = DoublingRatio.timeTrial(125);
		int num2 = 250;
		while (true)
		{
			double num3 = DoublingRatio.timeTrial(num2);
			StdOut.printf("%6d %7.1f %5.1f\n", new object[]
			{
				Integer.valueOf(num2),
				java.lang.Double.valueOf(num3),
				java.lang.Double.valueOf(num3 / num)
			});
			num = num3;
			num2 += num2;
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class DoublingTest : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		159,
		182,
		102,
		103,
		102,
		43,
		166,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double timeTrial(int i)
	{
		int num = 1000000;
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = StdRandom.uniform(-num, num);
		}
		Stopwatch stopwatch = new Stopwatch();
		ThreeSum.count(array);
		return stopwatch.elapsedTime();
	}
	[LineNumberTable(30)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private DoublingTest()
	{
	}
	[LineNumberTable(new byte[]
	{
		5,
		102,
		104,
		31,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 250;
		while (true)
		{
			double d = DoublingTest.timeTrial(num);
			StdOut.printf("%7d %5.1f\n", new object[]
			{
				Integer.valueOf(num),
				java.lang.Double.valueOf(d)
			});
			num += num;
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.awt;
using java.awt.@event;
using java.awt.geom;
using java.awt.image;
using java.io;
using java.lang;
using java.net;
using java.util;
using javax.imageio;
using javax.swing;
using System;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.awt.event.ActionListener",
	"java.awt.event.MouseListener",
	"java.awt.event.MouseMotionListener",
	"java.awt.event.KeyListener"
})]
public sealed class Draw : java.lang.Object, ActionListener, EventListener, MouseListener, MouseMotionListener, KeyListener
{
	internal static Color __<>BLACK;
	internal static Color __<>BLUE;
	internal static Color __<>CYAN;
	internal static Color __<>DARK_GRAY;
	internal static Color __<>GRAY;
	internal static Color __<>GREEN;
	internal static Color __<>LIGHT_GRAY;
	internal static Color __<>MAGENTA;
	internal static Color __<>ORANGE;
	internal static Color __<>PINK;
	internal static Color __<>RED;
	internal static Color __<>WHITE;
	internal static Color __<>YELLOW;
	internal static Color __<>BOOK_BLUE;
	internal static Color __<>BOOK_RED;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_PEN_COLOR;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_CLEAR_COLOR;
	private const double BORDER = 0.05;
	private const double DEFAULT_XMIN = 0.0;
	private const double DEFAULT_XMAX = 1.0;
	private const double DEFAULT_YMIN = 0.0;
	private const double DEFAULT_YMAX = 1.0;
	private const int DEFAULT_SIZE = 512;
	private const double DEFAULT_PEN_RADIUS = 0.002;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Font DEFAULT_FONT;
	private Color penColor;
	private int width;
	private int height;
	private double penRadius;
	private bool defer;
	private double xmin;
	private double ymin;
	private double xmax;
	private double ymax;
	private string name;
	private object mouseLock;
	private object keyLock;
	private Font font;
	private BufferedImage offscreenImage;
	private BufferedImage onscreenImage;
	private Graphics2D offscreen;
	private Graphics2D onscreen;
	private JFrame frame;
	private bool mousePressed;
	private double mouseX;
	private double mouseY;
	[Signature("Ljava/util/LinkedList<Ljava/lang/Character;>;")]
	private LinkedList keysTyped;
	[Signature("Ljava/util/TreeSet<Ljava/lang/Integer;>;")]
	private TreeSet keysDown;
	[Signature("Ljava/util/ArrayList<LDrawListener;>;")]
	private ArrayList listeners;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLACK
	{
		[HideFromJava]
		get
		{
			return Draw.__<>BLACK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLUE
	{
		[HideFromJava]
		get
		{
			return Draw.__<>BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color CYAN
	{
		[HideFromJava]
		get
		{
			return Draw.__<>CYAN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color DARK_GRAY
	{
		[HideFromJava]
		get
		{
			return Draw.__<>DARK_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GRAY
	{
		[HideFromJava]
		get
		{
			return Draw.__<>GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GREEN
	{
		[HideFromJava]
		get
		{
			return Draw.__<>GREEN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color LIGHT_GRAY
	{
		[HideFromJava]
		get
		{
			return Draw.__<>LIGHT_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color MAGENTA
	{
		[HideFromJava]
		get
		{
			return Draw.__<>MAGENTA;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color ORANGE
	{
		[HideFromJava]
		get
		{
			return Draw.__<>ORANGE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color PINK
	{
		[HideFromJava]
		get
		{
			return Draw.__<>PINK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color RED
	{
		[HideFromJava]
		get
		{
			return Draw.__<>RED;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color WHITE
	{
		[HideFromJava]
		get
		{
			return Draw.__<>WHITE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color YELLOW
	{
		[HideFromJava]
		get
		{
			return Draw.__<>YELLOW;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BOOK_BLUE
	{
		[HideFromJava]
		get
		{
			return Draw.__<>BOOK_BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BOOK_RED
	{
		[HideFromJava]
		get
		{
			return Draw.__<>BOOK_RED;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		115,
		116,
		107,
		125,
		125,
		113,
		113,
		102,
		102,
		112,
		121,
		102,
		102,
		102,
		166,
		149,
		113,
		172,
		113,
		135,
		103,
		135,
		108,
		108,
		140,
		108,
		113,
		113,
		107,
		108,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void init()
	{
		if (this.frame != null)
		{
			this.frame.setVisible(false);
		}
		this.frame = new JFrame();
		BufferedImage.__<clinit>();
		this.offscreenImage = new BufferedImage(this.width, this.height, 2);
		BufferedImage.__<clinit>();
		this.onscreenImage = new BufferedImage(this.width, this.height, 2);
		this.offscreen = this.offscreenImage.createGraphics();
		this.onscreen = this.onscreenImage.createGraphics();
		this.setXscale();
		this.setYscale();
		this.offscreen.setColor(Draw.DEFAULT_CLEAR_COLOR);
		this.offscreen.fillRect(0, 0, this.width, this.height);
		this.setPenColor();
		this.setPenRadius();
		this.setFont();
		this.clear();
		RenderingHints.__<clinit>();
		RenderingHints renderingHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		renderingHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		this.offscreen.addRenderingHints(renderingHints);
		ImageIcon.__<clinit>();
		ImageIcon image = new ImageIcon(this.onscreenImage);
		JLabel jLabel = new JLabel(image);
		jLabel.addMouseListener(this);
		jLabel.addMouseMotionListener(this);
		this.frame.setContentPane(jLabel);
		this.frame.addKeyListener(this);
		this.frame.setResizable(false);
		this.frame.setDefaultCloseOperation(2);
		this.frame.setTitle(this.name);
		this.frame.setJMenuBar(this.createMenuBar());
		this.frame.pack();
		this.frame.requestFocusInWindow();
		this.frame.setVisible(true);
	}
	[LineNumberTable(255)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setXscale()
	{
		this.setXscale((double)0f, (double)1f);
	}
	[LineNumberTable(260)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setYscale()
	{
		this.setYscale((double)0f, (double)1f);
	}
	[LineNumberTable(339)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setPenColor()
	{
		this.setPenColor(Draw.DEFAULT_PEN_COLOR);
	}
	[LineNumberTable(316)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setPenRadius()
	{
		this.setPenRadius(0.002);
	}
	[LineNumberTable(376)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setFont()
	{
		this.setFont(Draw.DEFAULT_FONT);
	}
	[LineNumberTable(296)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void clear()
	{
		this.clear(Draw.DEFAULT_CLEAR_COLOR);
	}
	[LineNumberTable(new byte[]
	{
		160,
		122,
		102,
		107,
		104,
		107,
		103,
		151,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private JMenuBar createMenuBar()
	{
		JMenuBar jMenuBar = new JMenuBar();
		JMenu jMenu = new JMenu("File");
		jMenuBar.add(jMenu);
		JMenuItem jMenuItem = new JMenuItem(" Save...   ");
		jMenuItem.addActionListener(this);
		jMenuItem.setAccelerator(KeyStroke.getKeyStroke(83, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		jMenu.add(jMenuItem);
		return jMenuBar;
	}
	public virtual void setXscale(double d1, double d2)
	{
		double num = d2 - d1;
		this.xmin = d1 - 0.05 * num;
		this.xmax = d2 + 0.05 * num;
	}
	public virtual void setYscale(double d1, double d2)
	{
		double num = d2 - d1;
		this.ymin = d1 - 0.05 * num;
		this.ymax = d2 + 0.05 * num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		188,
		108,
		121,
		113,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void clear(Color c)
	{
		this.offscreen.setColor(c);
		this.offscreen.fillRect(0, 0, this.width, this.height);
		this.offscreen.setColor(this.penColor);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		229,
		105,
		117,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void draw()
	{
		if (this.defer)
		{
			return;
		}
		this.onscreen.drawImage(this.offscreenImage, 0, 0, null);
		this.frame.repaint();
	}
	[LineNumberTable(new byte[]
	{
		160,
		210,
		121,
		115,
		143,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setPenRadius(double d)
	{
		if (d < (double)0f)
		{
			string arg_13_0 = "pen radius must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		this.penRadius = d * 512.0;
		BasicStroke stroke = new BasicStroke((float)this.penRadius, 1, 1);
		this.offscreen.setStroke(stroke);
	}
	[LineNumberTable(new byte[]
	{
		160,
		232,
		103,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setPenColor(Color c)
	{
		this.penColor = c;
		this.offscreen.setColor(this.penColor);
	}
	public virtual void setFont(Font f)
	{
		this.font = f;
	}
	private double scaleX(double num)
	{
		return (double)this.width * (num - this.xmin) / (this.xmax - this.xmin);
	}
	private double scaleY(double num)
	{
		return (double)this.height * (this.ymax - num) / (this.ymax - this.ymin);
	}
	[LineNumberTable(new byte[]
	{
		161,
		37,
		127,
		12
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void pixel(double num, double num2)
	{
		this.offscreen.fillRect((int)java.lang.Math.round(this.scaleX(num)), (int)java.lang.Math.round(this.scaleY(num2)), 1, 1);
	}
	[LineNumberTable(287)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private double factorX(double num)
	{
		return num * (double)this.width / java.lang.Math.abs(this.xmax - this.xmin);
	}
	[LineNumberTable(288)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private double factorY(double num)
	{
		return num * (double)this.height / java.lang.Math.abs(this.ymax - this.ymin);
	}
	[LineNumberTable(new byte[]
	{
		162,
		19,
		167,
		140,
		103,
		124,
		195,
		108,
		108,
		127,
		19,
		167
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Image getImage(string text)
	{
		ImageIcon imageIcon = new ImageIcon(text);
		if (imageIcon != null)
		{
			if (imageIcon.getImageLoadStatus() == 8)
			{
				goto IL_39;
			}
		}
		try
		{
			URL uRL = new URL(text);
			imageIcon = new ImageIcon(uRL);
		}
		catch (System.Exception arg_26_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_26_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		IL_39:
		if (imageIcon == null || imageIcon.getImageLoadStatus() != 8)
		{
			URL uRL = ClassLiteral<Draw>.Value.getResource(text);
			if (uRL == null)
			{
				string arg_7D_0 = new StringBuilder().append("image ").append(text).append(" not found").toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_7D_0);
			}
			imageIcon = new ImageIcon(uRL);
		}
		return imageIcon.getImage();
	}
	[LineNumberTable(new byte[]
	{
		162,
		151,
		113,
		108,
		106,
		106,
		104,
		104,
		127,
		2,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void text(double d1, double d2, string str)
	{
		this.offscreen.setFont(this.font);
		FontMetrics fontMetrics = this.offscreen.getFontMetrics();
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		this.offscreen.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		223,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void show()
	{
		this.defer = false;
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		244,
		103,
		177,
		114,
		127,
		1,
		241,
		69,
		117,
		141,
		127,
		12,
		114,
		223,
		9,
		109,
		126,
		107,
		162,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void save(string str)
	{
		File output = new File(str);
		string text = java.lang.String.instancehelper_substring(str, java.lang.String.instancehelper_lastIndexOf(str, 46) + 1);
		if (java.lang.String.instancehelper_equals(java.lang.String.instancehelper_toLowerCase(text), "png"))
		{
			IOException ex;
			try
			{
				ImageIO.write(this.offscreenImage, text, output);
			}
			catch (IOException arg_3D_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_3D_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_47;
			}
			return;
			IL_47:
			IOException this2 = ex;
			Throwable.instancehelper_printStackTrace(this2);
		}
		else if (java.lang.String.instancehelper_equals(java.lang.String.instancehelper_toLowerCase(text), "jpg"))
		{
			WritableRaster raster = this.offscreenImage.getRaster();
			WritableRaster raster2 = raster.createWritableChild(0, 0, this.width, this.height, 0, 0, new int[]
			{
				0,
				1,
				2
			});
			DirectColorModel directColorModel = (DirectColorModel)this.offscreenImage.getColorModel();
			DirectColorModel.__<clinit>();
			DirectColorModel cm = new DirectColorModel(directColorModel.getPixelSize(), directColorModel.getRedMask(), directColorModel.getGreenMask(), directColorModel.getBlueMask());
			BufferedImage im = new BufferedImage(cm, raster2, false, null);
			IOException ex2;
			try
			{
				ImageIO.write(im, text, output);
			}
			catch (IOException arg_FE_0)
			{
				ex2 = ByteCodeHelper.MapException<IOException>(arg_FE_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_109;
			}
			goto IL_118;
			IL_109:
			IOException this3 = ex2;
			Throwable.instancehelper_printStackTrace(this3);
			IL_118:;
		}
		else
		{
			System.@out.println(new StringBuilder().append("Invalid image file type: ").append(text).toString());
		}
	}
	private double userX(double num)
	{
		return this.xmin + num * (this.xmax - this.xmin) / (double)this.width;
	}
	private double userY(double num)
	{
		return this.ymax - num * (this.ymax - this.ymin) / (double)this.height;
	}
	[LineNumberTable(new byte[]
	{
		102,
		232,
		18,
		107,
		235,
		70,
		231,
		69,
		171,
		107,
		235,
		74,
		171,
		103,
		108,
		172,
		107,
		171,
		235,
		73,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Draw(string str)
	{
		this.width = 512;
		this.height = 512;
		this.defer = false;
		this.name = "Draw";
		this.mouseLock = new java.lang.Object();
		this.keyLock = new java.lang.Object();
		this.frame = new JFrame();
		this.mousePressed = false;
		this.mouseX = (double)0f;
		this.mouseY = (double)0f;
		this.keysTyped = new LinkedList();
		this.keysDown = new TreeSet();
		this.listeners = new ArrayList();
		this.name = str;
		this.init();
	}
	[LineNumberTable(new byte[]
	{
		161,
		164,
		121,
		106,
		106,
		116,
		116,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void square(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		182,
		121,
		106,
		106,
		116,
		116,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void filledSquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		65,
		121,
		106,
		106,
		116,
		116,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void circle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		145,
		121,
		122,
		106,
		106,
		116,
		116,
		124,
		127,
		24,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void arc(double d1, double d2, double d3, double d4, double d5)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "arc radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		while (d5 < d4)
		{
			d5 += 360.0;
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.draw(new Arc2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4, d4, d5 - d4, 0));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		160,
		113,
		120,
		103,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setCanvasSize(int i1, int i2)
	{
		if (i1 < 1 || i2 < 1)
		{
			string arg_12_0 = "width and height must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_12_0);
		}
		this.width = i1;
		this.height = i2;
		this.init();
	}
	[LineNumberTable(new byte[]
	{
		161,
		255,
		99,
		102,
		122,
		102,
		58,
		134,
		102,
		108,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void filledPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo((float)this.scaleX(darr1[0]), (float)this.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo((float)this.scaleX(darr1[i]), (float)this.scaleY(darr2[i]));
		}
		generalPath.closePath();
		this.offscreen.fill(generalPath);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		110,
		232,
		10,
		107,
		235,
		70,
		231,
		69,
		171,
		107,
		235,
		74,
		171,
		103,
		108,
		172,
		107,
		171,
		235,
		81,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Draw()
	{
		this.width = 512;
		this.height = 512;
		this.defer = false;
		this.name = "Draw";
		this.mouseLock = new java.lang.Object();
		this.keyLock = new java.lang.Object();
		this.frame = new JFrame();
		this.mousePressed = false;
		this.mouseX = (double)0f;
		this.mouseY = (double)0f;
		this.keysTyped = new LinkedList();
		this.keysDown = new TreeSet();
		this.listeners = new ArrayList();
		this.init();
	}
	[LineNumberTable(new byte[]
	{
		160,
		100,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setLocationOnScreen(int i1, int i2)
	{
		this.frame.setLocation(i1, i2);
	}
	public virtual double getPenRadius()
	{
		return this.penRadius;
	}
	public virtual Color getPenColor()
	{
		return this.penColor;
	}
	[LineNumberTable(new byte[]
	{
		160,
		244,
		124,
		124,
		124,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void setPenColor(int i1, int i2, int i3)
	{
		if (i1 < 0 || i1 >= 256)
		{
			string arg_16_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		if (i2 < 0 || i2 >= 256)
		{
			string arg_32_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_32_0);
		}
		if (i3 < 0 || i3 >= 256)
		{
			string arg_4E_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_4E_0);
		}
		this.setPenColor(new Color(i1, i2, i3));
	}
	[LineNumberTable(365)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void xorOn()
	{
		this.offscreen.setXORMode(Draw.DEFAULT_CLEAR_COLOR);
	}
	[LineNumberTable(366)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void xorOff()
	{
		this.offscreen.setPaintMode();
	}
	public virtual Font getFont()
	{
		return this.font;
	}
	[LineNumberTable(new byte[]
	{
		161,
		27,
		127,
		18,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void line(double d1, double d2, double d3, double d4)
	{
		this.offscreen.draw(new Line2D.Double(this.scaleX(d1), this.scaleY(d2), this.scaleX(d3), this.scaleY(d4)));
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		46,
		106,
		106,
		199,
		116,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void point(double d1, double d2)
	{
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.penRadius;
		if (num3 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num3 / 2.0, num3, num3));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		83,
		121,
		106,
		106,
		116,
		116,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void filledCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		103,
		121,
		122,
		106,
		106,
		116,
		117,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void ellipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2D_0 = "ellipse semiminor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		123,
		121,
		122,
		106,
		106,
		116,
		117,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void filledEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2D_0 = "ellipse semiminor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		202,
		121,
		122,
		106,
		106,
		116,
		117,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void rectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2D_0 = "half height can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		222,
		121,
		122,
		106,
		106,
		116,
		117,
		124,
		127,
		13,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void filledRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2D_0 = "half height can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2D_0);
		}
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(2.0 * d3);
		double num4 = this.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		239,
		99,
		102,
		122,
		102,
		58,
		134,
		102,
		108,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void polygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo((float)this.scaleX(darr1[0]), (float)this.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo((float)this.scaleX(darr1[i]), (float)this.scaleY(darr2[i]));
		}
		generalPath.closePath();
		this.offscreen.draw(generalPath);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		47,
		104,
		106,
		106,
		104,
		105,
		159,
		25,
		127,
		24,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void picture(double d1, double d2, string str)
	{
		Image image = this.getImage(str);
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5F_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_5F_0);
		}
		this.offscreen.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		68,
		104,
		106,
		106,
		104,
		105,
		159,
		25,
		118,
		127,
		24,
		149,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void picture(double d1, double d2, string str, double d3)
	{
		Image image = this.getImage(str);
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5F_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_5F_0);
		}
		this.offscreen.rotate(java.lang.Math.toRadians(-d3), num, num2);
		this.offscreen.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		this.offscreen.rotate(java.lang.Math.toRadians(d3), num, num2);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		92,
		104,
		106,
		106,
		107,
		108,
		127,
		33,
		157,
		255,
		37,
		69,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void picture(double d1, double d2, string str, double d3, double d4)
	{
		Image image = this.getImage(str);
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(d3);
		double num4 = this.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_6D_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_6D_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		else
		{
			this.offscreen.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		}
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		121,
		104,
		106,
		106,
		107,
		108,
		127,
		33,
		155,
		118,
		223,
		37,
		149,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void picture(double d1, double d2, string str, double d3, double d4, double d5)
	{
		Image image = this.getImage(str);
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		double num3 = this.factorX(d3);
		double num4 = this.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_6D_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_6D_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			this.pixel(d1, d2);
		}
		this.offscreen.rotate(java.lang.Math.toRadians(-d5), num, num2);
		this.offscreen.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		this.offscreen.rotate(java.lang.Math.toRadians(d5), num, num2);
		this.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		170,
		106,
		106,
		118,
		107,
		119
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void text(double d1, double d2, string str, double d3)
	{
		double d4 = this.scaleX(d1);
		double d5 = this.scaleY(d2);
		this.offscreen.rotate(java.lang.Math.toRadians(-d3), d4, d5);
		this.text(d1, d2, str);
		this.offscreen.rotate(java.lang.Math.toRadians(d3), d4, d5);
	}
	[LineNumberTable(new byte[]
	{
		162,
		184,
		113,
		108,
		106,
		138,
		103,
		115,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void textLeft(double d1, double d2, string str)
	{
		this.offscreen.setFont(this.font);
		FontMetrics fontMetrics = this.offscreen.getFontMetrics();
		double num = this.scaleX(d1);
		double num2 = this.scaleY(d2);
		int descent = fontMetrics.getDescent();
		this.offscreen.drawString(str, (float)num, (float)(num2 + (double)descent));
		this.show();
	}
	[LineNumberTable(new byte[]
	{
		162,
		208,
		103,
		102,
		114,
		114,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void show(int i)
	{
		this.defer = false;
		this.draw();
		try
		{
			Thread.sleep((long)i);
		}
		catch (InterruptedException arg_18_0)
		{
			goto IL_1C;
		}
		goto IL_31;
		IL_1C:
		System.@out.println("Error sleeping");
		IL_31:
		this.defer = true;
	}
	[LineNumberTable(new byte[]
	{
		163,
		23,
		119,
		103,
		103,
		99,
		159,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void actionPerformed(ActionEvent ae)
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(this.frame, "Use a .png or .jpg extension", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			this.save(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		39,
		102,
		109,
		108,
		108,
		108,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addListener(DrawListener dl)
	{
		this.show();
		this.listeners.add(dl);
		this.frame.addKeyListener(this);
		this.frame.addMouseListener(this);
		this.frame.addMouseMotionListener(this);
		this.frame.setFocusable(true);
	}
	[LineNumberTable(new byte[]
	{
		163,
		59,
		109,
		108
	})]
	public virtual bool mousePressed()
	{
		int result;
		lock (this.mouseLock)
		{
			result = (this.mousePressed ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		69,
		109,
		108
	})]
	public virtual double mouseX()
	{
		double result;
		lock (this.mouseLock)
		{
			result = this.mouseX;
		}
		return result;
	}
	[LineNumberTable(new byte[]
	{
		163,
		79,
		109,
		108
	})]
	public virtual double mouseY()
	{
		double result;
		lock (this.mouseLock)
		{
			result = this.mouseY;
		}
		return result;
	}
	public virtual void mouseClicked(MouseEvent me)
	{
	}
	public virtual void mouseEntered(MouseEvent me)
	{
	}
	public virtual void mouseExited(MouseEvent me)
	{
	}
	[LineNumberTable(new byte[]
	{
		163,
		105,
		109,
		116,
		116,
		103,
		111,
		105,
		127,
		1,
		191,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mousePressed(MouseEvent me)
	{
		lock (this.mouseLock)
		{
			this.mouseX = this.userX((double)me.getX());
			this.mouseY = this.userY((double)me.getY());
			this.mousePressed = true;
		}
		if (me.getButton() == 1)
		{
			Iterator iterator = this.listeners.iterator();
			while (iterator.MoveNext())
			{
				DrawListener drawListener = (DrawListener)iterator.Current;
				drawListener.mousePressed(this.userX((double)me.getX()), this.userY((double)me.getY()));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		121,
		109,
		103,
		111,
		105,
		127,
		1,
		159,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseReleased(MouseEvent me)
	{
		lock (this.mouseLock)
		{
			this.mousePressed = false;
		}
		if (me.getButton() == 1)
		{
			Iterator iterator = this.listeners.iterator();
			while (iterator.MoveNext())
			{
				DrawListener drawListener = (DrawListener)iterator.Current;
				drawListener.mouseReleased(this.userX((double)me.getX()), this.userY((double)me.getY()));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		134,
		109,
		116,
		116,
		143,
		127,
		1,
		127,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseDragged(MouseEvent me)
	{
		lock (this.mouseLock)
		{
			this.mouseX = this.userX((double)me.getX());
			this.mouseY = this.userY((double)me.getY());
		}
		Iterator iterator = this.listeners.iterator();
		while (iterator.MoveNext())
		{
			DrawListener drawListener = (DrawListener)iterator.Current;
			drawListener.mouseDragged(this.userX((double)me.getX()), this.userY((double)me.getY()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		147,
		109,
		116,
		116,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseMoved(MouseEvent me)
	{
		lock (this.mouseLock)
		{
			this.mouseX = this.userX((double)me.getX());
			this.mouseY = this.userY((double)me.getY());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		163,
		109,
		119
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool hasNextKeyTyped()
	{
		int result;
		lock (this.keyLock)
		{
			result = (this.keysTyped.IsEmpty ? 0 : 1);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		173,
		109,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual char nextKeyTyped()
	{
		int result;
		lock (this.keyLock)
		{
			result = (int)((Character)this.keysTyped.removeLast()).charValue();
		}
		return (char)result;
	}
	[LineNumberTable(new byte[]
	{
		163,
		187,
		109,
		119
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool isKeyPressed(int i)
	{
		int result;
		lock (this.keyLock)
		{
			result = (this.keysDown.contains(Integer.valueOf(i)) ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		197,
		109,
		118,
		175,
		127,
		1,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyTyped(KeyEvent ke)
	{
		lock (this.keyLock)
		{
			this.keysTyped.addFirst(Character.valueOf(ke.getKeyChar()));
		}
		Iterator iterator = this.listeners.iterator();
		while (iterator.MoveNext())
		{
			DrawListener drawListener = (DrawListener)iterator.Current;
			drawListener.keyTyped(ke.getKeyChar());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		210,
		109,
		119,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyPressed(KeyEvent ke)
	{
		lock (this.keyLock)
		{
			this.keysDown.add(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		219,
		109,
		119,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyReleased(KeyEvent ke)
	{
		lock (this.keyLock)
		{
			this.keysDown.remove(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		233,
		107,
		127,
		2,
		127,
		2,
		127,
		2,
		107,
		111,
		223,
		20,
		107,
		144,
		102,
		107,
		127,
		24,
		127,
		24,
		168,
		107,
		125,
		107,
		127,
		0
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Draw draw = new Draw("Test client 1");
		draw.square(0.2, 0.8, 0.1);
		draw.filledSquare(0.8, 0.8, 0.2);
		draw.circle(0.8, 0.2, 0.2);
		draw.setPenColor(Draw.__<>MAGENTA);
		draw.setPenRadius(0.02);
		draw.arc(0.8, 0.2, 0.1, 200.0, 45.0);
		Draw draw2 = new Draw("Test client 2");
		draw2.setCanvasSize(900, 200);
		draw2.setPenRadius();
		draw2.setPenColor(Draw.__<>BLUE);
		double[] darr = new double[]
		{
			0.1,
			0.2,
			0.3,
			0.2
		};
		double[] darr2 = new double[]
		{
			0.2,
			0.3,
			0.2,
			0.1
		};
		draw2.filledPolygon(darr, darr2);
		draw2.setPenColor(Draw.__<>BLACK);
		draw2.text(0.2, 0.5, "bdfdfdfdlack text");
		draw2.setPenColor(Draw.__<>WHITE);
		draw2.text(0.8, 0.8, "white text");
	}
	[LineNumberTable(new byte[]
	{
		6,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		234,
		70,
		243,
		70,
		179,
		106,
		234,
		80
	})]
	static Draw()
	{
		Draw.__<>BLACK = Color.BLACK;
		Draw.__<>BLUE = Color.BLUE;
		Draw.__<>CYAN = Color.CYAN;
		Draw.__<>DARK_GRAY = Color.DARK_GRAY;
		Draw.__<>GRAY = Color.GRAY;
		Draw.__<>GREEN = Color.GREEN;
		Draw.__<>LIGHT_GRAY = Color.LIGHT_GRAY;
		Draw.__<>MAGENTA = Color.MAGENTA;
		Draw.__<>ORANGE = Color.ORANGE;
		Draw.__<>PINK = Color.PINK;
		Draw.__<>RED = Color.RED;
		Draw.__<>WHITE = Color.WHITE;
		Draw.__<>YELLOW = Color.YELLOW;
		Draw.__<>BOOK_BLUE = new Color(9, 90, 166);
		Draw.__<>BOOK_RED = new Color(173, 32, 24);
		Draw.DEFAULT_PEN_COLOR = Draw.__<>BLACK;
		Draw.DEFAULT_CLEAR_COLOR = Draw.__<>WHITE;
		Draw.DEFAULT_FONT = new Font("SansSerif", 0, 16);
	}
}

using System;
public interface DrawListener
{
	void mousePressed(double d1, double d2);
	void mouseReleased(double d1, double d2);
	void mouseDragged(double d1, double d2);
	void keyTyped(char ch);
}

using IKVM.Attributes;
using java.lang;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Comparable"
}), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LEdge;>;")]
public class Edge : java.lang.Object, Comparable
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int v;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int w;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double weight;
	public virtual int either()
	{
		return this.v;
	}
	[LineNumberTable(new byte[]
	{
		24,
		112,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int other(int i)
	{
		if (i == this.v)
		{
			return this.w;
		}
		if (i == this.w)
		{
			return this.v;
		}
		string arg_2A_0 = "Illegal endpoint";
		Throwable.__<suppressFillInStackTrace>();
		throw new IllegalArgumentException(arg_2A_0);
	}
	public virtual double weight()
	{
		return this.weight;
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		104,
		116,
		116,
		121,
		103,
		103,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Edge(int i1, int i2, double d)
	{
		if (i1 < 0)
		{
			string arg_16_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_16_0);
		}
		if (i2 < 0)
		{
			string arg_2A_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_2A_0);
		}
		if (java.lang.Double.isNaN(d))
		{
			string arg_43_0 = "Weight is NaN";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_43_0);
		}
		this.v = i1;
		this.w = i2;
		this.weight = d;
	}
	[LineNumberTable(new byte[]
	{
		36,
		112,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(Edge e)
	{
		if (this.weight() < e.weight())
		{
			return -1;
		}
		if (this.weight() > e.weight())
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(96)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return java.lang.String.format("%d-%d %.5f", new object[]
		{
			Integer.valueOf(this.v),
			Integer.valueOf(this.w),
			java.lang.Double.valueOf(this.weight)
		});
	}
	[LineNumberTable(new byte[]
	{
		53,
		115,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Edge obj = new Edge(12, 23, 3.14);
		StdOut.println(obj);
	}
	[LineNumberTable(23), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(object obj)
	{
		return this.compareTo((Edge)obj);
	}
	[HideFromJava]
	int IComparable.Object;)IcompareTo(object obj)
	{
		return this.compareTo(obj);
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class EdgeWeightedDigraph : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int V;
	private int E;
	[Signature("[LBag<LDirectedEdge;>;")]
	private Bag[] adj;
	public virtual int V()
	{
		return this.V;
	}
	[LineNumberTable(new byte[]
	{
		98,
		127,
		42
	}), Signature("(I)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		if (i < 0 || i >= this.V)
		{
			string arg_43_0 = new StringBuilder().append("vertex ").append(i).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_43_0);
		}
		return this.adj[i];
	}
	[LineNumberTable(new byte[]
	{
		32,
		110,
		103,
		116,
		105,
		103,
		104,
		127,
		42,
		127,
		45,
		105,
		240,
		58,
		233,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedDigraph(In i) : this(i.readInt())
	{
		int num = i.readInt();
		if (num < 0)
		{
			string arg_23_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_23_0);
		}
		for (int j = 0; j < num; j++)
		{
			int num2 = i.readInt();
			int num3 = i.readInt();
			if (num2 < 0 || num2 >= this.V)
			{
				string arg_84_0 = new StringBuilder().append("vertex ").append(num2).append(" is not between 0 and ").append(this.V - 1).toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IndexOutOfBoundsException(arg_84_0);
			}
			if (num3 < 0 || num3 >= this.V)
			{
				string arg_D0_0 = new StringBuilder().append("vertex ").append(num3).append(" is not between 0 and ").append(this.V - 1).toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IndexOutOfBoundsException(arg_D0_0);
			}
			double d = i.readDouble();
			this.addEdge(new DirectedEdge(num2, num3, d));
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		185,
		104,
		116,
		103,
		103,
		113,
		102,
		45,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedDigraph(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices in a Digraph must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		this.adj = (Bag[])new Bag[i];
		for (int j = 0; j < i; j++)
		{
			this.adj[j] = new Bag();
		}
	}
	[LineNumberTable(new byte[]
	{
		85,
		103,
		110,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(DirectedEdge de)
	{
		int num = de.from();
		this.adj[num].add(de);
		this.E++;
	}
	[LineNumberTable(new byte[]
	{
		109,
		102,
		107,
		127,
		2,
		9,
		230,
		69
	}), Signature("()Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable edges()
	{
		Bag bag = new Bag();
		for (int i = 0; i < this.V; i++)
		{
			Iterator iterator = this.adj(i).iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				bag.add(obj);
			}
		}
		return bag;
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		10,
		105,
		116,
		102,
		110,
		110,
		127,
		3,
		107,
		232,
		59,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedDigraph(int i1, int i2) : this(i1)
	{
		if (i2 < 0)
		{
			string arg_17_0 = "Number of edges in a Digraph must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_17_0);
		}
		for (int j = 0; j < i2; j++)
		{
			int i3 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)i1);
			int i4 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)i1);
			double d = (double)java.lang.Math.round(100.0 * java.lang.Math.random()) / 100.0;
			DirectedEdge de = new DirectedEdge(i3, i4, d);
			this.addEdge(de);
		}
	}
	[LineNumberTable(new byte[]
	{
		50,
		110,
		108,
		142,
		102,
		127,
		4,
		138,
		124,
		241,
		57,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedDigraph(EdgeWeightedDigraph ewd) : this(ewd.V())
	{
		this.E = ewd.E();
		for (int i = 0; i < ewd.V(); i++)
		{
			global::Stack stack = new global::Stack();
			Iterator iterator = ewd.adj[i].iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				stack.push(obj);
			}
			iterator = stack.iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				this.adj[i].add(obj);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		126,
		127,
		42
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int outdegree(int i)
	{
		if (i < 0 || i >= this.V)
		{
			string arg_43_0 = new StringBuilder().append("vertex ").append(i).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_43_0);
		}
		return this.adj[i].size();
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		107,
		102,
		127,
		24,
		110,
		127,
		2,
		127,
		4,
		159,
		5,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string property = System.getProperty("line.separator");
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(new StringBuilder().append(this.V).append(" ").append(this.E).append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(new StringBuilder().append(i).append(": ").toString());
			Iterator iterator = this.adj[i].iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				stringBuilder.append(new StringBuilder().append(obj).append("  ").toString());
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		90,
		110,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedDigraph obj = new EdgeWeightedDigraph(i);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class EdgeWeightedDirectedCycle : java.lang.Object
{
	private bool[] marked;
	private DirectedEdge[] edgeTo;
	private bool[] onStack;
	[Signature("LStack<LDirectedEdge;>;")]
	private global::Stack cycle;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		104,
		113,
		113,
		113,
		107,
		50,
		198,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedDirectedCycle(EdgeWeightedDigraph ewd)
	{
		this.marked = new bool[ewd.V()];
		this.onStack = new bool[ewd.V()];
		this.edgeTo = new DirectedEdge[ewd.V()];
		for (int i = 0; i < ewd.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(ewd, i);
			}
		}
		if (!EdgeWeightedDirectedCycle.$assertionsDisabled && !this.check(ewd))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[Signature("()Ljava/lang/Iterable<LDirectedEdge;>;")]
	public virtual Iterable cycle()
	{
		return this.cycle;
	}
	[LineNumberTable(new byte[]
	{
		10,
		105,
		105,
		127,
		5,
		167,
		169,
		106,
		105,
		202,
		106,
		107,
		105,
		108,
		144,
		140,
		133,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		this.onStack[num] = true;
		this.marked[num] = true;
		Iterator iterator = edgeWeightedDigraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
			int num2 = directedEdge.to();
			if (this.cycle != null)
			{
				return;
			}
			if (!this.marked[num2])
			{
				this.edgeTo[num2] = directedEdge;
				this.dfs(edgeWeightedDigraph, num2);
			}
			else if (this.onStack[num2])
			{
				this.cycle = new global::Stack();
				while (directedEdge.from() != num2)
				{
					this.cycle.push(directedEdge);
					directedEdge = this.edgeTo[directedEdge.from()];
				}
				this.cycle.push(directedEdge);
			}
		}
		this.onStack[num] = false;
	}
	[LineNumberTable(new byte[]
	{
		62,
		139,
		100,
		127,
		1,
		101,
		99,
		110,
		126,
		162,
		167,
		110,
		126,
		226,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedDigraph edgeWeightedDigraph)
	{
		if (this.hasCycle())
		{
			DirectedEdge directedEdge = null;
			DirectedEdge directedEdge2 = null;
			Iterator iterator = this.cycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge directedEdge3 = (DirectedEdge)iterator.Current;
				if (directedEdge == null)
				{
					directedEdge = directedEdge3;
				}
				if (directedEdge2 != null && directedEdge2.to() != directedEdge3.from())
				{
					System.err.printf("cycle edges %s and %s not incident\n", new object[]
					{
						directedEdge2,
						directedEdge3
					});
					return false;
				}
				directedEdge2 = directedEdge3;
			}
			if (directedEdge2.to() != directedEdge.from())
			{
				System.err.printf("cycle edges %s and %s not incident\n", new object[]
				{
					directedEdge2,
					directedEdge
				});
				return false;
			}
		}
		return true;
	}
	public virtual bool hasCycle()
	{
		return this.cycle != null;
	}
	[LineNumberTable(new byte[]
	{
		92,
		105,
		105,
		105,
		103,
		104,
		119,
		103,
		168,
		104,
		104,
		102,
		104,
		241,
		57,
		232,
		75,
		104,
		111,
		111,
		104,
		241,
		60,
		232,
		71,
		166,
		104,
		105,
		106,
		127,
		6,
		159,
		3,
		231,
		69,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		int num3 = Integer.parseInt(strarr[2]);
		EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(num);
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = i;
		}
		StdRandom.shuffle(array);
		for (int i = 0; i < num2; i++)
		{
			int num4;
			int num5;
			do
			{
				num4 = StdRandom.uniform(num);
				num5 = StdRandom.uniform(num);
			}
			while (num4 >= num5);
			double d = java.lang.Math.random();
			edgeWeightedDigraph.addEdge(new DirectedEdge(num4, num5, d));
		}
		for (int i = 0; i < num3; i++)
		{
			int num4 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)num);
			int num5 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)num);
			double d = java.lang.Math.random();
			edgeWeightedDigraph.addEdge(new DirectedEdge(num4, num5, d));
		}
		StdOut.println(edgeWeightedDigraph);
		EdgeWeightedDirectedCycle edgeWeightedDirectedCycle = new EdgeWeightedDirectedCycle(edgeWeightedDigraph);
		if (edgeWeightedDirectedCycle.hasCycle())
		{
			StdOut.print("Cycle: ");
			Iterator iterator = edgeWeightedDirectedCycle.cycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				StdOut.print(new StringBuilder().append(obj).append(" ").toString());
			}
			StdOut.println();
		}
		else
		{
			StdOut.println("No directed cycle");
		}
	}
	[LineNumberTable(36)]
	static EdgeWeightedDirectedCycle()
	{
		EdgeWeightedDirectedCycle.$assertionsDisabled = !ClassLiteral<EdgeWeightedDirectedCycle>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class EdgeWeightedGraph : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int V;
	private int E;
	[Signature("[LBag<LEdge;>;")]
	private Bag[] adj;
	public virtual int V()
	{
		return this.V;
	}
	[LineNumberTable(new byte[]
	{
		126,
		102,
		110,
		98,
		127,
		6,
		107,
		170,
		107,
		118,
		233,
		55,
		233,
		77
	}), Signature("()Ljava/lang/Iterable<LEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable edges()
	{
		Bag bag = new Bag();
		for (int i = 0; i < this.V; i++)
		{
			int num = 0;
			Iterator iterator = this.adj(i).iterator();
			while (iterator.MoveNext())
			{
				Edge edge = (Edge)iterator.Current;
				if (edge.other(i) > i)
				{
					bag.add(edge);
				}
				else if (edge.other(i) == i)
				{
					bool expr_5B = num != 0;
					int expr_5D = 2;
					if (expr_5D == -1 || (expr_5B ? 1 : 0) % expr_5D == 0)
					{
						bag.add(edge);
					}
					num++;
				}
			}
		}
		return bag;
	}
	[LineNumberTable(new byte[]
	{
		45,
		110,
		103,
		116,
		102,
		103,
		104,
		105,
		108,
		232,
		59,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedGraph(In i) : this(i.readInt())
	{
		int num = i.readInt();
		if (num < 0)
		{
			string arg_23_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_23_0);
		}
		for (int j = 0; j < num; j++)
		{
			int i2 = i.readInt();
			int i3 = i.readInt();
			double d = i.readDouble();
			Edge e = new Edge(i2, i3, d);
			this.addEdge(e);
		}
	}
	[LineNumberTable(new byte[]
	{
		5,
		104,
		116,
		103,
		103,
		113,
		102,
		45,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedGraph(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		this.adj = (Bag[])new Bag[i];
		for (int j = 0; j < i; j++)
		{
			this.adj[j] = new Bag();
		}
	}
	[LineNumberTable(new byte[]
	{
		99,
		103,
		104,
		127,
		42,
		127,
		42,
		110,
		110,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(Edge e)
	{
		int num = e.either();
		int num2 = e.other(num);
		if (num < 0 || num >= this.V)
		{
			string arg_52_0 = new StringBuilder().append("vertex ").append(num).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_52_0);
		}
		if (num2 < 0 || num2 >= this.V)
		{
			string arg_9B_0 = new StringBuilder().append("vertex ").append(num2).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_9B_0);
		}
		this.adj[num].add(e);
		this.adj[num2].add(e);
		this.E++;
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		115,
		127,
		42
	}), Signature("(I)Ljava/lang/Iterable<LEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		if (i < 0 || i >= this.V)
		{
			string arg_43_0 = new StringBuilder().append("vertex ").append(i).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_43_0);
		}
		return this.adj[i];
	}
	[LineNumberTable(new byte[]
	{
		23,
		105,
		116,
		102,
		110,
		110,
		127,
		3,
		107,
		232,
		59,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedGraph(int i1, int i2) : this(i1)
	{
		if (i2 < 0)
		{
			string arg_17_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_17_0);
		}
		for (int j = 0; j < i2; j++)
		{
			int i3 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)i1);
			int i4 = ByteCodeHelper.d2i(java.lang.Math.random() * (double)i1);
			double d = (double)java.lang.Math.round(100.0 * java.lang.Math.random()) / 100.0;
			Edge e = new Edge(i3, i4, d);
			this.addEdge(e);
		}
	}
	[LineNumberTable(new byte[]
	{
		62,
		110,
		108,
		142,
		102,
		127,
		4,
		138,
		124,
		241,
		57,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public EdgeWeightedGraph(EdgeWeightedGraph ewg) : this(ewg.V())
	{
		this.E = ewg.E();
		for (int i = 0; i < ewg.V(); i++)
		{
			global::Stack stack = new global::Stack();
			Iterator iterator = ewg.adj[i].iterator();
			while (iterator.MoveNext())
			{
				Edge obj = (Edge)iterator.Current;
				stack.push(obj);
			}
			iterator = stack.iterator();
			while (iterator.MoveNext())
			{
				Edge obj = (Edge)iterator.Current;
				this.adj[i].add(obj);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		86,
		107,
		102,
		127,
		24,
		110,
		127,
		2,
		127,
		4,
		159,
		5,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string property = System.getProperty("line.separator");
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(new StringBuilder().append(this.V).append(" ").append(this.E).append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(new StringBuilder().append(i).append(": ").toString());
			Iterator iterator = this.adj[i].iterator();
			while (iterator.MoveNext())
			{
				Edge obj = (Edge)iterator.Current;
				stringBuilder.append(new StringBuilder().append(obj).append("  ").toString());
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		103,
		110,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedGraph obj = new EdgeWeightedGraph(i);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FarthestPair : java.lang.Object
{
	private Point2D best1;
	private Point2D best2;
	private double bestDistance;
	[LineNumberTable(new byte[]
	{
		159,
		164,
		8,
		176,
		167,
		166,
		98,
		127,
		1,
		166,
		106,
		99,
		127,
		5,
		207,
		165,
		100,
		106,
		106,
		120,
		193,
		99,
		127,
		9,
		168,
		100,
		140,
		119,
		107,
		107,
		150,
		127,
		25,
		134,
		114,
		106,
		107,
		107,
		150,
		229,
		48,
		235,
		82
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FarthestPair(Point2D[] pdarr)
	{
		this.bestDistance = double.NegativeInfinity;
		GrahamScan grahamScan = new GrahamScan(pdarr);
		if (pdarr.Length <= 1)
		{
			return;
		}
		int num = 0;
		Iterator iterator = grahamScan.hull().iterator();
		while (iterator.MoveNext())
		{
			Point2D arg_46_0 = (Point2D)iterator.Current;
			num++;
		}
		Point2D[] array = new Point2D[num + 1];
		int num2 = 1;
		Iterator iterator2 = grahamScan.hull().iterator();
		while (iterator2.hasNext())
		{
			Point2D point2D = (Point2D)iterator2.next();
			Point2D[] arg_8A_0 = array;
			int arg_8A_1 = num2;
			num2++;
			arg_8A_0[arg_8A_1] = point2D;
		}
		if (num == 1)
		{
			return;
		}
		if (num == 2)
		{
			this.best1 = array[1];
			this.best2 = array[2];
			this.bestDistance = this.best1.distanceTo(this.best2);
			return;
		}
		int num3 = 2;
		while (Point2D.area2(array[num], array[num3 + 1], array[1]) > Point2D.area2(array[num], array[num3], array[1]))
		{
			num3++;
		}
		int num4 = num3;
		for (int i = 1; i <= num3; i++)
		{
			if (array[i].distanceTo(array[num4]) > this.bestDistance)
			{
				this.best1 = array[i];
				this.best2 = array[num4];
				this.bestDistance = array[i].distanceTo(array[num4]);
			}
			while (num4 < num && Point2D.area2(array[i], array[num4 + 1], array[i + 1]) > Point2D.area2(array[i], array[num4], array[i + 1]))
			{
				num4++;
				double num5 = array[i].distanceTo(array[num4]);
				if (num5 > this.bestDistance)
				{
					this.best1 = array[i];
					this.best2 = array[num4];
					this.bestDistance = array[i].distanceTo(array[num4]);
				}
			}
		}
	}
	public virtual double distance()
	{
		return this.bestDistance;
	}
	public virtual Point2D either()
	{
		return this.best1;
	}
	public virtual Point2D other()
	{
		return this.best2;
	}
	[LineNumberTable(new byte[]
	{
		34,
		102,
		103,
		102,
		102,
		103,
		237,
		61,
		230,
		69,
		104,
		127,
		42
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = StdIn.readInt();
		Point2D[] array = new Point2D[num];
		for (int i = 0; i < num; i++)
		{
			int num2 = StdIn.readInt();
			int num3 = StdIn.readInt();
			array[i] = new Point2D((double)num2, (double)num3);
		}
		FarthestPair farthestPair = new FarthestPair(array);
		StdOut.println(new StringBuilder().append(farthestPair.distance()).append(" from ").append(farthestPair.either()).append(" to ").append(farthestPair.other()).toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class FFT : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		159,
		167,
		163,
		177,
		190,
		105,
		104,
		40,
		166,
		167,
		99,
		106,
		45,
		168,
		169,
		104,
		109,
		118,
		117,
		122,
		254,
		60,
		235,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Complex[] fft(Complex[] carr)
	{
		int num = carr.Length;
		if (num == 1)
		{
			return new Complex[]
			{
				carr[0]
			};
		}
		bool expr_14 = num != 0;
		int expr_16 = 2;
		if (expr_16 != -1 && (expr_14 ? 1 : 0) % expr_16 != 0)
		{
			string arg_2C_0 = "N is not a power of 2";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		Complex[] array = new Complex[num / 2];
		for (int i = 0; i < num / 2; i++)
		{
			array[i] = carr[2 * i];
		}
		Complex[] array2 = FFT.fft(array);
		Complex[] array3 = array;
		for (int j = 0; j < num / 2; j++)
		{
			array3[j] = carr[2 * j + 1];
		}
		Complex[] array4 = FFT.fft(array3);
		Complex[] array5 = new Complex[num];
		for (int k = 0; k < num / 2; k++)
		{
			double a = (double)(-2 * k) * 3.1415926535897931 / (double)num;
			Complex complex = new Complex(java.lang.Math.cos(a), java.lang.Math.sin(a));
			array5[k] = array2[k].plus(complex.times(array4[k]));
			array5[k + num / 2] = array2[k].minus(complex.times(array4[k]));
		}
		return array5;
	}
	[LineNumberTable(new byte[]
	{
		11,
		99,
		167,
		102,
		43,
		230,
		69,
		167,
		102,
		43,
		230,
		69,
		102,
		51,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Complex[] ifft(Complex[] carr)
	{
		int num = carr.Length;
		Complex[] array = new Complex[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = carr[i].conjugate();
		}
		array = FFT.fft(array);
		for (int i = 0; i < num; i++)
		{
			array[i] = array[i].conjugate();
		}
		for (int i = 0; i < num; i++)
		{
			array[i] = array[i].times((double)1f / (double)num);
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		41,
		150,
		163,
		103,
		167,
		103,
		104,
		49,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Complex[] cconvolve(Complex[] carr1, Complex[] carr2)
	{
		if (carr1.Length != carr2.Length)
		{
			string arg_10_0 = "Dimensions don't agree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_10_0);
		}
		int num = carr1.Length;
		Complex[] array = FFT.fft(carr1);
		Complex[] array2 = FFT.fft(carr2);
		Complex[] array3 = new Complex[num];
		for (int i = 0; i < num; i++)
		{
			array3[i] = array[i].times(array2[i]);
		}
		return FFT.ifft(array3);
	}
	[LineNumberTable(new byte[]
	{
		77,
		102,
		106,
		103,
		40,
		166,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show(Complex[] carr, string str)
	{
		StdOut.println(str);
		StdOut.println("-------------------");
		for (int i = 0; i < carr.Length; i++)
		{
			StdOut.println(carr[i]);
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		62,
		144,
		106,
		115,
		148,
		106,
		121,
		153
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Complex[] convolve(Complex[] carr1, Complex[] carr2)
	{
		Complex complex = new Complex((double)0f, (double)0f);
		Complex[] array = new Complex[2 * carr1.Length];
		for (int i = 0; i < carr1.Length; i++)
		{
			array[i] = carr1[i];
		}
		for (int i = carr1.Length; i < 2 * carr1.Length; i++)
		{
			array[i] = complex;
		}
		Complex[] array2 = new Complex[2 * carr2.Length];
		for (int j = 0; j < carr2.Length; j++)
		{
			array2[j] = carr2[j];
		}
		for (int j = carr2.Length; j < 2 * carr2.Length; j++)
		{
			array2[j] = complex;
		}
		return FFT.cconvolve(array, array2);
	}
	[LineNumberTable(21)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FFT()
	{
	}
	[LineNumberTable(new byte[]
	{
		160,
		68,
		105,
		167,
		102,
		111,
		31,
		3,
		198,
		171,
		103,
		171,
		104,
		172,
		105,
		172,
		105,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		Complex[] array = new Complex[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = new Complex((double)i, (double)0f);
			array[i] = new Complex(-2.0 * java.lang.Math.random() + (double)1f, (double)0f);
		}
		FFT.show(array, "x");
		Complex[] carr = FFT.fft(array);
		FFT.show(carr, "y = fft(x)");
		Complex[] carr2 = FFT.ifft(carr);
		FFT.show(carr2, "z = ifft(y)");
		Complex[] carr3 = FFT.cconvolve(array, array);
		FFT.show(carr3, "c = cconvolve(x, x)");
		Complex[] carr4 = FFT.convolve(array, array);
		FFT.show(carr4, "d = convolve(x, x)");
	}
}

using IKVM.Attributes;
using java.io;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FileIndex : java.lang.Object
{
	[LineNumberTable(30)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FileIndex()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		166,
		106,
		115,
		127,
		1,
		105,
		105,
		105,
		105,
		119,
		111,
		105,
		226,
		55,
		233,
		78,
		106,
		103,
		106,
		111,
		127,
		1,
		191,
		8,
		133
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		ST sT = new ST();
		StdOut.println("Indexing files");
		int num = strarr.Length;
		for (int i = 0; i < num; i++)
		{
			string text = strarr[i];
			StdOut.println(new StringBuilder().append("  ").append(text).toString());
			File file = new File(text);
			In @in = new In(file);
			while (!@in.IsEmpty)
			{
				string c = @in.readString();
				if (!sT.contains(c))
				{
					sT.put(c, new SET());
				}
				SET sET = (SET)sT.get(c);
				sET.add(file);
			}
		}
		while (!StdIn.IsEmpty)
		{
			string c2 = StdIn.readString();
			if (sT.contains(c2))
			{
				SET sET2 = (SET)sT.get(c2);
				Iterator iterator = sET2.iterator();
				while (iterator.MoveNext())
				{
					File file2 = (File)iterator.Current;
					StdOut.println(new StringBuilder().append("  ").append(file2.getName()).toString());
				}
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class FlowEdge : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int v;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int w;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double capacity;
	private double flow;
	[LineNumberTable(new byte[]
	{
		159,
		182,
		104,
		116,
		116,
		121,
		103,
		103,
		105,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowEdge(int i1, int i2, double d)
	{
		if (i1 < 0)
		{
			string arg_16_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_16_0);
		}
		if (i2 < 0)
		{
			string arg_2A_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_2A_0);
		}
		if (d < (double)0f)
		{
			string arg_43_0 = "Edge capacity must be nonnegaitve";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_43_0);
		}
		this.v = i1;
		this.w = i2;
		this.capacity = d;
		this.flow = (double)0f;
	}
	public virtual int from()
	{
		return this.v;
	}
	public virtual double flow()
	{
		return this.flow;
	}
	public virtual int to()
	{
		return this.w;
	}
	[LineNumberTable(new byte[]
	{
		13,
		104,
		116,
		116,
		121,
		119,
		122,
		103,
		103,
		105,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowEdge(int i1, int i2, double d1, double d2)
	{
		if (i1 < 0)
		{
			string arg_16_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_16_0);
		}
		if (i2 < 0)
		{
			string arg_2A_0 = "Vertex name must be a nonnegative integer";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_2A_0);
		}
		if (d1 < (double)0f)
		{
			string arg_43_0 = "Edge capacity must be nonnegaitve";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_43_0);
		}
		if (d2 > d1)
		{
			string arg_5A_0 = "Flow exceeds capacity";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_5A_0);
		}
		if (d2 < (double)0f)
		{
			string arg_74_0 = "Flow must be nonnnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_74_0);
		}
		this.v = i1;
		this.w = i2;
		this.capacity = d1;
		this.flow = d2;
	}
	[LineNumberTable(new byte[]
	{
		29,
		104,
		108,
		108,
		109,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowEdge(FlowEdge fe)
	{
		this.v = fe.v;
		this.w = fe.w;
		this.capacity = fe.capacity;
		this.flow = fe.flow;
	}
	public virtual double capacity()
	{
		return this.capacity;
	}
	[LineNumberTable(new byte[]
	{
		78,
		112,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int other(int i)
	{
		if (i == this.v)
		{
			return this.w;
		}
		if (i == this.w)
		{
			return this.v;
		}
		string arg_2A_0 = "Illegal endpoint";
		Throwable.__<suppressFillInStackTrace>();
		throw new IllegalArgumentException(arg_2A_0);
	}
	[LineNumberTable(new byte[]
	{
		95,
		112,
		119
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double residualCapacityTo(int i)
	{
		if (i == this.v)
		{
			return this.flow;
		}
		if (i == this.w)
		{
			return this.capacity - this.flow;
		}
		string arg_31_0 = "Illegal endpoint";
		Throwable.__<suppressFillInStackTrace>();
		throw new IllegalArgumentException(arg_31_0);
	}
	[LineNumberTable(new byte[]
	{
		112,
		123,
		123,
		112,
		121,
		125,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addResidualFlowTo(int i, double d)
	{
		if (i == this.v)
		{
			this.flow -= d;
		}
		else
		{
			if (i != this.w)
			{
				string arg_40_0 = "Illegal endpoint";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_40_0);
			}
			this.flow += d;
		}
		if (java.lang.Double.isNaN(d))
		{
			string arg_59_0 = "Change in flow = NaN";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_59_0);
		}
		if (this.flow < (double)0f)
		{
			string arg_76_0 = "Flow is negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_76_0);
		}
		if (this.flow > this.capacity)
		{
			string arg_94_0 = "Flow exceeds capacity";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_94_0);
		}
	}
	[LineNumberTable(176)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.v).append("->").append(this.w).append(" ").append(this.flow).append("/").append(this.capacity).toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		70,
		115,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		FlowEdge obj = new FlowEdge(12, 23, 3.14);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FlowNetwork : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int V;
	private int E;
	[Signature("[LBag<LFlowEdge;>;")]
	private Bag[] adj;
	[LineNumberTable(new byte[]
	{
		159,
		186,
		104,
		116,
		103,
		103,
		113,
		102,
		45,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowNetwork(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices in a Graph must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		this.adj = (Bag[])new Bag[i];
		for (int j = 0; j < i; j++)
		{
			this.adj[j] = new Bag();
		}
	}
	[LineNumberTable(new byte[]
	{
		69,
		103,
		103,
		127,
		42,
		127,
		42,
		110,
		110,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(FlowEdge fe)
	{
		int num = fe.from();
		int num2 = fe.to();
		if (num < 0 || num >= this.V)
		{
			string arg_51_0 = new StringBuilder().append("vertex ").append(num).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_51_0);
		}
		if (num2 < 0 || num2 >= this.V)
		{
			string arg_9A_0 = new StringBuilder().append("vertex ").append(num2).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_9A_0);
		}
		this.adj[num].add(fe);
		this.adj[num2].add(fe);
		this.E++;
	}
	[LineNumberTable(new byte[]
	{
		86,
		127,
		42
	}), Signature("(I)Ljava/lang/Iterable<LFlowEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		if (i < 0 || i >= this.V)
		{
			string arg_43_0 = new StringBuilder().append("vertex ").append(i).append(" is not between 0 and ").append(this.V - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_43_0);
		}
		return this.adj[i];
	}
	[LineNumberTable(new byte[]
	{
		33,
		110,
		103,
		116,
		105,
		103,
		104,
		127,
		42,
		127,
		45,
		105,
		240,
		58,
		233,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowNetwork(In i) : this(i.readInt())
	{
		int num = i.readInt();
		if (num < 0)
		{
			string arg_23_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_23_0);
		}
		for (int j = 0; j < num; j++)
		{
			int num2 = i.readInt();
			int num3 = i.readInt();
			if (num2 < 0 || num2 >= this.V)
			{
				string arg_84_0 = new StringBuilder().append("vertex ").append(num2).append(" is not between 0 and ").append(this.V - 1).toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IndexOutOfBoundsException(arg_84_0);
			}
			if (num3 < 0 || num3 >= this.V)
			{
				string arg_D0_0 = new StringBuilder().append("vertex ").append(num3).append(" is not between 0 and ").append(this.V - 1).toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IndexOutOfBoundsException(arg_D0_0);
			}
			double d = i.readDouble();
			this.addEdge(new FlowEdge(num2, num3, d));
		}
	}
	[LineNumberTable(new byte[]
	{
		12,
		105,
		116,
		102,
		103,
		103,
		106,
		239,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FlowNetwork(int i1, int i2) : this(i1)
	{
		if (i2 < 0)
		{
			string arg_17_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_17_0);
		}
		for (int j = 0; j < i2; j++)
		{
			int i3 = StdRandom.uniform(i1);
			int i4 = StdRandom.uniform(i1);
			double d = (double)StdRandom.uniform(100);
			this.addEdge(new FlowEdge(i3, i4, d));
		}
	}
	public virtual int V()
	{
		return this.V;
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		92,
		102,
		107,
		127,
		2,
		105,
		233,
		61,
		230,
		69
	}), Signature("()Ljava/lang/Iterable<LFlowEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable edges()
	{
		Bag bag = new Bag();
		for (int i = 0; i < this.V; i++)
		{
			Iterator iterator = this.adj(i).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (flowEdge.to() != i)
				{
					bag.add(flowEdge);
				}
			}
		}
		return bag;
	}
	[LineNumberTable(new byte[]
	{
		109,
		107,
		102,
		127,
		24,
		110,
		127,
		2,
		127,
		4,
		159,
		15,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string property = System.getProperty("line.separator");
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(new StringBuilder().append(this.V).append(" ").append(this.E).append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(new StringBuilder().append(i).append(":  ").toString());
			Iterator iterator = this.adj[i].iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (flowEdge.to() != i)
				{
					stringBuilder.append(new StringBuilder().append(flowEdge).append("  ").toString());
				}
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		126,
		110,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		FlowNetwork obj = new FlowNetwork(i);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FloydWarshall : java.lang.Object
{
	private bool hasNegativeCycle;
	private double[][] distTo;
	private DirectedEdge[][] edgeTo;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	public virtual bool hasNegativeCycle()
	{
		return this.hasNegativeCycle;
	}
	[LineNumberTable(132)]
	public virtual bool hasPath(int i1, int i2)
	{
		return this.distTo[i1][i2] < double.PositiveInfinity;
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		104,
		103,
		127,
		10,
		191,
		10,
		104,
		104,
		53,
		40,
		232,
		71,
		112,
		127,
		7,
		126,
		186,
		115,
		113,
		237,
		56,
		235,
		77,
		139,
		107,
		115,
		107,
		127,
		8,
		127,
		7,
		248,
		61,
		235,
		71,
		115,
		103,
		225,
		53,
		11,
		235,
		81
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FloydWarshall(AdjMatrixEdgeWeightedDigraph amewd)
	{
		int num = amewd.V();
		int arg_1E_0 = num;
		int arg_19_0 = num;
		int[] array = new int[2];
		int num2 = arg_19_0;
		array[1] = num2;
		num2 = arg_1E_0;
		array[0] = num2;
		this.distTo = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		int arg_47_0 = num;
		int arg_42_0 = num;
		array = new int[2];
		num2 = arg_42_0;
		array[1] = num2;
		num2 = arg_47_0;
		array[0] = num2;
		this.edgeTo = (DirectedEdge[][])ByteCodeHelper.multianewarray(typeof(DirectedEdge[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num; j++)
			{
				this.distTo[i][j] = double.PositiveInfinity;
			}
		}
		for (int i = 0; i < amewd.V(); i++)
		{
			Iterator iterator = amewd.adj(i).iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
				this.distTo[directedEdge.from()][directedEdge.to()] = directedEdge.weight();
				this.edgeTo[directedEdge.from()][directedEdge.to()] = directedEdge;
			}
			if (this.distTo[i][i] >= (double)0f)
			{
				this.distTo[i][i] = (double)0f;
				this.edgeTo[i][i] = null;
			}
		}
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num; j++)
			{
				if (this.edgeTo[j][i] != null)
				{
					for (int k = 0; k < num; k++)
					{
						if (this.distTo[j][k] > this.distTo[j][i] + this.distTo[i][k])
						{
							this.distTo[j][k] = this.distTo[j][i] + this.distTo[i][k];
							this.edgeTo[j][k] = this.edgeTo[i][k];
						}
					}
					if (this.distTo[j][j] < (double)0f)
					{
						this.hasNegativeCycle = true;
						return;
					}
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		94,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double dist(int i1, int i2)
	{
		if (this.hasNegativeCycle())
		{
			string arg_12_0 = "Negative cost cycle exists";
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException(arg_12_0);
		}
		return this.distTo[i1][i2];
	}
	[LineNumberTable(new byte[]
	{
		58,
		143,
		116,
		104,
		103,
		102,
		108,
		16,
		166,
		104,
		123,
		234,
		54,
		233,
		77
	}), Signature("()Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable negativeCycle()
	{
		int i = 0;
		while (i < this.distTo.Length)
		{
			if (this.distTo[i][i] < (double)0f)
			{
				int num = this.edgeTo.Length;
				EdgeWeightedDigraph edgeWeightedDigraph = new EdgeWeightedDigraph(num);
				for (int j = 0; j < num; j++)
				{
					if (this.edgeTo[i][j] != null)
					{
						edgeWeightedDigraph.addEdge(this.edgeTo[i][j]);
					}
				}
				EdgeWeightedDirectedCycle edgeWeightedDirectedCycle = new EdgeWeightedDirectedCycle(edgeWeightedDigraph);
				if (!FloydWarshall.$assertionsDisabled && !edgeWeightedDirectedCycle.hasCycle())
				{
					Throwable.__<suppressFillInStackTrace>();
					throw new AssertionError();
				}
				return edgeWeightedDirectedCycle.cycle();
			}
			else
			{
				i++;
			}
		}
		return null;
	}
	[LineNumberTable(new byte[]
	{
		108,
		104,
		112,
		108,
		102,
		110,
		39,
		178
	}), Signature("(II)Ljava/lang/Iterable<LDirectedEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable path(int i1, int i2)
	{
		if (this.hasNegativeCycle())
		{
			string arg_12_0 = "Negative cost cycle exists";
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException(arg_12_0);
		}
		if (!this.hasPath(i1, i2))
		{
			return null;
		}
		global::Stack stack = new global::Stack();
		for (DirectedEdge directedEdge = this.edgeTo[i1][i2]; directedEdge != null; directedEdge = this.edgeTo[i1][directedEdge.from()])
		{
			stack.push(directedEdge);
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		122,
		107,
		110,
		127,
		5,
		103,
		109,
		127,
		0,
		127,
		15,
		226,
		61,
		232,
		70,
		229,
		55,
		233,
		76
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedDigraph edgeWeightedDigraph, int num)
	{
		if (!this.hasNegativeCycle())
		{
			for (int i = 0; i < edgeWeightedDigraph.V(); i++)
			{
				Iterator iterator = edgeWeightedDigraph.adj(i).iterator();
				while (iterator.MoveNext())
				{
					DirectedEdge directedEdge = (DirectedEdge)iterator.Current;
					int num2 = directedEdge.to();
					for (int j = 0; j < edgeWeightedDigraph.V(); j++)
					{
						if (this.distTo[j][num2] > this.distTo[j][i] + directedEdge.weight())
						{
							System.err.println(new StringBuilder().append("edge ").append(directedEdge).append(" is eligible").toString());
							return false;
						}
					}
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		105,
		105,
		103,
		105,
		111,
		111,
		127,
		13,
		126,
		241,
		59,
		233,
		72,
		166,
		168,
		112,
		109,
		58,
		168,
		101,
		112,
		122,
		109,
		127,
		19,
		16,
		200,
		229,
		58,
		235,
		74,
		105,
		106,
		127,
		6,
		105,
		234,
		69,
		112,
		112,
		112,
		127,
		24,
		127,
		10,
		127,
		3,
		167,
		255,
		5,
		56,
		43,
		235,
		79
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		AdjMatrixEdgeWeightedDigraph adjMatrixEdgeWeightedDigraph = new AdjMatrixEdgeWeightedDigraph(num);
		for (int i = 0; i < num2; i++)
		{
			int j = ByteCodeHelper.d2i((double)num * java.lang.Math.random());
			int k = ByteCodeHelper.d2i((double)num * java.lang.Math.random());
			double num3 = (double)java.lang.Math.round(100.0 * (java.lang.Math.random() - 0.15)) / 100.0;
			if (j == k)
			{
				adjMatrixEdgeWeightedDigraph.addEdge(new DirectedEdge(j, k, java.lang.Math.abs(num3)));
			}
			else
			{
				adjMatrixEdgeWeightedDigraph.addEdge(new DirectedEdge(j, k, num3));
			}
		}
		StdOut.println(adjMatrixEdgeWeightedDigraph);
		FloydWarshall floydWarshall = new FloydWarshall(adjMatrixEdgeWeightedDigraph);
		StdOut.printf("  ", new object[0]);
		for (int j = 0; j < adjMatrixEdgeWeightedDigraph.V(); j++)
		{
			StdOut.printf("%6d ", new object[]
			{
				Integer.valueOf(j)
			});
		}
		StdOut.println();
		for (int j = 0; j < adjMatrixEdgeWeightedDigraph.V(); j++)
		{
			StdOut.printf("%3d: ", new object[]
			{
				Integer.valueOf(j)
			});
			for (int k = 0; k < adjMatrixEdgeWeightedDigraph.V(); k++)
			{
				if (floydWarshall.hasPath(j, k))
				{
					StdOut.printf("%6.2f ", new object[]
					{
						java.lang.Double.valueOf(floydWarshall.dist(j, k))
					});
				}
				else
				{
					StdOut.printf("  Inf ", new object[0]);
				}
			}
			StdOut.println();
		}
		if (floydWarshall.hasNegativeCycle())
		{
			StdOut.println("Negative cost cycle:");
			Iterator iterator = floydWarshall.negativeCycle().iterator();
			while (iterator.MoveNext())
			{
				DirectedEdge obj = (DirectedEdge)iterator.Current;
				StdOut.println(obj);
			}
			StdOut.println();
		}
		else
		{
			for (int j = 0; j < adjMatrixEdgeWeightedDigraph.V(); j++)
			{
				for (int k = 0; k < adjMatrixEdgeWeightedDigraph.V(); k++)
				{
					if (floydWarshall.hasPath(j, k))
					{
						StdOut.printf("%d to %d (%5.2f)  ", new object[]
						{
							Integer.valueOf(j),
							Integer.valueOf(k),
							java.lang.Double.valueOf(floydWarshall.dist(j, k))
						});
						Iterator iterator2 = floydWarshall.path(j, k).iterator();
						while (iterator2.hasNext())
						{
							DirectedEdge obj2 = (DirectedEdge)iterator2.next();
							StdOut.print(new StringBuilder().append(obj2).append("  ").toString());
						}
						StdOut.println();
					}
					else
					{
						StdOut.printf("%d to %d no path\n", new object[]
						{
							Integer.valueOf(j),
							Integer.valueOf(k)
						});
					}
				}
			}
		}
	}
	[LineNumberTable(38)]
	static FloydWarshall()
	{
		FloydWarshall.$assertionsDisabled = !ClassLiteral<FloydWarshall>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FordFulkerson : java.lang.Object
{
	private bool[] marked;
	private FlowEdge[] edgeTo;
	private double value;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		109,
		159,
		6,
		109,
		159,
		6,
		100,
		144,
		111,
		107,
		208,
		174,
		106,
		102,
		54,
		241,
		69,
		102,
		47,
		209,
		111,
		165,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FordFulkerson(FlowNetwork fn, int i1, int i2)
	{
		if (i1 < 0 || i1 >= fn.V())
		{
			string arg_34_0 = new StringBuilder().append("Source s is invalid: ").append(i1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_34_0);
		}
		if (i2 < 0 || i2 >= fn.V())
		{
			string arg_66_0 = new StringBuilder().append("Sink t is invalid: ").append(i2).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_66_0);
		}
		if (i1 == i2)
		{
			string arg_7A_0 = "Source equals sink";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_7A_0);
		}
		this.value = this.excess(fn, i2);
		if (!this.isFeasible(fn, i1, i2))
		{
			string arg_A4_0 = "Initial flow is infeasible";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_A4_0);
		}
		while (this.hasAugmentingPath(fn, i1, i2))
		{
			double num = double.PositiveInfinity;
			for (int num2 = i2; num2 != i1; num2 = this.edgeTo[num2].other(num2))
			{
				num = java.lang.Math.min(num, this.edgeTo[num2].residualCapacityTo(num2));
			}
			for (int num2 = i2; num2 != i1; num2 = this.edgeTo[num2].other(num2))
			{
				this.edgeTo[num2].addResidualFlowTo(num2, num);
			}
			this.value += num;
		}
		if (!FordFulkerson.$assertionsDisabled && !this.check(fn, i1, i2))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual double value()
	{
		return this.value;
	}
	[LineNumberTable(new byte[]
	{
		97,
		102,
		127,
		2,
		117,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private double excess(FlowNetwork flowNetwork, int num)
	{
		double num2 = (double)0f;
		Iterator iterator = flowNetwork.adj(num).iterator();
		while (iterator.MoveNext())
		{
			FlowEdge flowEdge = (FlowEdge)iterator.Current;
			if (num == flowEdge.from())
			{
				num2 -= flowEdge.flow();
			}
			else
			{
				num2 += flowEdge.flow();
			}
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		107,
		170,
		110,
		127,
		2,
		122,
		127,
		5,
		228,
		60,
		233,
		74,
		119,
		127,
		12,
		127,
		10,
		130,
		119,
		127,
		12,
		127,
		10,
		130,
		107,
		106,
		112,
		127,
		15,
		226,
		60,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isFeasible(FlowNetwork flowNetwork, int num, int num2)
	{
		double num3 = 1E-11;
		for (int i = 0; i < flowNetwork.V(); i++)
		{
			Iterator iterator = flowNetwork.adj(i).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (flowEdge.flow() < -num3 || flowEdge.flow() > flowEdge.capacity() + num3)
				{
					System.err.println(new StringBuilder().append("Edge does not satisfy capacity constraints: ").append(flowEdge).toString());
					return false;
				}
			}
		}
		if (java.lang.Math.abs(this.value + this.excess(flowNetwork, num)) > num3)
		{
			System.err.println(new StringBuilder().append("Excess at source = ").append(this.excess(flowNetwork, num)).toString());
			System.err.println(new StringBuilder().append("Max flow         = ").append(this.value).toString());
			return false;
		}
		if (java.lang.Math.abs(this.value - this.excess(flowNetwork, num2)) > num3)
		{
			System.err.println(new StringBuilder().append("Excess at sink   = ").append(this.excess(flowNetwork, num2)).toString());
			System.err.println(new StringBuilder().append("Max flow         = ").append(this.value).toString());
			return false;
		}
		for (int i = 0; i < flowNetwork.V(); i++)
		{
			if (i != num)
			{
				if (i != num2)
				{
					if (java.lang.Math.abs(this.excess(flowNetwork, i)) > num3)
					{
						System.err.println(new StringBuilder().append("Net flow out of ").append(i).append(" doesn't equal zero").toString());
						return false;
					}
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		65,
		113,
		177,
		102,
		108,
		105,
		107,
		145,
		127,
		2,
		169,
		111,
		107,
		106,
		106,
		173,
		101,
		165
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool hasAugmentingPath(FlowNetwork flowNetwork, int num, int num2)
	{
		this.edgeTo = new FlowEdge[flowNetwork.V()];
		this.marked = new bool[flowNetwork.V()];
		global::Queue queue = new global::Queue();
		queue.enqueue(Integer.valueOf(num));
		this.marked[num] = true;
		while (!queue.IsEmpty)
		{
			int i = ((Integer)queue.dequeue()).intValue();
			Iterator iterator = flowNetwork.adj(i).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				int num3 = flowEdge.other(i);
				if (flowEdge.residualCapacityTo(num3) > (double)0f && !this.marked[num3])
				{
					this.edgeTo[num3] = flowEdge;
					this.marked[num3] = true;
					queue.enqueue(Integer.valueOf(num3));
				}
			}
		}
		return this.marked[num2];
	}
	[LineNumberTable(new byte[]
	{
		160,
		82,
		107,
		111,
		194,
		105,
		127,
		15,
		130,
		105,
		127,
		15,
		194,
		102,
		110,
		127,
		2,
		127,
		6,
		236,
		61,
		233,
		71,
		107,
		113,
		127,
		26,
		162
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(FlowNetwork flowNetwork, int num, int num2)
	{
		if (!this.isFeasible(flowNetwork, num, num2))
		{
			System.err.println("Flow is infeasible");
			return false;
		}
		if (!this.inCut(num))
		{
			System.err.println(new StringBuilder().append("source ").append(num).append(" is not on source side of min cut").toString());
			return false;
		}
		if (this.inCut(num2))
		{
			System.err.println(new StringBuilder().append("sink ").append(num2).append(" is on source side of min cut").toString());
			return false;
		}
		double num3 = (double)0f;
		for (int i = 0; i < flowNetwork.V(); i++)
		{
			Iterator iterator = flowNetwork.adj(i).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (i == flowEdge.from() && this.inCut(flowEdge.from()) && !this.inCut(flowEdge.to()))
				{
					num3 += flowEdge.capacity();
				}
			}
		}
		double num4 = 1E-11;
		if (java.lang.Math.abs(num3 - this.value) > num4)
		{
			System.err.println(new StringBuilder().append("Max flow value = ").append(this.value).append(", min cut value = ").append(num3).toString());
			return false;
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		55,
		104,
		104,
		127,
		24
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool inCut(int i)
	{
		int num = this.marked.Length;
		if (i < 0 || i >= num)
		{
			string arg_41_0 = new StringBuilder().append("vertex ").append(i).append(" is not between 0 and ").append(num - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_41_0);
		}
		return this.marked[i];
	}
	[LineNumberTable(new byte[]
	{
		160,
		122,
		105,
		105,
		102,
		105,
		167,
		107,
		127,
		16,
		113,
		127,
		8,
		121,
		255,
		3,
		61,
		235,
		72,
		106,
		110,
		63,
		12,
		168,
		133,
		127,
		8
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int i = Integer.parseInt(strarr[1]);
		int num2 = 0;
		int num3 = num - 1;
		FlowNetwork flowNetwork = new FlowNetwork(num, i);
		StdOut.println(flowNetwork);
		FordFulkerson fordFulkerson = new FordFulkerson(flowNetwork, num2, num3);
		StdOut.println(new StringBuilder().append("Max flow from ").append(num2).append(" to ").append(num3).toString());
		for (int j = 0; j < flowNetwork.V(); j++)
		{
			Iterator iterator = flowNetwork.adj(j).iterator();
			while (iterator.MoveNext())
			{
				FlowEdge flowEdge = (FlowEdge)iterator.Current;
				if (j == flowEdge.from() && flowEdge.flow() > (double)0f)
				{
					StdOut.println(new StringBuilder().append("   ").append(flowEdge).toString());
				}
			}
		}
		StdOut.print("Min cut: ");
		for (int j = 0; j < flowNetwork.V(); j++)
		{
			if (fordFulkerson.inCut(j))
			{
				StdOut.print(new StringBuilder().append(j).append(" ").toString());
			}
		}
		StdOut.println();
		StdOut.println(new StringBuilder().append("Max flow value = ").append(fordFulkerson.value()).toString());
	}
	[LineNumberTable(37)]
	static FordFulkerson()
	{
		FordFulkerson.$assertionsDisabled = !ClassLiteral<FordFulkerson>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class FrequencyCounter : java.lang.Object
{
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public FrequencyCounter()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		100,
		105,
		166,
		106,
		103,
		108,
		100,
		106,
		191,
		4,
		110,
		132,
		165,
		103,
		110,
		127,
		5,
		127,
		7,
		166,
		127,
		14,
		127,
		0,
		127,
		2
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 0;
		int num2 = 0;
		int num3 = Integer.parseInt(strarr[0]);
		ST sT = new ST();
		string text;
		while (!StdIn.IsEmpty)
		{
			text = StdIn.readString();
			if (java.lang.String.instancehelper_length(text) >= num3)
			{
				num2++;
				if (sT.contains(text))
				{
					sT.put(text, Integer.valueOf(((Integer)sT.get(text)).intValue() + 1));
				}
				else
				{
					sT.put(text, Integer.valueOf(1));
					num++;
				}
			}
		}
		text = "";
		sT.put(text, Integer.valueOf(0));
		Iterator iterator = sT.keys().iterator();
		while (iterator.MoveNext())
		{
			string text2 = (string)iterator.Current;
			if (((Integer)sT.get(text2)).intValue() > ((Integer)sT.get(text)).intValue())
			{
				text = text2;
			}
		}
		StdOut.println(new StringBuilder().append(text).append(" ").append(sT.get(text)).toString());
		StdOut.println(new StringBuilder().append("distinct = ").append(num).toString());
		StdOut.println(new StringBuilder().append("words    = ").append(num2).toString());
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class GabowSCC : java.lang.Object
{
	private bool[] marked;
	private int[] id;
	private int[] preorder;
	private int pre;
	private int count;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack stack1;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack stack2;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		31,
		105,
		123,
		113,
		113,
		127,
		10,
		116,
		107,
		127,
		7,
		243,
		69,
		120,
		172,
		119,
		111,
		101,
		142
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.marked[num] = true;
		int[] arg_23_0 = this.preorder;
		int num2 = this.pre;
		int arg_23_2 = num2;
		this.pre = num2 + 1;
		arg_23_0[num] = arg_23_2;
		this.stack1.push(Integer.valueOf(num));
		this.stack2.push(Integer.valueOf(num));
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num3 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num3])
			{
				this.dfs(digraph, num3);
			}
			else if (this.id[num3] == -1)
			{
				while (this.preorder[((Integer)this.stack2.peek()).intValue()] > this.preorder[num3])
				{
					this.stack2.pop();
				}
			}
		}
		if (((Integer)this.stack2.peek()).intValue() == num)
		{
			this.stack2.pop();
			int num4;
			do
			{
				num4 = ((Integer)this.stack1.pop()).intValue();
				this.id[num4] = this.count;
			}
			while (num4 != num);
			this.count++;
		}
	}
	[LineNumberTable(new byte[]
	{
		85,
		103,
		107,
		107,
		127,
		3,
		2,
		38,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Digraph digraph)
	{
		TransitiveClosure transitiveClosure = new TransitiveClosure(digraph);
		for (int i = 0; i < digraph.V(); i++)
		{
			for (int j = 0; j < digraph.V(); j++)
			{
				if (this.stronglyConnected(i, j) != ((!transitiveClosure.reachable(i, j) || !transitiveClosure.reachable(j, i)) ? false : true))
				{
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(121)]
	public virtual bool stronglyConnected(int i1, int i2)
	{
		return this.id[i1] == this.id[i2];
	}
	[LineNumberTable(new byte[]
	{
		14,
		104,
		113,
		107,
		107,
		113,
		113,
		154,
		107,
		50,
		230,
		69,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public GabowSCC(Digraph d)
	{
		this.marked = new bool[d.V()];
		this.stack1 = new global::Stack();
		this.stack2 = new global::Stack();
		this.id = new int[d.V()];
		this.preorder = new int[d.V()];
		for (int i = 0; i < d.V(); i++)
		{
			this.id[i] = -1;
		}
		for (int i = 0; i < d.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(d, i);
			}
		}
		if (!GabowSCC.$assertionsDisabled && !this.check(d))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(130)]
	public virtual int id(int i)
	{
		return this.id[i];
	}
	[LineNumberTable(new byte[]
	{
		99,
		110,
		103,
		167,
		103,
		191,
		0,
		109,
		104,
		42,
		168,
		109,
		55,
		232,
		69,
		104,
		127,
		9,
		159,
		3,
		229,
		60,
		232,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		GabowSCC gabowSCC = new GabowSCC(digraph);
		int num = gabowSCC.count();
		StdOut.println(new StringBuilder().append(num).append(" components").toString());
		global::Queue[] array = (global::Queue[])new global::Queue[num];
		for (int j = 0; j < num; j++)
		{
			array[j] = new global::Queue();
		}
		for (int j = 0; j < digraph.V(); j++)
		{
			array[gabowSCC.id(j)].enqueue(Integer.valueOf(j));
		}
		for (int j = 0; j < num; j++)
		{
			Iterator iterator = array[j].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
	}
	[LineNumberTable(49)]
	static GabowSCC()
	{
		GabowSCC.$assertionsDisabled = !ClassLiteral<GabowSCC>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class GaussianElimination : java.lang.Object
{
	private const double EPSILON = 1E-10;
	[LineNumberTable(new byte[]
	{
		159,
		161,
		131,
		169,
		98,
		104,
		118,
		2,
		230,
		69,
		112,
		176,
		117,
		208,
		109,
		111,
		121,
		104,
		63,
		0,
		232,
		61,
		235,
		46,
		233,
		92,
		104,
		107,
		103,
		106,
		50,
		168,
		241,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] lsolve(double[][] darr1, double[] darr2)
	{
		int num = darr2.Length;
		for (int i = 0; i < num; i++)
		{
			int j = i;
			for (int k = i + 1; k < num; k++)
			{
				if (java.lang.Math.abs(darr1[k][i]) > java.lang.Math.abs(darr1[j][i]))
				{
					j = k;
				}
			}
			double[] array = darr1[i];
			darr1[i] = darr1[j];
			darr1[j] = array;
			double num2 = darr2[i];
			darr2[i] = darr2[j];
			darr2[j] = num2;
			if (java.lang.Math.abs(darr1[i][i]) <= 1E-10)
			{
				string arg_73_0 = "Matrix is singular or nearly singular";
				Throwable.__<suppressFillInStackTrace>();
				throw new java.lang.ArithmeticException(arg_73_0);
			}
			for (int l = i + 1; l < num; l++)
			{
				double num3 = darr1[l][i] / darr1[i][i];
				int num4 = l;
				darr2[num4] -= num3 * darr2[i];
				for (int m = i; m < num; m++)
				{
					double[] arg_BE_0 = darr1[l];
					num4 = m;
					double[] array2 = arg_BE_0;
					array2[num4] -= num3 * darr1[i][m];
				}
			}
		}
		double[] array3 = new double[num];
		for (int j = num - 1; j >= 0; j += -1)
		{
			double num5 = (double)0f;
			for (int n = j + 1; n < num; n++)
			{
				num5 += darr1[j][n] * array3[n];
			}
			array3[j] = (darr2[j] - num5) / darr1[j][j];
		}
		return array3;
	}
	[LineNumberTable(14)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public GaussianElimination()
	{
	}
	[LineNumberTable(new byte[]
	{
		13,
		98,
		255,
		95,
		69,
		127,
		12,
		200,
		104,
		41,
		200
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 3;
		double[][] darr = new double[][]
		{
			new double[]
			{
				(double)0f,
				(double)1f,
				(double)1f
			},
			new double[]
			{
				2.0,
				4.0,
				-2.0
			},
			new double[]
			{
				(double)0f,
				3.0,
				15.0
			}
		};
		double[] darr2 = new double[]
		{
			4.0,
			2.0,
			36.0
		};
		double[] array = GaussianElimination.lsolve(darr, darr2);
		for (int i = 0; i < num; i++)
		{
			StdOut.println(array[i]);
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Genome : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		159,
		162,
		107,
		102,
		103,
		166,
		102,
		111,
		8,
		198,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void compress()
	{
		Alphabet alphabet = new Alphabet("ACTG");
		string @this = BinaryStdIn.readString();
		int num = java.lang.String.instancehelper_length(@this);
		BinaryStdOut.write(num);
		for (int i = 0; i < num; i++)
		{
			int i2 = alphabet.toIndex(java.lang.String.instancehelper_charAt(@this, i));
			BinaryStdOut.write(i2, 2);
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		176,
		107,
		134,
		102,
		103,
		13,
		198,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void expand()
	{
		Alphabet alphabet = new Alphabet("ACTG");
		int num = BinaryStdIn.readInt();
		for (int i = 0; i < num; i++)
		{
			int i2 = (int)BinaryStdIn.readChar(2);
			BinaryStdOut.write(alphabet.toChar(i2), 8);
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(17)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Genome()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		118,
		118,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		if (java.lang.String.instancehelper_equals(strarr[0], "-"))
		{
			Genome.compress();
		}
		else
		{
			if (!java.lang.String.instancehelper_equals(strarr[0], "+"))
			{
				string arg_36_0 = "Illegal command line argument";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_36_0);
			}
			Genome.expand();
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class GrahamScan : java.lang.Object
{
	[Signature("LStack<LPoint2D;>;")]
	private global::Stack hull;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		160,
		8,
		235,
		69,
		99,
		103,
		102,
		38,
		230,
		70,
		198,
		144,
		206,
		102,
		47,
		134,
		197,
		106,
		51,
		136,
		177,
		108,
		114,
		126,
		148,
		109,
		239,
		58,
		235,
		73,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public GrahamScan(Point2D[] pdarr)
	{
		this.hull = new global::Stack();
		int num = pdarr.Length;
		Point2D[] array = new Point2D[num];
		int i;
		for (i = 0; i < num; i++)
		{
			array[i] = pdarr[i];
		}
		Arrays.sort(array);
		Arrays.sort(array, 1, num, array[0].__<>POLAR_ORDER);
		this.hull.push(array[0]);
		for (i = 1; i < num; i++)
		{
			if (!array[0].equals(array[i]))
			{
				break;
			}
		}
		if (i == num)
		{
			return;
		}
		int j;
		for (j = i + 1; j < num; j++)
		{
			if (Point2D.ccw(array[0], array[i], array[j]) != 0)
			{
				break;
			}
		}
		this.hull.push(array[j - 1]);
		for (int k = j; k < num; k++)
		{
			Point2D point2D = (Point2D)this.hull.pop();
			while (Point2D.ccw((Point2D)this.hull.peek(), point2D, array[k]) <= 0)
			{
				point2D = (Point2D)this.hull.pop();
			}
			this.hull.push(point2D);
			this.hull.push(array[k]);
		}
		if (!GrahamScan.$assertionsDisabled && !this.isConvex())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		14,
		102,
		127,
		10
	}), Signature("()Ljava/lang/Iterable<LPoint2D;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable hull()
	{
		global::Stack stack = new global::Stack();
		Iterator iterator = this.hull.iterator();
		while (iterator.MoveNext())
		{
			Point2D obj = (Point2D)iterator.Current;
			stack.push(obj);
		}
		return stack;
	}
	[LineNumberTable(new byte[]
	{
		21,
		108,
		134,
		103,
		98,
		127,
		2,
		171,
		104,
		127,
		15,
		2,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isConvex()
	{
		int num = this.hull.size();
		if (num <= 2)
		{
			return true;
		}
		Point2D[] array = new Point2D[num];
		int num2 = 0;
		Iterator iterator = this.hull().iterator();
		while (iterator.MoveNext())
		{
			Point2D point2D = (Point2D)iterator.Current;
			Point2D[] arg_44_0 = array;
			int arg_44_1 = num2;
			num2++;
			arg_44_0[arg_44_1] = point2D;
		}
		for (int i = 0; i < num; i++)
		{
			Point2D arg_75_0 = array[i];
			Point2D[] arg_63_0 = array;
			int expr_57 = i + 1;
			int expr_59 = num;
			Point2D arg_75_1 = arg_63_0[(expr_59 != -1) ? (expr_57 % expr_59) : 0];
			Point2D[] arg_74_0 = array;
			int expr_68 = i + 2;
			int expr_6A = num;
			if (Point2D.ccw(arg_75_0, arg_75_1, arg_74_0[(expr_6A != -1) ? (expr_68 % expr_6A) : 0]) <= 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		40,
		102,
		103,
		102,
		102,
		103,
		237,
		61,
		230,
		69,
		104,
		127,
		6,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = StdIn.readInt();
		Point2D[] array = new Point2D[num];
		for (int i = 0; i < num; i++)
		{
			int num2 = StdIn.readInt();
			int num3 = StdIn.readInt();
			array[i] = new Point2D((double)num2, (double)num3);
		}
		GrahamScan grahamScan = new GrahamScan(array);
		Iterator iterator = grahamScan.hull().iterator();
		while (iterator.MoveNext())
		{
			Point2D obj = (Point2D)iterator.Current;
			StdOut.println(obj);
		}
	}
	[LineNumberTable(15)]
	static GrahamScan()
	{
		GrahamScan.$assertionsDisabled = !ClassLiteral<GrahamScan>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Graph : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int V;
	private int E;
	[Signature("[LBag<Ljava/lang/Integer;>;")]
	private Bag[] adj;
	public virtual int V()
	{
		return this.V;
	}
	[LineNumberTable(new byte[]
	{
		103,
		120
	}), Signature("(I)Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable adj(int i)
	{
		if (i < 0 || i >= this.V)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.adj[i];
	}
	[LineNumberTable(new byte[]
	{
		16,
		104,
		116,
		103,
		103,
		113,
		102,
		45,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Graph(int i)
	{
		if (i < 0)
		{
			string arg_16_0 = "Number of vertices must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		this.V = i;
		this.E = 0;
		this.adj = (Bag[])new Bag[i];
		for (int j = 0; j < i; j++)
		{
			this.adj[j] = new Bag();
		}
	}
	[LineNumberTable(new byte[]
	{
		88,
		120,
		120,
		110,
		115,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void addEdge(int i1, int i2)
	{
		if (i1 < 0 || i1 >= this.V)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (i2 < 0 || i2 >= this.V)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		this.E++;
		this.adj[i1].add(Integer.valueOf(i2));
		this.adj[i2].add(Integer.valueOf(i1));
	}
	[LineNumberTable(new byte[]
	{
		36,
		110,
		103,
		116,
		102,
		103,
		104,
		233,
		61,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Graph(In i) : this(i.readInt())
	{
		int num = i.readInt();
		if (num < 0)
		{
			string arg_23_0 = "Number of edges must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_23_0);
		}
		for (int j = 0; j < num; j++)
		{
			int i2 = i.readInt();
			int i3 = i.readInt();
			this.addEdge(i2, i3);
		}
	}
	public virtual int E()
	{
		return this.E;
	}
	[LineNumberTable(new byte[]
	{
		51,
		110,
		108,
		142,
		102,
		127,
		9,
		143,
		127,
		2,
		246,
		57,
		233,
		74
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Graph(Graph g) : this(g.V())
	{
		this.E = g.E();
		for (int i = 0; i < g.V(); i++)
		{
			global::Stack stack = new global::Stack();
			Iterator iterator = g.adj[i].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				stack.push(Integer.valueOf(i2));
			}
			iterator = stack.iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				this.adj[i].add(Integer.valueOf(i2));
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		115,
		102,
		107,
		127,
		34,
		110,
		127,
		2,
		127,
		9,
		159,
		5,
		232,
		59,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		string property = System.getProperty("line.separator");
		stringBuilder.append(new StringBuilder().append(this.V).append(" vertices, ").append(this.E).append(" edges ").append(property).toString());
		for (int i = 0; i < this.V; i++)
		{
			stringBuilder.append(new StringBuilder().append(i).append(": ").toString());
			Iterator iterator = this.adj[i].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				stringBuilder.append(new StringBuilder().append(i2).append(" ").toString());
			}
			stringBuilder.append(property);
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		69,
		110,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Graph obj = new Graph(i);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class GraphGenerator : java.lang.Object
{
	[EnclosingMethod("GraphGenerator", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("GraphGenerator.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.lang.Comparable"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static | Modifiers.Final), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LGraphGenerator$Edge;>;"), SourceFile("GraphGenerator.java")]
	internal sealed class Edge : java.lang.Object, Comparable
	{
		private int v;
		private int w;
		[LineNumberTable(25), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Edge(int num, int num2, GraphGenerator.1) : this(num, num2)
		{
		}
		[LineNumberTable(new byte[]
		{
			159,
			170,
			104,
			100,
			103,
			169,
			103,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Edge(int num, int num2)
		{
			if (num < num2)
			{
				this.v = num;
				this.w = num2;
			}
			else
			{
				this.v = num2;
				this.w = num;
			}
		}
		[LineNumberTable(new byte[]
		{
			159,
			181,
			112,
			112,
			112,
			112
		})]
		public virtual int compareTo(GraphGenerator.Edge edge)
		{
			if (this.v < edge.v)
			{
				return -1;
			}
			if (this.v > edge.v)
			{
				return 1;
			}
			if (this.w < edge.w)
			{
				return -1;
			}
			if (this.w > edge.w)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(25), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(object obj)
		{
			return this.compareTo((GraphGenerator.Edge)obj);
		}
		[HideFromJava]
		int IComparable.Object;)IcompareTo(object obj)
		{
			return this.compareTo(obj);
		}
	}
	[LineNumberTable(new byte[]
	{
		33,
		114,
		112,
		103,
		102,
		104,
		105,
		8,
		38,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph simple(int i, double d)
	{
		if (d < (double)0f || d > (double)1f)
		{
			string arg_1C_0 = "Probability must be between 0 and 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		Graph graph = new Graph(i);
		for (int j = 0; j < i; j++)
		{
			for (int k = j + 1; k < i; k++)
			{
				if (StdRandom.bernoulli(d))
				{
					graph.addEdge(j, k);
				}
			}
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		74,
		121,
		116,
		137,
		105,
		114,
		134,
		102,
		105,
		104,
		106,
		112,
		106,
		104,
		142,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph bipartite(int i1, int i2, int i3)
	{
		if ((long)i3 > (long)i1 * (long)i2)
		{
			string arg_13_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		if (i3 < 0)
		{
			string arg_27_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_27_0);
		}
		Graph graph = new Graph(i1 + i2);
		int[] array = new int[i1 + i2];
		for (int j = 0; j < i1 + i2; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		SET sET = new SET();
		while (graph.E() < i3)
		{
			int num = StdRandom.uniform(i1);
			int num2 = i1 + StdRandom.uniform(i2);
			GraphGenerator.Edge c = new GraphGenerator.Edge(array[num], array[num2], null);
			if (!sET.contains(c))
			{
				sET.add(c);
				graph.addEdge(array[num], array[num2]);
			}
		}
		return graph;
	}
	[LineNumberTable(99)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph complete(int i)
	{
		return GraphGenerator.simple(i, (double)1f);
	}
	[LineNumberTable(new byte[]
	{
		6,
		126,
		116,
		103,
		102,
		105,
		103,
		103,
		106,
		110,
		104,
		136,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph simple(int i1, int i2)
	{
		if ((long)i2 > (long)i1 * (long)(i1 - 1) / 2L)
		{
			string arg_18_0 = "Too many edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		if (i2 < 0)
		{
			string arg_2C_0 = "Too few edges";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		Graph graph = new Graph(i1);
		SET sET = new SET();
		while (graph.E() < i2)
		{
			int num = StdRandom.uniform(i1);
			int num2 = StdRandom.uniform(i1);
			GraphGenerator.Edge c = new GraphGenerator.Edge(num, num2, null);
			if (num != num2 && !sET.contains(c))
			{
				sET.add(c);
				graph.addEdge(num, num2);
			}
		}
		return graph;
	}
	[LineNumberTable(110)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph completeBipartite(int i1, int i2)
	{
		return GraphGenerator.bipartite(i1, i2, i1 * i2);
	}
	[LineNumberTable(new byte[]
	{
		106,
		114,
		112,
		105,
		114,
		102,
		105,
		102,
		104,
		105,
		15,
		40,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph bipartite(int i1, int i2, double d)
	{
		if (d < (double)0f || d > (double)1f)
		{
			string arg_1C_0 = "Probability must be between 0 and 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		int[] array = new int[i1 + i2];
		for (int j = 0; j < i1 + i2; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		Graph graph = new Graph(i1 + i2);
		for (int k = 0; k < i1; k++)
		{
			for (int l = 0; l < i2; l++)
			{
				if (StdRandom.bernoulli(d))
				{
					graph.addEdge(array[k], array[i1 + l]);
				}
			}
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		125,
		103,
		103,
		112,
		102,
		104,
		46,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph path(int i)
	{
		Graph graph = new Graph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i - 1; j++)
		{
			graph.addEdge(array[j], array[j + 1]);
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		93,
		103,
		103,
		112,
		102,
		104,
		46,
		166,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph cycle(int i)
	{
		Graph graph = new Graph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i - 1; j++)
		{
			graph.addEdge(array[j], array[j + 1]);
		}
		graph.addEdge(array[i - 1], array[0]);
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		77,
		103,
		103,
		112,
		102,
		102,
		48,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph binaryTree(int i)
	{
		Graph graph = new Graph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 1; j < i; j++)
		{
			graph.addEdge(array[j], array[(j - 1) / 2]);
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		188,
		167,
		230,
		70,
		105,
		104,
		41,
		198,
		103,
		104,
		37,
		136,
		106,
		53,
		200,
		103,
		104,
		53,
		200,
		109,
		115,
		108,
		115,
		117,
		249,
		59,
		235,
		71,
		127,
		9
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph tree(int i)
	{
		Graph graph = new Graph(i);
		if (i == 1)
		{
			return graph;
		}
		int[] array = new int[i - 2];
		for (int j = 0; j < i - 2; j++)
		{
			array[j] = StdRandom.uniform(i);
		}
		int[] array2 = new int[i];
		for (int k = 0; k < i; k++)
		{
			array2[k] = 1;
		}
		for (int k = 0; k < i - 2; k++)
		{
			int[] arg_5A_0 = array2;
			int num = array[k];
			int[] array3 = arg_5A_0;
			array3[num]++;
		}
		MinPQ minPQ = new MinPQ();
		for (int l = 0; l < i; l++)
		{
			if (array2[l] == 1)
			{
				minPQ.insert(Integer.valueOf(l));
			}
		}
		for (int l = 0; l < i - 2; l++)
		{
			int num2 = ((Integer)minPQ.delMin()).intValue();
			graph.addEdge(num2, array[l]);
			int[] arg_CD_0 = array2;
			int num = num2;
			int[] array3 = arg_CD_0;
			array3[num]--;
			int[] arg_E2_0 = array2;
			num = array[l];
			array3 = arg_E2_0;
			array3[num]--;
			if (array2[array[l]] == 1)
			{
				minPQ.insert(Integer.valueOf(array[l]));
			}
		}
		graph.addEdge(((Integer)minPQ.delMin()).intValue(), ((Integer)minPQ.delMin()).intValue());
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		160,
		127,
		1,
		167,
		105,
		102,
		102,
		40,
		38,
		230,
		71,
		102,
		106,
		50,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph regular(int i1, int i2)
	{
		bool expr_02 = i1 * i2 != 0;
		int expr_04 = 2;
		if (expr_04 != -1 && (expr_02 ? 1 : 0) % expr_04 != 0)
		{
			string arg_1A_0 = "Number of vertices * k must be even";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1A_0);
		}
		Graph graph = new Graph(i1);
		int[] array = new int[i1 * i2];
		for (int j = 0; j < i1; j++)
		{
			for (int k = 0; k < i2; k++)
			{
				array[j + i1 * k] = j;
			}
		}
		StdRandom.shuffle(array);
		for (int j = 0; j < i1 * i2 / 2; j++)
		{
			graph.addEdge(array[2 * j], array[2 * j + 1]);
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		138,
		116,
		103,
		103,
		112,
		166,
		102,
		44,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph star(int i)
	{
		if (i <= 0)
		{
			string arg_0E_0 = "Number of vertices must be at least 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_0E_0);
		}
		Graph graph = new Graph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 1; j < i; j++)
		{
			graph.addEdge(array[0], array[j]);
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		160,
		111,
		116,
		103,
		103,
		112,
		166,
		104,
		46,
		166,
		174,
		102,
		44,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Graph wheel(int i)
	{
		if (i <= 1)
		{
			string arg_0E_0 = "Number of vertices must be at least 2";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_0E_0);
		}
		Graph graph = new Graph(i);
		int[] array = new int[i];
		for (int j = 0; j < i; j++)
		{
			array[j] = j;
		}
		StdRandom.shuffle(array);
		for (int j = 1; j < i - 1; j++)
		{
			graph.addEdge(array[j], array[j + 1]);
		}
		graph.addEdge(array[i - 1], array[1]);
		for (int j = 1; j < i; j++)
		{
			graph.addEdge(array[0], array[j]);
		}
		return graph;
	}
	[LineNumberTable(new byte[]
	{
		159,
		166,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public GraphGenerator()
	{
	}
	[LineNumberTable(new byte[]
	{
		160,
		229,
		105,
		105,
		100,
		132,
		111,
		112,
		138,
		111,
		113,
		138,
		111,
		110,
		114,
		138,
		111,
		113,
		138,
		111,
		114,
		138,
		111,
		106,
		115,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		112,
		138,
		111,
		113,
		138,
		111,
		112,
		138,
		111,
		112,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		int num3 = num / 2;
		int num4 = num - num3;
		System.@out.println("complete graph");
		System.@out.println(GraphGenerator.complete(num));
		System.@out.println();
		System.@out.println("simple");
		System.@out.println(GraphGenerator.simple(num, num2));
		System.@out.println();
		System.@out.println("Erdos-Renyi");
		double d = (double)num2 / (double)(num * (num - 1) / 2);
		System.@out.println(GraphGenerator.simple(num, d));
		System.@out.println();
		System.@out.println("complete bipartite");
		System.@out.println(GraphGenerator.completeBipartite(num3, num4));
		System.@out.println();
		System.@out.println("bipartite");
		System.@out.println(GraphGenerator.bipartite(num3, num4, num2));
		System.@out.println();
		System.@out.println("Erdos Renyi bipartite");
		double d2 = (double)num2 / (double)(num3 * num4);
		System.@out.println(GraphGenerator.bipartite(num3, num4, d2));
		System.@out.println();
		System.@out.println("path");
		System.@out.println(GraphGenerator.path(num));
		System.@out.println();
		System.@out.println("cycle");
		System.@out.println(GraphGenerator.cycle(num));
		System.@out.println();
		System.@out.println("binary tree");
		System.@out.println(GraphGenerator.binaryTree(num));
		System.@out.println();
		System.@out.println("tree");
		System.@out.println(GraphGenerator.tree(num));
		System.@out.println();
		System.@out.println("4-regular");
		System.@out.println(GraphGenerator.regular(num, 4));
		System.@out.println();
		System.@out.println("star");
		System.@out.println(GraphGenerator.star(num));
		System.@out.println();
		System.@out.println("wheel");
		System.@out.println(GraphGenerator.wheel(num));
		System.@out.println();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class GREP : java.lang.Object
{
	[LineNumberTable(28)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public GREP()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		172,
		127,
		8,
		103,
		103,
		102,
		105,
		134,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = new StringBuilder().append("(.*").append(strarr[0]).append(".*)").toString();
		NFA nFA = new NFA(str);
		while (StdIn.hasNextLine())
		{
			string text = StdIn.readLine();
			if (nFA.recognizes(text))
			{
				StdOut.println(text);
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Heap : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		8,
		102,
		100,
		116,
		108,
		104,
		99,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sink(IComparable[] array, int num, int num2)
	{
		while (2 * num <= num2)
		{
			int num3 = 2 * num;
			if (num3 < num2 && Heap.less(array, num3, num3 + 1))
			{
				num3++;
			}
			if (!Heap.less(array, num, num3))
			{
				break;
			}
			Heap.exch(array, num, num3);
			num = num3;
		}
	}
	[LineNumberTable(new byte[]
	{
		26,
		102,
		106,
		102
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num - 1];
		array[num - 1] = array[num2 - 1];
		array[num2 - 1] = obj;
	}
	[LineNumberTable(72)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable[] array, int num, int num2)
	{
		return Comparable.__Helper.compareTo(array[num - 1], array[num2 - 1]) < 0;
	}
	[LineNumberTable(83)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		99,
		104,
		40,
		134,
		100,
		108,
		138
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int i = carr.Length;
		for (int j = i / 2; j >= 1; j += -1)
		{
			Heap.sink(carr, j, i);
		}
		while (i > 1)
		{
			int arg_24_1 = 1;
			int arg_24_2 = i;
			i += -1;
			Heap.exch(carr, arg_24_1, arg_24_2);
			Heap.sink(carr, 1, i);
		}
	}
	[LineNumberTable(new byte[]
	{
		49,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(37)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Heap()
	{
	}
	[LineNumberTable(new byte[]
	{
		41,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (Heap.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		59,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Heap.sort(array);
		Heap.show(array);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class HexDump : java.lang.Object
{
	[LineNumberTable(27)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public HexDump()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		172,
		99,
		101,
		201,
		108,
		110,
		117,
		127,
		10,
		106,
		102,
		255,
		0,
		58,
		233,
		72,
		104,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = 16;
		if (strarr.Length == 1)
		{
			num = Integer.parseInt(strarr[0]);
		}
		int num2 = 0;
		while (!BinaryStdIn.IsEmpty)
		{
			if (num == 0)
			{
				BinaryStdIn.readChar();
			}
			else
			{
				if (num2 == 0)
				{
					StdOut.printf("", new object[0]);
				}
				else
				{
					bool expr_40 = num2 != 0;
					int expr_42 = num;
					if (expr_42 == -1 || (expr_40 ? 1 : 0) % expr_42 == 0)
					{
						StdOut.printf("\n", new object[]
						{
							Integer.valueOf(num2)
						});
					}
					else
					{
						StdOut.print(" ");
					}
				}
				int num3 = (int)BinaryStdIn.readChar();
				StdOut.printf("%02x", new object[]
				{
					Integer.valueOf(num3 & 255)
				});
			}
			num2++;
		}
		if (num != 0)
		{
			StdOut.println();
		}
		StdOut.println(new StringBuilder().append(num2 * 8).append(" bits").toString());
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Huffman : java.lang.Object
{
	[Implements(new string[]
	{
		"java.lang.Comparable"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LHuffman$Node;>;"), SourceFile("Huffman.java")]
	internal sealed class Node : java.lang.Object, Comparable
	{
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private char ch;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private int freq;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private Huffman.Node left;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private Huffman.Node right;
		[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
		internal static bool $assertionsDisabled;
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void __<clinit>()
		{
		}
		[LineNumberTable(new byte[]
		{
			159,
			134,
			66,
			104,
			103,
			103,
			103,
			104
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(char c, int num, Huffman.Node node, Huffman.Node node2)
		{
			this.ch = c;
			this.freq = num;
			this.left = node;
			this.right = node2;
		}
		[LineNumberTable(27), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$000(Huffman.Node node)
		{
			return node.freq;
		}
		[LineNumberTable(27), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static bool access$100(Huffman.Node node)
		{
			return node.isLeaf();
		}
		[LineNumberTable(27), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static char access$200(Huffman.Node node)
		{
			return node.ch;
		}
		[LineNumberTable(27), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Huffman.Node access$300(Huffman.Node node)
		{
			return node.left;
		}
		[LineNumberTable(27), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static Huffman.Node access$400(Huffman.Node node)
		{
			return node.right;
		}
		[LineNumberTable(new byte[]
		{
			159,
			183,
			127,
			19
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool isLeaf()
		{
			if (!Huffman.Node.$assertionsDisabled && (this.left != null || this.right != null) && (this.left == null || this.right == null))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			return this.left == null && this.right == null;
		}
		[LineNumberTable(47)]
		public virtual int compareTo(Huffman.Node node)
		{
			return this.freq - node.freq;
		}
		[LineNumberTable(27), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(object obj)
		{
			return this.compareTo((Huffman.Node)obj);
		}
		[LineNumberTable(27)]
		static Node()
		{
			Huffman.Node.$assertionsDisabled = !ClassLiteral<Huffman>.Value.desiredAssertionStatus();
		}
		[HideFromJava]
		int IComparable.Object;)IcompareTo(object obj)
		{
			return this.compareTo(obj);
		}
	}
	private const int R = 256;
	[LineNumberTable(new byte[]
	{
		48,
		102,
		106,
		102,
		22,
		231,
		69,
		105,
		108,
		108,
		124,
		104,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Huffman.Node buildTrie(int[] array)
	{
		MinPQ minPQ = new MinPQ();
		for (int i = 0; i < 256; i = (int)((ushort)(i + 1)))
		{
			if (array[i] > 0)
			{
				MinPQ arg_27_0 = minPQ;
				Huffman.Node.__<clinit>();
				arg_27_0.insert(new Huffman.Node((char)i, array[i], null, null));
			}
		}
		while (minPQ.size() > 1)
		{
			Huffman.Node node = (Huffman.Node)minPQ.delMin();
			Huffman.Node node2 = (Huffman.Node)minPQ.delMin();
			Huffman.Node.__<clinit>();
			Huffman.Node obj = new Huffman.Node('\0', Huffman.Node.access$000(node) + Huffman.Node.access$000(node2), node, node2);
			minPQ.insert(obj);
		}
		return (Huffman.Node)minPQ.delMin();
	}
	[LineNumberTable(new byte[]
	{
		78,
		104,
		127,
		4,
		191,
		6,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void buildCode(string[] array, Huffman.Node node, string text)
	{
		if (!Huffman.Node.access$100(node))
		{
			Huffman.buildCode(array, Huffman.Node.access$300(node), new StringBuilder().append(text).append('0').toString());
			Huffman.buildCode(array, Huffman.Node.access$400(node), new StringBuilder().append(text).append('1').toString());
		}
		else
		{
			array[(int)Huffman.Node.access$200(node)] = text;
		}
	}
	[LineNumberTable(new byte[]
	{
		66,
		104,
		102,
		110,
		129,
		102,
		107,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void writeTrie(Huffman.Node node)
	{
		if (Huffman.Node.access$100(node))
		{
			BinaryStdOut.write(true);
			BinaryStdOut.write(Huffman.Node.access$200(node), 8);
			return;
		}
		BinaryStdOut.write(false);
		Huffman.writeTrie(Huffman.Node.access$300(node));
		Huffman.writeTrie(Huffman.Node.access$400(node));
	}
	[LineNumberTable(new byte[]
	{
		112,
		102,
		99,
		181
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Huffman.Node readTrie()
	{
		int num = BinaryStdIn.readBoolean() ? 1 : 0;
		if (num != 0)
		{
			Huffman.Node.__<clinit>();
			return new Huffman.Node(BinaryStdIn.readChar(), -1, null, null);
		}
		Huffman.Node.__<clinit>();
		return new Huffman.Node('\0', -1, Huffman.readTrie(), Huffman.readTrie());
	}
	[LineNumberTable(new byte[]
	{
		5,
		102,
		167,
		107,
		103,
		52,
		198,
		168,
		108,
		174,
		167,
		167,
		108,
		105,
		110,
		109,
		136,
		109,
		136,
		240,
		57,
		8,
		235,
		78,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void compress()
	{
		string @this = BinaryStdIn.readString();
		char[] array = java.lang.String.instancehelper_toCharArray(@this);
		int[] array2 = new int[256];
		for (int i = 0; i < array.Length; i++)
		{
			int[] arg_25_0 = array2;
			int num = (int)array[i];
			int[] array3 = arg_25_0;
			array3[num]++;
		}
		Huffman.Node node = Huffman.buildTrie(array2);
		string[] array4 = new string[256];
		Huffman.buildCode(array4, node, "");
		Huffman.writeTrie(node);
		BinaryStdOut.write(array.Length);
		for (int j = 0; j < array.Length; j++)
		{
			string this2 = array4[(int)array[j]];
			for (int k = 0; k < java.lang.String.instancehelper_length(this2); k++)
			{
				if (java.lang.String.instancehelper_charAt(this2, k) == '0')
				{
					BinaryStdOut.write(false);
				}
				else
				{
					if (java.lang.String.instancehelper_charAt(this2, k) != '1')
					{
						string arg_C0_0 = "Illegal state";
						Throwable.__<suppressFillInStackTrace>();
						throw new IllegalStateException(arg_C0_0);
					}
					BinaryStdOut.write(true);
				}
			}
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(new byte[]
	{
		92,
		166,
		166,
		102,
		98,
		104,
		103,
		109,
		103,
		98,
		236,
		57,
		230,
		73,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void expand()
	{
		Huffman.Node node = Huffman.readTrie();
		int num = BinaryStdIn.readInt();
		for (int i = 0; i < num; i++)
		{
			Huffman.Node node2 = node;
			while (!Huffman.Node.access$100(node2))
			{
				int num2 = BinaryStdIn.readBoolean() ? 1 : 0;
				if (num2 != 0)
				{
					node2 = Huffman.Node.access$400(node2);
				}
				else
				{
					node2 = Huffman.Node.access$300(node2);
				}
			}
			BinaryStdOut.write(Huffman.Node.access$200(node2), 8);
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		163,
		232,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Huffman()
	{
	}
	[LineNumberTable(new byte[]
	{
		123,
		118,
		118,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		if (java.lang.String.instancehelper_equals(strarr[0], "-"))
		{
			Huffman.compress();
		}
		else
		{
			if (!java.lang.String.instancehelper_equals(strarr[0], "+"))
			{
				string arg_36_0 = "Illegal command line argument";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_36_0);
			}
			Huffman.expand();
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.net;
using java.util;
using java.util.regex;
using System;
using System.Runtime.CompilerServices;
public sealed class In : java.lang.Object
{
	private Scanner scanner;
	private const string charsetName = "UTF-8";
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Locale usLocale;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern WHITESPACE_PATTERN;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern EMPTY_PATTERN;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern EVERYTHING_PATTERN;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		80,
		168,
		103,
		104,
		113,
		113,
		194,
		173,
		138,
		231,
		70,
		104,
		124,
		221,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In(string str)
	{
		try
		{
			File file = new File(str);
			if (!file.exists())
			{
				URL uRL = java.lang.Object.instancehelper_getClass(this).getResource(str);
				if (uRL == null)
				{
					uRL = new URL(str);
				}
				URLConnection uRLConnection = uRL.openConnection();
				InputStream inputStream = uRLConnection.getInputStream();
				Scanner.__<clinit>();
				this.scanner = new Scanner(new BufferedInputStream(inputStream), "UTF-8");
				this.scanner.useLocale(In.usLocale);
				goto IL_95;
			}
			this.scanner = new Scanner(file, "UTF-8");
			this.scanner.useLocale(In.usLocale);
		}
		catch (IOException arg_92_0)
		{
			goto IL_97;
		}
		return;
		IL_95:
		return;
		IL_97:
		System.err.println(new StringBuilder().append("Could not open ").append(str).toString());
	}
	[LineNumberTable(261)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int readInt()
	{
		return this.scanner.nextInt();
	}
	[LineNumberTable(268)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double readDouble()
	{
		return this.scanner.nextDouble();
	}
	[LineNumberTable(new byte[]
	{
		160,
		217,
		103,
		104,
		103,
		43,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int[] readAllInts()
	{
		string[] array = this.readAllStrings();
		int[] array2 = new int[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = Integer.parseInt(array[i]);
		}
		return array2;
	}
	[LineNumberTable(188)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return !this.scanner.hasNext();
	}
	[LineNumberTable(254)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string readString()
	{
		return this.scanner.next();
	}
	[LineNumberTable(new byte[]
	{
		160,
		126,
		109,
		134,
		150,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string readAll()
	{
		if (!this.scanner.hasNextLine())
		{
			return "";
		}
		string result = this.scanner.useDelimiter(In.EVERYTHING_PATTERN).next();
		this.scanner.useDelimiter(In.WHITESPACE_PATTERN);
		return result;
	}
	[LineNumberTable(new byte[]
	{
		160,
		241,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void close()
	{
		this.scanner.close();
	}
	[LineNumberTable(new byte[]
	{
		66,
		136,
		113,
		220,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In(File f)
	{
		try
		{
			this.scanner = new Scanner(f, "UTF-8");
			this.scanner.useLocale(In.usLocale);
		}
		catch (IOException arg_2E_0)
		{
			goto IL_32;
		}
		return;
		IL_32:
		System.err.println(new StringBuilder().append("Could not open ").append(f).toString());
	}
	[LineNumberTable(197)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool hasNextLine()
	{
		return this.scanner.hasNextLine();
	}
	[LineNumberTable(new byte[]
	{
		160,
		104,
		127,
		2,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string readLine()
	{
		string result;
		try
		{
			result = this.scanner.nextLine();
		}
		catch (System.Exception arg_11_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_11_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
			goto IL_1E;
		}
		return result;
		IL_1E:
		result = null;
		return result;
	}
	[LineNumberTable(new byte[]
	{
		160,
		204,
		127,
		2,
		111,
		98,
		106,
		107,
		42,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string[] readAllStrings()
	{
		Pattern arg_1B_0 = In.WHITESPACE_PATTERN;
		object _<ref> = this.readAll();
		CharSequence input;
		input.__<ref> = _<ref>;
		string[] array = arg_1B_0.split(input);
		if (array.Length == 0 || java.lang.String.instancehelper_length(array[0]) > 0)
		{
			return array;
		}
		string[] array2 = new string[array.Length - 1];
		for (int i = 0; i < array.Length - 1; i++)
		{
			array2[i] = array[i + 1];
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		228,
		103,
		104,
		103,
		44,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double[] readAllDoubles()
	{
		string[] array = this.readAllStrings();
		double[] array2 = new double[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = java.lang.Double.parseDouble(array[i]);
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		29,
		104,
		127,
		5,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In()
	{
		Scanner.__<clinit>();
		BufferedInputStream.__<clinit>();
		this.scanner = new Scanner(new BufferedInputStream(System.@in), "UTF-8");
		this.scanner.useLocale(In.usLocale);
	}
	[LineNumberTable(new byte[]
	{
		160,
		113,
		113,
		140,
		127,
		1,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual char readChar()
	{
		this.scanner.useDelimiter(In.EMPTY_PATTERN);
		string this2 = this.scanner.next();
		if (!In.$assertionsDisabled && java.lang.String.instancehelper_length(this2) != 1)
		{
			object arg_37_0 = "Internal (Std)In.readChar() error! Please contact the authors.";
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError(arg_37_0);
		}
		this.scanner.useDelimiter(In.WHITESPACE_PATTERN);
		return java.lang.String.instancehelper_charAt(this2, 0);
	}
	[LineNumberTable(new byte[]
	{
		37,
		136,
		103,
		123,
		220,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In(Socket s)
	{
		try
		{
			InputStream inputStream = s.getInputStream();
			Scanner.__<clinit>();
			this.scanner = new Scanner(new BufferedInputStream(inputStream), "UTF-8");
			this.scanner.useLocale(In.usLocale);
		}
		catch (IOException arg_3F_0)
		{
			goto IL_43;
		}
		return;
		IL_43:
		System.err.println(new StringBuilder().append("Could not open ").append(s).toString());
	}
	[LineNumberTable(new byte[]
	{
		51,
		136,
		103,
		103,
		123,
		220,
		2,
		97,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In(URL url)
	{
		try
		{
			URLConnection uRLConnection = url.openConnection();
			InputStream inputStream = uRLConnection.getInputStream();
			Scanner.__<clinit>();
			this.scanner = new Scanner(new BufferedInputStream(inputStream), "UTF-8");
			this.scanner.useLocale(In.usLocale);
		}
		catch (IOException arg_46_0)
		{
			goto IL_4A;
		}
		return;
		IL_4A:
		System.err.println(new StringBuilder().append("Could not open ").append(url).toString());
	}
	[LineNumberTable(new byte[]
	{
		118,
		104,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public In(Scanner s)
	{
		this.scanner = s;
	}
	public virtual bool exists()
	{
		return this.scanner != null;
	}
	[LineNumberTable(new byte[]
	{
		160,
		92,
		113,
		108,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool hasNextChar()
	{
		this.scanner.useDelimiter(In.EMPTY_PATTERN);
		int result = this.scanner.hasNext() ? 1 : 0;
		this.scanner.useDelimiter(In.WHITESPACE_PATTERN);
		return result != 0;
	}
	[LineNumberTable(275)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual float readFloat()
	{
		return this.scanner.nextFloat();
	}
	[LineNumberTable(282)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual long readLong()
	{
		return this.scanner.nextLong();
	}
	[LineNumberTable(289)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual short readShort()
	{
		return this.scanner.nextShort();
	}
	[LineNumberTable(296)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual byte readByte()
	{
		return (byte)((sbyte)this.scanner.nextByte());
	}
	[LineNumberTable(new byte[]
	{
		160,
		190,
		103,
		111,
		111,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool readBoolean()
	{
		string this2 = this.readString();
		if (java.lang.String.instancehelper_equalsIgnoreCase(this2, "true"))
		{
			return true;
		}
		if (java.lang.String.instancehelper_equalsIgnoreCase(this2, "false"))
		{
			return false;
		}
		if (java.lang.String.instancehelper_equals(this2, "1"))
		{
			return true;
		}
		if (java.lang.String.instancehelper_equals(this2, "0"))
		{
			return false;
		}
		Throwable.__<suppressFillInStackTrace>();
		throw new InputMismatchException();
	}
	[LineNumberTable(364), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] readInts(string str)
	{
		return new In(str).readAllInts();
	}
	[LineNumberTable(373), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] readDoubles(string str)
	{
		return new In(str).readAllDoubles();
	}
	[LineNumberTable(382), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string[] readStrings(string str)
	{
		return new In(str).readAllStrings();
	}
	[LineNumberTable(390), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] readInts()
	{
		return new In().readAllInts();
	}
	[LineNumberTable(398), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] readDoubles()
	{
		return new In().readAllDoubles();
	}
	[LineNumberTable(406), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string[] readStrings()
	{
		return new In().readAllStrings();
	}
	[LineNumberTable(new byte[]
	{
		161,
		44,
		166,
		127,
		5,
		143,
		103,
		159,
		8,
		110,
		170,
		127,
		5,
		143,
		103,
		104,
		104,
		108,
		153,
		110,
		170,
		127,
		5,
		143,
		103,
		104,
		104,
		108,
		153,
		110,
		202,
		111,
		143,
		107,
		104,
		104,
		108,
		153,
		110,
		202,
		111,
		143,
		107,
		104,
		104,
		108,
		153,
		110,
		170,
		111,
		143,
		107,
		104,
		104,
		108,
		153,
		110,
		106,
		170,
		111,
		111,
		139,
		104,
		104,
		108,
		153,
		110,
		202,
		111,
		143,
		107,
		104,
		104,
		108,
		98,
		159,
		4,
		110,
		138
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = "http://introcs.cs.princeton.edu/stdlib/InTest.txt";
		System.@out.println(new StringBuilder().append("readAll() from URL ").append(str).toString());
		System.@out.println("---------------------------------------------------------------------------");
		In @in;
		java.lang.Exception ex;
		try
		{
			@in = new In(str);
			System.@out.println(@in.readAll());
		}
		catch (System.Exception arg_55_0)
		{
			java.lang.Exception expr_5A = ByteCodeHelper.MapException<java.lang.Exception>(arg_55_0, ByteCodeHelper.MapFlags.None);
			if (expr_5A == null)
			{
				throw;
			}
			ex = expr_5A;
			goto IL_64;
		}
		goto IL_75;
		IL_64:
		java.lang.Exception x = ex;
		System.@out.println(x);
		IL_75:
		System.@out.println();
		System.@out.println(new StringBuilder().append("readLine() from URL ").append(str).toString());
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex2;
		try
		{
			@in = new In(str);
			while (!@in.IsEmpty)
			{
				string x2 = @in.readLine();
				System.@out.println(x2);
			}
		}
		catch (System.Exception arg_DA_0)
		{
			java.lang.Exception expr_DF = ByteCodeHelper.MapException<java.lang.Exception>(arg_DA_0, ByteCodeHelper.MapFlags.None);
			if (expr_DF == null)
			{
				throw;
			}
			ex2 = expr_DF;
			goto IL_EA;
		}
		goto IL_FC;
		IL_EA:
		x = ex2;
		System.@out.println(x);
		IL_FC:
		System.@out.println();
		System.@out.println(new StringBuilder().append("readString() from URL ").append(str).toString());
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex3;
		try
		{
			@in = new In(str);
			while (!@in.IsEmpty)
			{
				string x2 = @in.readString();
				System.@out.println(x2);
			}
		}
		catch (System.Exception arg_161_0)
		{
			java.lang.Exception expr_166 = ByteCodeHelper.MapException<java.lang.Exception>(arg_161_0, ByteCodeHelper.MapFlags.None);
			if (expr_166 == null)
			{
				throw;
			}
			ex3 = expr_166;
			goto IL_171;
		}
		goto IL_183;
		IL_171:
		x = ex3;
		System.@out.println(x);
		IL_183:
		System.@out.println();
		System.@out.println("readLine() from current directory");
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex4;
		try
		{
			@in = new In("./InTest.txt");
			while (!@in.IsEmpty)
			{
				string x2 = @in.readLine();
				System.@out.println(x2);
			}
		}
		catch (System.Exception arg_1D7_0)
		{
			java.lang.Exception expr_1DC = ByteCodeHelper.MapException<java.lang.Exception>(arg_1D7_0, ByteCodeHelper.MapFlags.None);
			if (expr_1DC == null)
			{
				throw;
			}
			ex4 = expr_1DC;
			goto IL_1E7;
		}
		goto IL_1F9;
		IL_1E7:
		x = ex4;
		System.@out.println(x);
		IL_1F9:
		System.@out.println();
		System.@out.println("readLine() from relative path");
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex5;
		try
		{
			@in = new In("../stdlib/InTest.txt");
			while (!@in.IsEmpty)
			{
				string x2 = @in.readLine();
				System.@out.println(x2);
			}
		}
		catch (System.Exception arg_24D_0)
		{
			java.lang.Exception expr_252 = ByteCodeHelper.MapException<java.lang.Exception>(arg_24D_0, ByteCodeHelper.MapFlags.None);
			if (expr_252 == null)
			{
				throw;
			}
			ex5 = expr_252;
			goto IL_25D;
		}
		goto IL_26F;
		IL_25D:
		x = ex5;
		System.@out.println(x);
		IL_26F:
		System.@out.println();
		System.@out.println("readChar() from file");
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex6;
		try
		{
			@in = new In("InTest.txt");
			while (!@in.IsEmpty)
			{
				int c = (int)@in.readChar();
				System.@out.print((char)c);
			}
		}
		catch (System.Exception arg_2C3_0)
		{
			java.lang.Exception expr_2C8 = ByteCodeHelper.MapException<java.lang.Exception>(arg_2C3_0, ByteCodeHelper.MapFlags.None);
			if (expr_2C8 == null)
			{
				throw;
			}
			ex6 = expr_2C8;
			goto IL_2D3;
		}
		goto IL_2E5;
		IL_2D3:
		x = ex6;
		System.@out.println(x);
		IL_2E5:
		System.@out.println();
		System.@out.println();
		System.@out.println("readLine() from absolute OS X / Linux path");
		System.@out.println("---------------------------------------------------------------------------");
		@in = new In("/n/fs/introcs/www/java/stdlib/InTest.txt");
		java.lang.Exception ex7;
		try
		{
			while (!@in.IsEmpty)
			{
				string x2 = @in.readLine();
				System.@out.println(x2);
			}
		}
		catch (System.Exception arg_343_0)
		{
			java.lang.Exception expr_348 = ByteCodeHelper.MapException<java.lang.Exception>(arg_343_0, ByteCodeHelper.MapFlags.None);
			if (expr_348 == null)
			{
				throw;
			}
			ex7 = expr_348;
			goto IL_353;
		}
		goto IL_365;
		IL_353:
		x = ex7;
		System.@out.println(x);
		IL_365:
		System.@out.println();
		System.@out.println("readLine() from absolute Windows path");
		System.@out.println("---------------------------------------------------------------------------");
		java.lang.Exception ex8;
		try
		{
			@in = new In("G:\\www\\introcs\\stdlib\\InTest.txt");
			while (!@in.IsEmpty)
			{
				string x2 = @in.readLine();
				System.@out.println(x2);
			}
			System.@out.println();
		}
		catch (System.Exception arg_3C5_0)
		{
			java.lang.Exception expr_3CA = ByteCodeHelper.MapException<java.lang.Exception>(arg_3C5_0, ByteCodeHelper.MapFlags.None);
			if (expr_3CA == null)
			{
				throw;
			}
			ex8 = expr_3CA;
			goto IL_3D5;
		}
		goto IL_3E7;
		IL_3D5:
		x = ex8;
		System.@out.println(x);
		IL_3E7:
		System.@out.println();
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		245,
		74,
		244,
		69,
		207,
		239,
		69
	})]
	static In()
	{
		In.$assertionsDisabled = !ClassLiteral<In>.Value.desiredAssertionStatus();
		In.usLocale = new Locale("en", "US");
		In.WHITESPACE_PATTERN = Pattern.compile("\\p{javaWhitespace}+");
		In.EMPTY_PATTERN = Pattern.compile("");
		In.EVERYTHING_PATTERN = Pattern.compile("\\A");
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key::Ljava/lang/Comparable<TKey;>;>Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
public class IndexMaxPQ : java.lang.Object, Iterable, IEnumerable
{
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;"), SourceFile("IndexMaxPQ.java")]
	internal sealed class HeapIterator : java.lang.Object, Iterator
	{
		[Signature("LIndexMaxPQ<TKey;>;")]
		private IndexMaxPQ copy;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal IndexMaxPQ this$0 = indexMaxPQ;
		[LineNumberTable(new byte[]
		{
			160,
			156,
			111,
			116,
			107,
			63,
			3,
			134
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public HeapIterator(IndexMaxPQ indexMaxPQ)
		{
			this.copy = new IndexMaxPQ(IndexMaxPQ.access$000(indexMaxPQ).Length - 1);
			for (int i = 1; i <= IndexMaxPQ.access$100(indexMaxPQ); i++)
			{
				this.copy.insert(IndexMaxPQ.access$000(indexMaxPQ)[i], IndexMaxPQ.access$200(indexMaxPQ)[IndexMaxPQ.access$000(indexMaxPQ)[i]]);
			}
		}
		[LineNumberTable(276)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return !this.copy.IsEmpty;
		}
		[LineNumberTable(new byte[]
		{
			160,
			166,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual Integer next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			return Integer.valueOf(this.copy.delMax());
		}
		[LineNumberTable(277)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(264), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			return this.next();
		}
	}
	private int N;
	private int[] pq;
	private int[] qp;
	[Signature("[TKey;")]
	private IComparable[] keys;
	[LineNumberTable(68)]
	public virtual bool contains(int i)
	{
		return this.qp[i] != -1;
	}
	[LineNumberTable(new byte[]
	{
		160,
		121,
		112,
		106,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void swim(int num)
	{
		while (num > 1 && this.less(num / 2, num))
		{
			this.exch(num, num / 2);
			num /= 2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		112,
		127,
		3,
		127,
		1
	})]
	private void exch(int num, int num2)
	{
		int num3 = this.pq[num];
		this.pq[num] = this.pq[num2];
		this.pq[num2] = num3;
		this.qp[this.pq[num]] = num;
		this.qp[this.pq[num2]] = num2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		128,
		107,
		100,
		121,
		108,
		104,
		99,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void sink(int num)
	{
		while (2 * num <= this.N)
		{
			int num2 = 2 * num;
			if (num2 < this.N && this.less(num2, num2 + 1))
			{
				num2++;
			}
			if (!this.less(num, num2))
			{
				break;
			}
			this.exch(num, num2);
			num = num2;
		}
	}
	[LineNumberTable(new byte[]
	{
		111,
		121,
		105,
		110,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void changeKey(int i, IComparable c)
	{
		if (!this.contains(i))
		{
			string arg_13_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_13_0);
		}
		this.keys[i] = c;
		this.swim(this.qp[i]);
		this.sink(this.qp[i]);
	}
	[LineNumberTable(222)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool less(int num, int num2)
	{
		return Comparable.__Helper.compareTo(this.keys[this.pq[num]], this.keys[this.pq[num2]]) < 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		104,
		115,
		110,
		110,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public IndexMaxPQ(int i)
	{
		this.keys = (IComparable[])new IComparable[i + 1];
		this.pq = new int[i + 1];
		this.qp = new int[i + 1];
		for (int j = 0; j <= i; j++)
		{
			this.qp[j] = -1;
		}
	}
	[LineNumberTable(new byte[]
	{
		37,
		121,
		110,
		110,
		110,
		105,
		110
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void insert(int i, IComparable c)
	{
		if (this.contains(i))
		{
			string arg_13_0 = "index is already in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		this.N++;
		this.qp[i] = this.N;
		this.pq[this.N] = i;
		this.keys[i] = c;
		this.swim(this.N);
	}
	[LineNumberTable(262), Signature("()Ljava/util/Iterator<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new IndexMaxPQ.HeapIterator(this);
	}
	[LineNumberTable(new byte[]
	{
		127,
		121,
		191,
		2,
		105,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void increaseKey(int i, IComparable c)
	{
		if (!this.contains(i))
		{
			string arg_13_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_13_0);
		}
		if (Comparable.__Helper.compareTo(this.keys[i], c) >= 0)
		{
			string arg_34_0 = "Calling increaseKey() with given argument would not strictly increase the key";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_34_0);
		}
		this.keys[i] = c;
		this.swim(this.qp[i]);
	}
	[LineNumberTable(new byte[]
	{
		160,
		80,
		121,
		159,
		2,
		105,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void decreaseKey(int i, IComparable c)
	{
		if (!this.contains(i))
		{
			string arg_13_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_13_0);
		}
		if (Comparable.__Helper.compareTo(this.keys[i], c) <= 0)
		{
			string arg_34_0 = "Calling decreaseKey() with given argument would not strictly decrease the key";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_34_0);
		}
		this.keys[i] = c;
		this.sink(this.qp[i]);
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		61,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable maxKey()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.keys[this.pq[1]];
	}
	[LineNumberTable(new byte[]
	{
		71,
		120,
		105,
		122,
		103,
		105,
		119,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int delMax()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		int num = this.pq[1];
		int arg_36_1 = 1;
		int n = this.N;
		int arg_36_2 = n;
		this.N = n - 1;
		this.exch(arg_36_1, arg_36_2);
		this.sink(1);
		this.qp[num] = -1;
		this.keys[this.pq[this.N + 1]] = null;
		this.pq[this.N + 1] = -1;
		return num;
	}
	[LineNumberTable(new byte[]
	{
		89,
		121
	}), Signature("(I)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable keyOf(int i)
	{
		if (!this.contains(i))
		{
			string arg_13_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_13_0);
		}
		return this.keys[i];
	}
	[LineNumberTable(new byte[]
	{
		160,
		94,
		121,
		105,
		122,
		103,
		103,
		105,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(int i)
	{
		if (!this.contains(i))
		{
			string arg_13_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_13_0);
		}
		int num = this.qp[i];
		int arg_37_1 = num;
		int n = this.N;
		int arg_37_2 = n;
		this.N = n - 1;
		this.exch(arg_37_1, arg_37_2);
		this.swim(num);
		this.sink(num);
		this.keys[i] = null;
		this.qp[i] = -1;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		51,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int maxIndex()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.pq[1];
	}
	[LineNumberTable(new byte[]
	{
		101,
		106
	}), Signature("(ITKey;)V"), Deprecated(new object[]
	{
		64,
		"Ljava/lang/Deprecated;"
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void change(int i, IComparable c)
	{
		this.changeKey(i, c);
	}
	[LineNumberTable(new byte[]
	{
		160,
		176,
		159,
		58,
		104,
		103,
		42,
		230,
		69,
		127,
		2,
		191,
		12,
		165,
		103,
		112,
		159,
		4,
		241,
		60,
		233,
		72,
		104,
		109,
		104,
		127,
		8,
		98,
		165,
		103,
		42,
		230,
		69,
		105,
		105,
		39,
		136,
		103,
		106,
		114,
		107,
		255,
		11,
		61,
		232,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = new string[]
		{
			"it",
			"was",
			"the",
			"best",
			"of",
			"times",
			"it",
			"was",
			"the",
			"worst"
		};
		IndexMaxPQ indexMaxPQ = new IndexMaxPQ(array.Length);
		for (int i = 0; i < array.Length; i++)
		{
			indexMaxPQ.insert(i, array[i]);
		}
		Iterator iterator = indexMaxPQ.iterator();
		while (iterator.MoveNext())
		{
			int j = ((Integer)iterator.Current).intValue();
			StdOut.println(new StringBuilder().append(j).append(" ").append(array[j]).toString());
		}
		StdOut.println();
		for (int i = 0; i < array.Length; i++)
		{
			if (StdRandom.uniform() < 0.5)
			{
				indexMaxPQ.increaseKey(i, new StringBuilder().append(array[i]).append(array[i]).toString());
			}
			else
			{
				indexMaxPQ.decreaseKey(i, java.lang.String.instancehelper_substring(array[i], 0, 1));
			}
		}
		while (!indexMaxPQ.IsEmpty)
		{
			string str = (string)indexMaxPQ.maxKey();
			int j = indexMaxPQ.delMax();
			StdOut.println(new StringBuilder().append(j).append(" ").append(str).toString());
		}
		StdOut.println();
		for (int i = 0; i < array.Length; i++)
		{
			indexMaxPQ.insert(i, array[i]);
		}
		int[] array2 = new int[array.Length];
		for (int j = 0; j < array.Length; j++)
		{
			array2[j] = j;
		}
		StdRandom.shuffle(array2);
		for (int j = 0; j < array2.Length; j++)
		{
			string str2 = (string)indexMaxPQ.keyOf(array2[j]);
			indexMaxPQ.delete(array2[j]);
			StdOut.println(new StringBuilder().append(array2[j]).append(" ").append(str2).toString());
		}
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int[] access$000(IndexMaxPQ indexMaxPQ)
	{
		return indexMaxPQ.pq;
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(IndexMaxPQ indexMaxPQ)
	{
		return indexMaxPQ.N;
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static IComparable[] access$200(IndexMaxPQ indexMaxPQ)
	{
		return indexMaxPQ.keys;
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key::Ljava/lang/Comparable<TKey;>;>Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
public class IndexMinPQ : java.lang.Object, Iterable, IEnumerable
{
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;"), SourceFile("IndexMinPQ.java")]
	internal sealed class HeapIterator : java.lang.Object, Iterator
	{
		[Signature("LIndexMinPQ<TKey;>;")]
		private IndexMinPQ copy;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal IndexMinPQ this$0 = indexMinPQ;
		[LineNumberTable(new byte[]
		{
			160,
			165,
			111,
			116,
			107,
			63,
			3,
			134
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public HeapIterator(IndexMinPQ indexMinPQ)
		{
			this.copy = new IndexMinPQ(IndexMinPQ.access$000(indexMinPQ).Length - 1);
			for (int i = 1; i <= IndexMinPQ.access$100(indexMinPQ); i++)
			{
				this.copy.insert(IndexMinPQ.access$000(indexMinPQ)[i], IndexMinPQ.access$200(indexMinPQ)[IndexMinPQ.access$000(indexMinPQ)[i]]);
			}
		}
		[LineNumberTable(285)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return !this.copy.IsEmpty;
		}
		[LineNumberTable(new byte[]
		{
			160,
			175,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual Integer next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			return Integer.valueOf(this.copy.delMin());
		}
		[LineNumberTable(286)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(273), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			return this.next();
		}
	}
	private int NMAX;
	private int N;
	private int[] pq;
	private int[] qp;
	[Signature("[TKey;")]
	private IComparable[] keys;
	[LineNumberTable(new byte[]
	{
		0,
		104,
		111,
		103,
		115,
		110,
		110,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public IndexMinPQ(int i)
	{
		if (i < 0)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException();
		}
		this.NMAX = i;
		this.keys = (IComparable[])new IComparable[i + 1];
		this.pq = new int[i + 1];
		this.qp = new int[i + 1];
		for (int j = 0; j <= i; j++)
		{
			this.qp[j] = -1;
		}
	}
	[LineNumberTable(new byte[]
	{
		43,
		120,
		121,
		110,
		110,
		110,
		105,
		110
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void insert(int i, IComparable c)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (this.contains(i))
		{
			string arg_2B_0 = "index is already in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2B_0);
		}
		this.N++;
		this.qp[i] = this.N;
		this.pq[this.N] = i;
		this.keys[i] = c;
		this.swim(this.N);
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		78,
		120,
		105,
		122,
		103,
		105,
		119,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int delMin()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		int num = this.pq[1];
		int arg_36_1 = 1;
		int n = this.N;
		int arg_36_2 = n;
		this.N = n - 1;
		this.exch(arg_36_1, arg_36_2);
		this.sink(1);
		this.qp[num] = -1;
		this.keys[this.pq[this.N + 1]] = null;
		this.pq[this.N + 1] = -1;
		return num;
	}
	[LineNumberTable(new byte[]
	{
		23,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(int i)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.qp[i] != -1;
	}
	[LineNumberTable(new byte[]
	{
		160,
		72,
		120,
		121,
		127,
		2,
		105,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void decreaseKey(int i, IComparable c)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (!this.contains(i))
		{
			string arg_2B_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_2B_0);
		}
		if (Comparable.__Helper.compareTo(this.keys[i], c) <= 0)
		{
			string arg_4C_0 = "Calling decreaseKey() with given argument would not strictly decrease the key";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_4C_0);
		}
		this.keys[i] = c;
		this.swim(this.qp[i]);
	}
	[LineNumberTable(new byte[]
	{
		160,
		130,
		112,
		106,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void swim(int num)
	{
		while (num > 1 && this.greater(num / 2, num))
		{
			this.exch(num, num / 2);
			num /= 2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		121,
		127,
		3,
		127,
		1
	})]
	private void exch(int num, int num2)
	{
		int num3 = this.pq[num];
		this.pq[num] = this.pq[num2];
		this.pq[num2] = num3;
		this.qp[this.pq[num]] = num;
		this.qp[this.pq[num2]] = num2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		137,
		107,
		100,
		121,
		108,
		104,
		99,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void sink(int num)
	{
		while (2 * num <= this.N)
		{
			int num2 = 2 * num;
			if (num2 < this.N && this.greater(num2, num2 + 1))
			{
				num2++;
			}
			if (!this.greater(num, num2))
			{
				break;
			}
			this.exch(num, num2);
			num = num2;
		}
	}
	[LineNumberTable(new byte[]
	{
		120,
		120,
		121,
		105,
		110,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void changeKey(int i, IComparable c)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (!this.contains(i))
		{
			string arg_2B_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_2B_0);
		}
		this.keys[i] = c;
		this.swim(this.qp[i]);
		this.sink(this.qp[i]);
	}
	[LineNumberTable(231)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool greater(int num, int num2)
	{
		return Comparable.__Helper.compareTo(this.keys[this.pq[num]], this.keys[this.pq[num2]]) > 0;
	}
	[LineNumberTable(271), Signature("()Ljava/util/Iterator<Ljava/lang/Integer;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new IndexMinPQ.HeapIterator(this);
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		58,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int minIndex()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.pq[1];
	}
	[LineNumberTable(new byte[]
	{
		68,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable minKey()
	{
		if (this.N == 0)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.keys[this.pq[1]];
	}
	[LineNumberTable(new byte[]
	{
		96,
		120,
		121
	}), Signature("(I)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable keyOf(int i)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (!this.contains(i))
		{
			string arg_2B_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_2B_0);
		}
		return this.keys[i];
	}
	[LineNumberTable(new byte[]
	{
		109,
		106
	}), Signature("(ITKey;)V"), Deprecated(new object[]
	{
		64,
		"Ljava/lang/Deprecated;"
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void change(int i, IComparable c)
	{
		this.changeKey(i, c);
	}
	[LineNumberTable(new byte[]
	{
		160,
		88,
		120,
		121,
		127,
		2,
		105,
		112
	}), Signature("(ITKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void increaseKey(int i, IComparable c)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (!this.contains(i))
		{
			string arg_2B_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_2B_0);
		}
		if (Comparable.__Helper.compareTo(this.keys[i], c) >= 0)
		{
			string arg_4C_0 = "Calling increaseKey() with given argument would not strictly increase the key";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_4C_0);
		}
		this.keys[i] = c;
		this.sink(this.qp[i]);
	}
	[LineNumberTable(new byte[]
	{
		160,
		102,
		120,
		121,
		105,
		122,
		103,
		103,
		105,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(int i)
	{
		if (i < 0 || i >= this.NMAX)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		if (!this.contains(i))
		{
			string arg_2B_0 = "index is not in the priority queue";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_2B_0);
		}
		int num = this.qp[i];
		int arg_4F_1 = num;
		int n = this.N;
		int arg_4F_2 = n;
		this.N = n - 1;
		this.exch(arg_4F_1, arg_4F_2);
		this.swim(num);
		this.sink(num);
		this.keys[i] = null;
		this.qp[i] = -1;
	}
	[LineNumberTable(new byte[]
	{
		160,
		186,
		159,
		58,
		104,
		103,
		42,
		230,
		69,
		104,
		103,
		127,
		8,
		98,
		165,
		103,
		42,
		230,
		69,
		127,
		2,
		159,
		12,
		104,
		169
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = new string[]
		{
			"it",
			"was",
			"the",
			"best",
			"of",
			"times",
			"it",
			"was",
			"the",
			"worst"
		};
		IndexMinPQ indexMinPQ = new IndexMinPQ(array.Length);
		for (int i = 0; i < array.Length; i++)
		{
			indexMinPQ.insert(i, array[i]);
		}
		while (!indexMinPQ.IsEmpty)
		{
			int i = indexMinPQ.delMin();
			StdOut.println(new StringBuilder().append(i).append(" ").append(array[i]).toString());
		}
		StdOut.println();
		for (int i = 0; i < array.Length; i++)
		{
			indexMinPQ.insert(i, array[i]);
		}
		Iterator iterator = indexMinPQ.iterator();
		while (iterator.MoveNext())
		{
			int num = ((Integer)iterator.Current).intValue();
			StdOut.println(new StringBuilder().append(num).append(" ").append(array[num]).toString());
		}
		while (!indexMinPQ.IsEmpty)
		{
			indexMinPQ.delMin();
		}
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int[] access$000(IndexMinPQ indexMinPQ)
	{
		return indexMinPQ.pq;
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(IndexMinPQ indexMinPQ)
	{
		return indexMinPQ.N;
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static IComparable[] access$200(IndexMinPQ indexMinPQ)
	{
		return indexMinPQ.keys;
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Insertion : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(99)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		59,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		80,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Insertion.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(125)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return Insertion.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(104)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(Comparator comparator, object obj, object obj2)
	{
		return comparator.compare(obj, obj2) < 0;
	}
	[LineNumberTable(new byte[]
	{
		91,
		104,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(object[] array, Comparator comparator, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Insertion.less(comparator, array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(136)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(object[] array, Comparator comparator)
	{
		return Insertion.isSorted(array, comparator, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		66,
		100,
		102,
		100
	})]
	private static void exch(int[] array, int num, int num2)
	{
		int num3 = array[num];
		array[num] = array[num2];
		array[num2] = num3;
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		99,
		105,
		117,
		42,
		166,
		252,
		60,
		233,
		70,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int num = carr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i;
			while (num2 > 0 && Insertion.less(carr[num2], carr[num2 - 1]))
			{
				Insertion.exch(carr, num2, num2 - 1);
				num2 += -1;
			}
			if (!Insertion.$assertionsDisabled && !Insertion.isSorted(carr, 0, i))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
		}
		if (!Insertion.$assertionsDisabled && !Insertion.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		98,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Insertion()
	{
	}
	[LineNumberTable(new byte[]
	{
		12,
		99,
		105,
		118,
		42,
		166,
		253,
		60,
		233,
		70,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(object[] objarr, Comparator c)
	{
		int num = objarr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i;
			while (num2 > 0 && Insertion.less(c, objarr[num2], objarr[num2 - 1]))
			{
				Insertion.exch(objarr, num2, num2 - 1);
				num2 += -1;
			}
			if (!Insertion.$assertionsDisabled && !Insertion.isSorted(objarr, c, 0, i))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
		}
		if (!Insertion.$assertionsDisabled && !Insertion.isSorted(objarr, c))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		31,
		99,
		103,
		102,
		36,
		166,
		102,
		121,
		42,
		38,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] indexSort(IComparable[] carr)
	{
		int num = carr.Length;
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = i;
		}
		for (int i = 0; i < num; i++)
		{
			int num2 = i;
			while (num2 > 0 && Insertion.less(carr[array[num2]], carr[array[num2 - 1]]))
			{
				Insertion.exch(array, num2, num2 - 1);
				num2 += -1;
			}
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		108,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Insertion.sort(array);
		Insertion.show(array);
	}
	[LineNumberTable(36)]
	static Insertion()
	{
		Insertion.$assertionsDisabled = !ClassLiteral<Insertion>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class InsertionX : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(73)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		28,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		38,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (InsertionX.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		163,
		104,
		57,
		198,
		102,
		100,
		98,
		109,
		104,
		134,
		228,
		57,
		230,
		74,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int num = carr.Length;
		for (int i = num - 1; i > 0; i += -1)
		{
			if (InsertionX.less(carr[i], carr[i - 1]))
			{
				InsertionX.exch(carr, i, i - 1);
			}
		}
		for (int i = 2; i < num; i++)
		{
			IComparable comparable = carr[i];
			int num2 = i;
			while (InsertionX.less(comparable, carr[num2 - 1]))
			{
				carr[num2] = carr[num2 - 1];
				num2 += -1;
			}
			carr[num2] = comparable;
		}
		if (!InsertionX.$assertionsDisabled && !InsertionX.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		45,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private InsertionX()
	{
	}
	[LineNumberTable(new byte[]
	{
		55,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		InsertionX.sort(array);
		InsertionX.show(array);
	}
	[LineNumberTable(36)]
	static InsertionX()
	{
		InsertionX.$assertionsDisabled = !ClassLiteral<InsertionX>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Interval1D : java.lang.Object
{
	[EnclosingMethod("Interval1D", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("Interval1D.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LInterval1D;>;"), SourceFile("Interval1D.java")]
	internal sealed class LeftComparator : java.lang.Object, Comparator
	{
		[LineNumberTable(122), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal LeftComparator(Interval1D.1) : this()
		{
		}
		[LineNumberTable(122)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private LeftComparator()
		{
		}
		[LineNumberTable(new byte[]
		{
			74,
			112,
			112,
			112,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Interval1D interval1D, Interval1D interval1D2)
		{
			if (Interval1D.access$300(interval1D) < Interval1D.access$300(interval1D2))
			{
				return -1;
			}
			if (Interval1D.access$300(interval1D) > Interval1D.access$300(interval1D2))
			{
				return 1;
			}
			if (Interval1D.access$400(interval1D) < Interval1D.access$400(interval1D2))
			{
				return -1;
			}
			if (Interval1D.access$400(interval1D) > Interval1D.access$400(interval1D2))
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(122), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Interval1D)obj, (Interval1D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LInterval1D;>;"), SourceFile("Interval1D.java")]
	internal sealed class LengthComparator : java.lang.Object, Comparator
	{
		[LineNumberTable(144), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal LengthComparator(Interval1D.1) : this()
		{
		}
		[LineNumberTable(144)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private LengthComparator()
		{
		}
		[LineNumberTable(new byte[]
		{
			96,
			104,
			104,
			102,
			102
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Interval1D interval1D, Interval1D interval1D2)
		{
			double num = interval1D.length();
			double num2 = interval1D2.length();
			if (num < num2)
			{
				return -1;
			}
			if (num > num2)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(144), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Interval1D)obj, (Interval1D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LInterval1D;>;"), SourceFile("Interval1D.java")]
	internal sealed class RightComparator : java.lang.Object, Comparator
	{
		[LineNumberTable(133), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal RightComparator(Interval1D.1) : this()
		{
		}
		[LineNumberTable(133)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private RightComparator()
		{
		}
		[LineNumberTable(new byte[]
		{
			85,
			112,
			112,
			112,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Interval1D interval1D, Interval1D interval1D2)
		{
			if (Interval1D.access$400(interval1D) < Interval1D.access$400(interval1D2))
			{
				return -1;
			}
			if (Interval1D.access$400(interval1D) > Interval1D.access$400(interval1D2))
			{
				return 1;
			}
			if (Interval1D.access$300(interval1D) < Interval1D.access$300(interval1D2))
			{
				return -1;
			}
			if (Interval1D.access$300(interval1D) > Interval1D.access$300(interval1D2))
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(133), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Interval1D)obj, (Interval1D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Signature("Ljava/util/Comparator<LInterval1D;>;")]
	internal static Comparator __<>LEFT_ENDPOINT_ORDER;
	[Signature("Ljava/util/Comparator<LInterval1D;>;")]
	internal static Comparator __<>RIGHT_ENDPOINT_ORDER;
	[Signature("Ljava/util/Comparator<LInterval1D;>;")]
	internal static Comparator __<>LENGTH_ORDER;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double left;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double right;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator LEFT_ENDPOINT_ORDER
	{
		[HideFromJava]
		get
		{
			return Interval1D.__<>LEFT_ENDPOINT_ORDER;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator RIGHT_ENDPOINT_ORDER
	{
		[HideFromJava]
		get
		{
			return Interval1D.__<>RIGHT_ENDPOINT_ORDER;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator LENGTH_ORDER
	{
		[HideFromJava]
		get
		{
			return Interval1D.__<>LENGTH_ORDER;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		4,
		104,
		114,
		112,
		114,
		144,
		102,
		105,
		139,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Interval1D(double d1, double d2)
	{
		if (java.lang.Double.isInfinite(d1) || java.lang.Double.isInfinite(d2))
		{
			string arg_24_0 = "Endpoints must be finite";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_24_0);
		}
		if (java.lang.Double.isNaN(d1) || java.lang.Double.isNaN(d2))
		{
			string arg_46_0 = "Endpoints cannot be NaN";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_46_0);
		}
		if (d1 <= d2)
		{
			this.left = d1;
			this.right = d2;
			return;
		}
		string arg_70_0 = "Illegal interval";
		Throwable.__<suppressFillInStackTrace>();
		throw new IllegalArgumentException(arg_70_0);
	}
	public virtual double left()
	{
		return this.left;
	}
	public virtual double right()
	{
		return this.right;
	}
	[LineNumberTable(new byte[]
	{
		39,
		112,
		112
	})]
	public virtual bool intersects(Interval1D id)
	{
		return this.right >= id.left && id.right >= this.left;
	}
	public virtual bool contains(double d)
	{
		return this.left <= d && d <= this.right;
	}
	public virtual double length()
	{
		return this.right - this.left;
	}
	[LineNumberTable(116)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append("[").append(this.left).append(", ").append(this.right).append("]").toString();
	}
	[LineNumberTable(new byte[]
	{
		111,
		103,
		122,
		122,
		122,
		154,
		106,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Interval1D[] array = new Interval1D[]
		{
			new Interval1D(15.0, 33.0),
			new Interval1D(45.0, 60.0),
			new Interval1D(20.0, 70.0),
			new Interval1D(46.0, 55.0)
		};
		StdOut.println("Unsorted");
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by left endpoint");
		Arrays.sort(array, Interval1D.__<>LEFT_ENDPOINT_ORDER);
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by right endpoint");
		Arrays.sort(array, Interval1D.__<>RIGHT_ENDPOINT_ORDER);
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by length");
		Arrays.sort(array, Interval1D.__<>LENGTH_ORDER);
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
	}
	[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$300(Interval1D interval1D)
	{
		return interval1D.left;
	}
	[LineNumberTable(24), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$400(Interval1D interval1D)
	{
		return interval1D.right;
	}
	[LineNumberTable(new byte[]
	{
		159,
		171,
		235,
		69,
		235,
		69
	})]
	static Interval1D()
	{
		Interval1D.__<>LEFT_ENDPOINT_ORDER = new Interval1D.LeftComparator(null);
		Interval1D.__<>RIGHT_ENDPOINT_ORDER = new Interval1D.RightComparator(null);
		Interval1D.__<>LENGTH_ORDER = new Interval1D.LengthComparator(null);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Interval2D : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private Interval1D x;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private Interval1D y;
	[LineNumberTable(new byte[]
	{
		159,
		176,
		104,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Interval2D(Interval1D id1, Interval1D id2)
	{
		this.x = id1;
		this.y = id2;
	}
	[LineNumberTable(new byte[]
	{
		31,
		127,
		4,
		127,
		4,
		127,
		20
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void draw()
	{
		double d = (this.x.left() + this.x.right()) / 2.0;
		double d2 = (this.y.left() + this.y.right()) / 2.0;
		StdDraw.rectangle(d, d2, this.x.length() / 2.0, this.y.length() / 2.0);
	}
	[LineNumberTable(57)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(Point2D pd)
	{
		return this.x.contains(pd.x()) && this.y.contains(pd.y());
	}
	[LineNumberTable(65)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double area()
	{
		return this.x.length() * this.y.length();
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		117,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool intersects(Interval2D id)
	{
		return this.x.intersects(id.x) && this.y.intersects(id.y);
	}
	[LineNumberTable(74)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append(this.x).append(" x ").append(this.y).toString();
	}
	[LineNumberTable(new byte[]
	{
		40,
		106,
		106,
		106,
		106,
		138,
		105,
		105,
		107,
		135,
		108,
		105,
		114,
		114,
		139,
		116,
		231,
		58,
		232,
		73,
		103,
		127,
		2
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double d = java.lang.Double.parseDouble(strarr[0]);
		double d2 = java.lang.Double.parseDouble(strarr[1]);
		double d3 = java.lang.Double.parseDouble(strarr[2]);
		double d4 = java.lang.Double.parseDouble(strarr[3]);
		int num = Integer.parseInt(strarr[4]);
		Interval1D id = new Interval1D(d, d2);
		Interval1D id2 = new Interval1D(d3, d4);
		Interval2D interval2D = new Interval2D(id, id2);
		interval2D.draw();
		Counter counter = new Counter("hits");
		for (int i = 0; i < num; i++)
		{
			double d5 = StdRandom.uniform((double)0f, (double)1f);
			double d6 = StdRandom.uniform((double)0f, (double)1f);
			Point2D point2D = new Point2D(d5, d6);
			if (interval2D.contains(point2D))
			{
				counter.increment();
			}
			else
			{
				point2D.draw();
			}
		}
		StdOut.println(counter);
		StdOut.printf("box area = %.2f\n", new object[]
		{
			java.lang.Double.valueOf(interval2D.area())
		});
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class KMP : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int R;
	private int[][] dfa;
	private char[] pattern;
	private string pat;
	[LineNumberTable(new byte[]
	{
		159,
		182,
		104,
		107,
		167,
		103,
		127,
		15,
		113,
		110,
		109,
		56,
		136,
		118,
		244,
		60,
		235,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public KMP(string str)
	{
		this.R = 256;
		this.pat = str;
		int num = java.lang.String.instancehelper_length(str);
		int arg_35_0 = this.R;
		int arg_30_0 = num;
		int[] array = new int[2];
		int num2 = arg_30_0;
		array[1] = num2;
		num2 = arg_35_0;
		array[0] = num2;
		this.dfa = (int[][])ByteCodeHelper.multianewarray(typeof(int[][]).TypeHandle, array);
		this.dfa[(int)java.lang.String.instancehelper_charAt(str, 0)][0] = 1;
		int num3 = 0;
		for (int i = 1; i < num; i++)
		{
			for (int j = 0; j < this.R; j++)
			{
				this.dfa[j][i] = this.dfa[j][num3];
			}
			this.dfa[(int)java.lang.String.instancehelper_charAt(str, i)][i] = i + 1;
			num3 = this.dfa[(int)java.lang.String.instancehelper_charAt(str, i)][num3];
		}
	}
	[LineNumberTable(new byte[]
	{
		29,
		108,
		135,
		108,
		49,
		166,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int search(string str)
	{
		int num = java.lang.String.instancehelper_length(this.pat);
		int num2 = java.lang.String.instancehelper_length(str);
		int num3 = 0;
		int num4 = 0;
		while (num3 < num2 && num4 < num)
		{
			num4 = this.dfa[(int)java.lang.String.instancehelper_charAt(str, num3)][num4];
			num3++;
		}
		if (num4 == num)
		{
			return num3 - num;
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		7,
		104,
		103,
		109,
		103,
		43,
		198,
		99,
		127,
		10,
		109,
		107,
		104,
		56,
		136,
		114,
		240,
		60,
		235,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public KMP(char[] charr, int i)
	{
		this.R = i;
		this.pattern = new char[charr.Length];
		int j;
		for (j = 0; j < charr.Length; j++)
		{
			this.pattern[j] = charr[j];
		}
		j = charr.Length;
		int arg_41_0 = j;
		int[] array = new int[2];
		int num = arg_41_0;
		array[1] = num;
		array[0] = i;
		this.dfa = (int[][])ByteCodeHelper.multianewarray(typeof(int[][]).TypeHandle, array);
		this.dfa[(int)charr[0]][0] = 1;
		int num2 = 0;
		for (int k = 1; k < j; k++)
		{
			for (int l = 0; l < i; l++)
			{
				this.dfa[l][k] = this.dfa[l][num2];
			}
			this.dfa[(int)charr[k]][k] = k + 1;
			num2 = this.dfa[(int)charr[k]][num2];
		}
	}
	[LineNumberTable(new byte[]
	{
		44,
		104,
		131,
		108,
		45,
		166,
		104
	})]
	public virtual int search(char[] charr)
	{
		int num = this.pattern.Length;
		int num2 = charr.Length;
		int num3 = 0;
		int num4 = 0;
		while (num3 < num2 && num4 < num)
		{
			num4 = this.dfa[(int)charr[num3]][num4];
			num3++;
		}
		if (num4 == num)
		{
			return num3 - num;
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		57,
		100,
		100,
		103,
		135,
		104,
		138,
		109,
		170,
		159,
		0,
		106,
		105,
		42,
		136,
		134,
		106,
		105,
		42,
		136,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = strarr[0];
		string text2 = strarr[1];
		char[] charr = java.lang.String.instancehelper_toCharArray(text);
		char[] charr2 = java.lang.String.instancehelper_toCharArray(text2);
		KMP kMP = new KMP(text);
		int num = kMP.search(text2);
		KMP kMP2 = new KMP(charr, 256);
		int num2 = kMP2.search(charr2);
		StdOut.println(new StringBuilder().append("text:    ").append(text2).toString());
		StdOut.print("pattern: ");
		for (int i = 0; i < num; i++)
		{
			StdOut.print(" ");
		}
		StdOut.println(text);
		StdOut.print("pattern: ");
		for (int i = 0; i < num2; i++)
		{
			StdOut.print(" ");
		}
		StdOut.println(text);
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Knuth : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		7,
		99,
		134,
		114,
		100,
		102,
		228,
		59,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(object[] objarr)
	{
		int num = objarr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i + ByteCodeHelper.d2i(java.lang.Math.random() * (double)(num - i));
			object obj = objarr[num2];
			objarr[num2] = objarr[i];
			objarr[i] = obj;
		}
	}
	[LineNumberTable(47)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Knuth()
	{
	}
	[LineNumberTable(new byte[]
	{
		24,
		166,
		166,
		103,
		40,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Knuth.shuffle(array);
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class KosarajuSharirSCC : java.lang.Object
{
	private bool[] marked;
	private int[] id;
	private int count;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		72,
		105,
		110,
		127,
		7,
		148
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.marked[num] = true;
		this.id[num] = this.count;
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num2])
			{
				this.dfs(digraph, num2);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		109,
		103,
		107,
		107,
		127,
		3,
		2,
		38,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Digraph digraph)
	{
		TransitiveClosure transitiveClosure = new TransitiveClosure(digraph);
		for (int i = 0; i < digraph.V(); i++)
		{
			for (int j = 0; j < digraph.V(); j++)
			{
				if (this.stronglyConnected(i, j) != ((!transitiveClosure.reachable(i, j) || !transitiveClosure.reachable(j, i)) ? false : true))
				{
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(145)]
	public virtual bool stronglyConnected(int i1, int i2)
	{
		return this.id[i1] == this.id[i2];
	}
	[LineNumberTable(new byte[]
	{
		51,
		168,
		172,
		113,
		113,
		127,
		6,
		106,
		104,
		240,
		69,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public KosarajuSharirSCC(Digraph d)
	{
		DepthFirstOrder depthFirstOrder = new DepthFirstOrder(d.reverse());
		this.marked = new bool[d.V()];
		this.id = new int[d.V()];
		Iterator iterator = depthFirstOrder.reversePost().iterator();
		while (iterator.MoveNext())
		{
			int num = ((Integer)iterator.Current).intValue();
			if (!this.marked[num])
			{
				this.dfs(d, num);
				this.count++;
			}
		}
		if (!KosarajuSharirSCC.$assertionsDisabled && !this.check(d))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(154)]
	public virtual int id(int i)
	{
		return this.id[i];
	}
	[LineNumberTable(new byte[]
	{
		123,
		110,
		103,
		167,
		103,
		191,
		0,
		109,
		104,
		42,
		168,
		109,
		55,
		232,
		69,
		104,
		127,
		9,
		159,
		3,
		229,
		60,
		232,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		KosarajuSharirSCC kosarajuSharirSCC = new KosarajuSharirSCC(digraph);
		int num = kosarajuSharirSCC.count();
		StdOut.println(new StringBuilder().append(num).append(" components").toString());
		global::Queue[] array = (global::Queue[])new global::Queue[num];
		for (int j = 0; j < num; j++)
		{
			array[j] = new global::Queue();
		}
		for (int j = 0; j < digraph.V(); j++)
		{
			array[kosarajuSharirSCC.id(j)].enqueue(Integer.valueOf(j));
		}
		for (int j = 0; j < num; j++)
		{
			Iterator iterator = array[j].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
	}
	[LineNumberTable(92)]
	static KosarajuSharirSCC()
	{
		KosarajuSharirSCC.$assertionsDisabled = !ClassLiteral<KosarajuSharirSCC>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class KruskalMST : java.lang.Object
{
	private double weight;
	[Signature("LQueue<LEdge;>;")]
	private global::Queue mst;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		66,
		102,
		127,
		1,
		140,
		106,
		112,
		127,
		14,
		194,
		109,
		127,
		5,
		116,
		109,
		111,
		130,
		107,
		162,
		127,
		5,
		116,
		109,
		111,
		130,
		162,
		191,
		8,
		109,
		127,
		5,
		116,
		113,
		162,
		127,
		8,
		116,
		109,
		112,
		127,
		16,
		162,
		202
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedGraph edgeWeightedGraph)
	{
		double num = (double)0f;
		Iterator iterator = this.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			num += edge.weight();
		}
		double num2 = 1E-12;
		if (java.lang.Math.abs(num - this.weight()) > num2)
		{
			System.err.printf("Weight of edges does not equal weight(): %f vs. %f\n", new object[]
			{
				java.lang.Double.valueOf(num),
				java.lang.Double.valueOf(this.weight())
			});
			return false;
		}
		UF uF = new UF(edgeWeightedGraph.V());
		Iterator iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (uF.connected(num3, i))
			{
				System.err.println("Not a forest");
				return false;
			}
			uF.union(num3, i);
		}
		iterator2 = edgeWeightedGraph.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (!uF.connected(num3, i))
			{
				System.err.println("Not a spanning forest");
				return false;
			}
		}
		iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			uF = new UF(edgeWeightedGraph.V());
			Iterator iterator3 = this.mst.iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (edge3 != edge2)
				{
					uF.union(num4, i2);
				}
			}
			iterator3 = edgeWeightedGraph.edges().iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (!uF.connected(num4, i2) && edge3.weight() < edge2.weight())
				{
					System.err.println(new StringBuilder().append("Edge ").append(edge3).append(" violates cut optimality conditions").toString());
					return false;
				}
			}
		}
		return true;
	}
	[Signature("()Ljava/lang/Iterable<LEdge;>;")]
	public virtual Iterable edges()
	{
		return this.mst;
	}
	public virtual double weight()
	{
		return this.weight;
	}
	[LineNumberTable(new byte[]
	{
		21,
		232,
		58,
		235,
		72,
		102,
		127,
		1,
		201,
		109,
		127,
		4,
		108,
		104,
		106,
		109,
		107,
		108,
		148,
		165,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public KruskalMST(EdgeWeightedGraph ewg)
	{
		this.mst = new global::Queue();
		MinPQ minPQ = new MinPQ();
		Iterator iterator = ewg.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			minPQ.insert(edge);
		}
		UF uF = new UF(ewg.V());
		while (!minPQ.IsEmpty && this.mst.size() < ewg.V() - 1)
		{
			Edge edge = (Edge)minPQ.delMin();
			int num = edge.either();
			int i = edge.other(num);
			if (!uF.connected(num, i))
			{
				uF.union(num, i);
				this.mst.enqueue(edge);
				this.weight += edge.weight();
			}
		}
		if (!KruskalMST.$assertionsDisabled && !this.check(ewg))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		127,
		110,
		103,
		103,
		127,
		2,
		137,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedGraph ewg = new EdgeWeightedGraph(i);
		KruskalMST kruskalMST = new KruskalMST(ewg);
		Iterator iterator = kruskalMST.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge obj = (Edge)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.printf("%.5f\n", new object[]
		{
			java.lang.Double.valueOf(kruskalMST.weight())
		});
	}
	[LineNumberTable(63)]
	static KruskalMST()
	{
		KruskalMST.$assertionsDisabled = !ClassLiteral<KruskalMST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class KWIK : java.lang.Object
{
	[LineNumberTable(35)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public KWIK()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		180,
		110,
		169,
		118,
		167,
		168,
		106,
		103,
		115,
		107,
		114,
		117,
		115,
		123,
		239,
		58,
		235,
		72,
		101,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int num = Integer.parseInt(strarr[1]);
		string text = java.lang.String.instancehelper_replaceAll(@in.readAll(), "\\s+", " ");
		int num2 = java.lang.String.instancehelper_length(text);
		SuffixArray suffixArray = new SuffixArray(text);
		while (StdIn.hasNextLine())
		{
			string text2 = StdIn.readLine();
			for (int i = suffixArray.rank(text2); i < num2; i++)
			{
				int num3 = suffixArray.index(i);
				int endIndex = java.lang.Math.min(num2, num3 + java.lang.String.instancehelper_length(text2));
				if (!java.lang.String.instancehelper_equals(text2, java.lang.String.instancehelper_substring(text, num3, endIndex)))
				{
					break;
				}
				int beginIndex = java.lang.Math.max(0, suffixArray.index(i) - num);
				int endIndex2 = java.lang.Math.min(num2, suffixArray.index(i) + num + java.lang.String.instancehelper_length(text2));
				StdOut.println(java.lang.String.instancehelper_substring(text, beginIndex, endIndex2));
			}
			StdOut.println();
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class LazyPrimMST : java.lang.Object
{
	private double weight;
	[Signature("LQueue<LEdge;>;")]
	private global::Queue mst;
	private bool[] marked;
	[Signature("LMinPQ<LEdge;>;")]
	private MinPQ pq;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		41,
		104,
		112,
		113,
		111,
		127,
		7,
		121,
		108,
		116,
		114,
		114,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void prim(EdgeWeightedGraph edgeWeightedGraph, int num)
	{
		this.scan(edgeWeightedGraph, num);
		while (!this.pq.IsEmpty)
		{
			Edge edge = (Edge)this.pq.delMin();
			int num2 = edge.either();
			int num3 = edge.other(num2);
			if (!LazyPrimMST.$assertionsDisabled && !this.marked[num2] && !this.marked[num3])
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			if (!this.marked[num2] || !this.marked[num3])
			{
				this.mst.enqueue(edge);
				this.weight += edge.weight();
				if (!this.marked[num2])
				{
					this.scan(edgeWeightedGraph, num2);
				}
				if (!this.marked[num3])
				{
					this.scan(edgeWeightedGraph, num3);
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		83,
		102,
		127,
		1,
		140,
		106,
		112,
		127,
		14,
		194,
		109,
		127,
		5,
		116,
		109,
		111,
		130,
		107,
		162,
		127,
		5,
		116,
		109,
		111,
		130,
		162,
		191,
		8,
		109,
		127,
		5,
		116,
		113,
		162,
		127,
		8,
		116,
		109,
		112,
		127,
		16,
		162,
		202
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedGraph edgeWeightedGraph)
	{
		double num = (double)0f;
		Iterator iterator = this.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			num += edge.weight();
		}
		double num2 = 1E-12;
		if (java.lang.Math.abs(num - this.weight()) > num2)
		{
			System.err.printf("Weight of edges does not equal weight(): %f vs. %f\n", new object[]
			{
				java.lang.Double.valueOf(num),
				java.lang.Double.valueOf(this.weight())
			});
			return false;
		}
		UF uF = new UF(edgeWeightedGraph.V());
		Iterator iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (uF.connected(num3, i))
			{
				System.err.println("Not a forest");
				return false;
			}
			uF.union(num3, i);
		}
		iterator2 = edgeWeightedGraph.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (!uF.connected(num3, i))
			{
				System.err.println("Not a spanning forest");
				return false;
			}
		}
		iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			uF = new UF(edgeWeightedGraph.V());
			Iterator iterator3 = this.mst.iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (edge3 != edge2)
				{
					uF.union(num4, i2);
				}
			}
			iterator3 = edgeWeightedGraph.edges().iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (!uF.connected(num4, i2) && edge3.weight() < edge2.weight())
				{
					System.err.println(new StringBuilder().append("Edge ").append(edge3).append(" violates cut optimality conditions").toString());
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		56,
		124,
		105,
		127,
		2,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void scan(EdgeWeightedGraph edgeWeightedGraph, int num)
	{
		if (!LazyPrimMST.$assertionsDisabled && this.marked[num])
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		this.marked[num] = true;
		Iterator iterator = edgeWeightedGraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			if (!this.marked[edge.other(num)])
			{
				this.pq.insert(edge);
			}
		}
	}
	[Signature("()Ljava/lang/Iterable<LEdge;>;")]
	public virtual Iterable edges()
	{
		return this.mst;
	}
	public virtual double weight()
	{
		return this.weight;
	}
	[LineNumberTable(new byte[]
	{
		28,
		104,
		107,
		107,
		113,
		107,
		50,
		198,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LazyPrimMST(EdgeWeightedGraph ewg)
	{
		this.mst = new global::Queue();
		this.pq = new MinPQ();
		this.marked = new bool[ewg.V()];
		for (int i = 0; i < ewg.V(); i++)
		{
			if (!this.marked[i])
			{
				this.prim(ewg, i);
			}
		}
		if (!LazyPrimMST.$assertionsDisabled && !this.check(ewg))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		80,
		110,
		103,
		103,
		127,
		2,
		137,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedGraph ewg = new EdgeWeightedGraph(i);
		LazyPrimMST lazyPrimMST = new LazyPrimMST(ewg);
		Iterator iterator = lazyPrimMST.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge obj = (Edge)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.printf("%.5f\n", new object[]
		{
			java.lang.Double.valueOf(lazyPrimMST.weight())
		});
	}
	[LineNumberTable(68)]
	static LazyPrimMST()
	{
		LazyPrimMST.$assertionsDisabled = !ClassLiteral<LazyPrimMST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key:Ljava/lang/Object;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class LinearProbingHashST : java.lang.Object
{
	private const int INIT_CAPACITY = 4;
	private int N;
	private int M;
	[Signature("[TKey;")]
	private object[] keys;
	[Signature("[TValue;")]
	private object[] vals;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		173,
		104,
		103,
		118,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinearProbingHashST(int i)
	{
		this.M = i;
		this.keys = (object[])new object[this.M];
		this.vals = (object[])new object[this.M];
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		38,
		114,
		112,
		9,
		182
	}), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(object obj)
	{
		int num = this.hash(obj);
		while (this.keys[num] != null)
		{
			if (java.lang.Object.instancehelper_equals(this.keys[num], obj))
			{
				return this.vals[num];
			}
			int expr_2D = num + 1;
			int expr_34 = this.M;
			num = ((expr_34 != -1) ? (expr_2D % expr_34) : 0);
		}
		return null;
	}
	[LineNumberTable(new byte[]
	{
		22,
		170,
		190,
		114,
		58,
		182,
		105,
		105,
		110
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(object obj1, object obj2)
	{
		if (obj2 == null)
		{
			this.delete(obj1);
		}
		if (this.N >= this.M / 2)
		{
			this.resize(2 * this.M);
		}
		int num = this.hash(obj1);
		while (this.keys[num] != null)
		{
			if (java.lang.Object.instancehelper_equals(this.keys[num], obj1))
			{
				this.vals[num] = obj2;
				return;
			}
			int expr_56 = num + 1;
			int expr_5D = this.M;
			num = ((expr_5D != -1) ? (expr_56 % expr_5D) : 0);
		}
		this.keys[num] = obj1;
		this.vals[num] = obj2;
		this.N++;
	}
	[LineNumberTable(new byte[]
	{
		46,
		170,
		104,
		112,
		214,
		105,
		169,
		116,
		138,
		105,
		105,
		105,
		105,
		110,
		104,
		116,
		133,
		174,
		159,
		8,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(object obj)
	{
		if (!this.contains(obj))
		{
			return;
		}
		int num = this.hash(obj);
		while (!java.lang.Object.instancehelper_equals(obj, this.keys[num]))
		{
			int expr_24 = num + 1;
			int expr_2B = this.M;
			num = ((expr_2B != -1) ? (expr_24 % expr_2B) : 0);
		}
		this.keys[num] = null;
		this.vals[num] = null;
		int expr_4C = num + 1;
		int expr_53 = this.M;
		num = ((expr_53 != -1) ? (expr_4C % expr_53) : 0);
		while (this.keys[num] != null)
		{
			object obj2 = this.keys[num];
			object obj3 = this.vals[num];
			this.keys[num] = null;
			this.vals[num] = null;
			this.N--;
			this.put(obj2, obj3);
			int expr_A4 = num + 1;
			int expr_AB = this.M;
			num = ((expr_AB != -1) ? (expr_A4 % expr_AB) : 0);
		}
		this.N--;
		if (this.N > 0 && this.N <= this.M / 8)
		{
			this.resize(this.M / 2);
		}
		if (!LinearProbingHashST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		9,
		103,
		107,
		106,
		22,
		230,
		69,
		108,
		108,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int i)
	{
		LinearProbingHashST linearProbingHashST = new LinearProbingHashST(i);
		for (int j = 0; j < this.M; j++)
		{
			if (this.keys[j] != null)
			{
				linearProbingHashST.put(this.keys[j], this.vals[j]);
			}
		}
		this.keys = linearProbingHashST.keys;
		this.vals = linearProbingHashST.vals;
		this.M = linearProbingHashST.M;
	}
	[LineNumberTable(54), Signature("(TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int hash(object this2)
	{
		int expr_0B = java.lang.Object.instancehelper_hashCode(this2) & 2147483647;
		int expr_12 = this.M;
		return (expr_12 != -1) ? (expr_0B % expr_12) : 0;
	}
	[LineNumberTable(49), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(object obj)
	{
		return this.get(obj) != null;
	}
	[LineNumberTable(new byte[]
	{
		92,
		112,
		127,
		31,
		194,
		110,
		111,
		120,
		127,
		64,
		226,
		60,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		if (this.M < 2 * this.N)
		{
			System.err.println(new StringBuilder().append("Hash table size M = ").append(this.M).append("; array size N = ").append(this.N).toString());
			return false;
		}
		for (int i = 0; i < this.M; i++)
		{
			if (this.keys[i] != null)
			{
				if (this.get(this.keys[i]) != this.vals[i])
				{
					System.err.println(new StringBuilder().append("get[").append(this.keys[i]).append("] = ").append(this.get(this.keys[i])).append("; vals[i] = ").append(this.vals[i]).toString());
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		159,
		169,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinearProbingHashST() : this(4)
	{
	}
	[LineNumberTable(new byte[]
	{
		81,
		102,
		107,
		56,
		134
	}), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		global::Queue queue = new global::Queue();
		for (int i = 0; i < this.M; i++)
		{
			if (this.keys[i] != null)
			{
				queue.enqueue(this.keys[i]);
			}
		}
		return queue;
	}
	[LineNumberTable(44)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		113,
		102,
		105,
		102,
		13,
		230,
		70,
		127,
		1,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		LinearProbingHashST linearProbingHashST = new LinearProbingHashST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			linearProbingHashST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = linearProbingHashST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(linearProbingHashST.get(text)).toString());
		}
	}
	[LineNumberTable(16)]
	static LinearProbingHashST()
	{
		LinearProbingHashST.$assertionsDisabled = !ClassLiteral<LinearProbingHashST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LinearRegression : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int N;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double alpha;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double beta;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double R2;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double svar;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double svar0;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double svar1;
	public virtual double slope()
	{
		return this.beta;
	}
	public virtual double intercept()
	{
		return this.alpha;
	}
	public virtual double R2()
	{
		return this.R2;
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		104,
		102,
		144,
		168,
		114,
		125,
		127,
		3,
		125,
		108,
		172,
		117,
		109,
		117,
		117,
		245,
		61,
		232,
		69,
		108,
		179,
		103,
		103,
		109,
		117,
		117,
		241,
		61,
		232,
		70,
		106,
		108,
		109,
		112,
		127,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinearRegression(double[] darr1, double[] darr2)
	{
		if (darr1.Length != darr2.Length)
		{
			string arg_18_0 = "array lengths are not equal";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		this.N = darr1.Length;
		double num = (double)0f;
		double num2 = (double)0f;
		double num3 = (double)0f;
		for (int i = 0; i < this.N; i++)
		{
			num += darr1[i];
		}
		for (int i = 0; i < this.N; i++)
		{
			num3 += darr1[i] * darr1[i];
		}
		for (int i = 0; i < this.N; i++)
		{
			num2 += darr2[i];
		}
		double num4 = num / (double)this.N;
		double num5 = num2 / (double)this.N;
		double num6 = (double)0f;
		double num7 = (double)0f;
		double num8 = (double)0f;
		for (int j = 0; j < this.N; j++)
		{
			num6 += (darr1[j] - num4) * (darr1[j] - num4);
			num7 += (darr2[j] - num5) * (darr2[j] - num5);
			num8 += (darr1[j] - num4) * (darr2[j] - num5);
		}
		this.beta = num8 / num6;
		this.alpha = num5 - this.beta * num4;
		double num9 = (double)0f;
		double num10 = (double)0f;
		int k;
		for (k = 0; k < this.N; k++)
		{
			double num11 = this.beta * darr1[k] + this.alpha;
			num9 += (num11 - darr2[k]) * (num11 - darr2[k]);
			num10 += (num11 - num5) * (num11 - num5);
		}
		k = this.N - 2;
		this.R2 = num10 / num7;
		this.svar = num9 / (double)k;
		this.svar1 = this.svar / num6;
		this.svar0 = this.svar / (double)this.N + num4 * num4 * this.svar1;
	}
	[LineNumberTable(108)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double interceptStdErr()
	{
		return java.lang.Math.sqrt(this.svar0);
	}
	[LineNumberTable(116)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double slopeStdErr()
	{
		return java.lang.Math.sqrt(this.svar1);
	}
	public virtual double predict(double d)
	{
		return this.beta * d + this.alpha;
	}
	[LineNumberTable(new byte[]
	{
		86,
		102,
		127,
		35
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string str = "";
		str = new StringBuilder().append(str).append(java.lang.String.format("%.2f N + %.2f", new object[]
		{
			java.lang.Double.valueOf(this.slope()),
			java.lang.Double.valueOf(this.intercept())
		})).toString();
		return new StringBuilder().append(str).append("  (R^2 = ").append(java.lang.String.format("%.3f", new object[]
		{
			java.lang.Double.valueOf(this.R2())
		})).append(")").toString();
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class LinkedBag : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("LinkedBag", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("LinkedBag.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("LinkedBag.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LLinkedBag<TItem;>.Node;")]
		private LinkedBag.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedBag this$0 = linkedBag;
		[LineNumberTable(103), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ListIterator(LinkedBag linkedBag, LinkedBag.1) : this(linkedBag)
		{
		}
		[LineNumberTable(new byte[]
		{
			53,
			111
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ListIterator(LinkedBag linkedBag)
		{
			this.current = LinkedBag.access$400(this.this$0);
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(107)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			60,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = LinkedBag.Node.access$100(this.current);
			this.current = LinkedBag.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("LinkedBag.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LLinkedBag<TItem;>.Node;")]
		private LinkedBag.Node next;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedBag this$0 = linkedBag;
		[LineNumberTable(53), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(LinkedBag linkedBag, LinkedBag.1) : this(linkedBag)
		{
		}
		[LineNumberTable(53), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$102(LinkedBag.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(53), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedBag.Node access$202(LinkedBag.Node node, LinkedBag.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(53), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$100(LinkedBag.Node node)
		{
			return node.item;
		}
		[LineNumberTable(53), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedBag.Node access$200(LinkedBag.Node node)
		{
			return node.next;
		}
		[LineNumberTable(53)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node(LinkedBag linkedBag)
		{
		}
	}
	private int N;
	[Signature("LLinkedBag<TItem;>.Node;")]
	private LinkedBag.Node first;
	[LineNumberTable(new byte[]
	{
		11,
		104,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinkedBag()
	{
		this.first = null;
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		37,
		103,
		109,
		109,
		109,
		110
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void add(object obj)
	{
		LinkedBag.Node node = this.first;
		this.first = new LinkedBag.Node(this, null);
		LinkedBag.Node.access$102(this.first, obj);
		LinkedBag.Node.access$202(this.first, node);
		this.N++;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(99), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new LinkedBag.ListIterator(this, null);
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(new byte[]
	{
		71,
		102,
		103,
		102,
		103,
		130,
		127,
		5,
		123,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		LinkedBag linkedBag = new LinkedBag();
		while (!StdIn.IsEmpty)
		{
			string obj = StdIn.readString();
			linkedBag.add(obj);
		}
		StdOut.println(new StringBuilder().append("size of bag = ").append(linkedBag.size()).toString());
		Iterator iterator = linkedBag.iterator();
		while (iterator.MoveNext())
		{
			string obj2 = (string)iterator.Current;
			StdOut.println(obj2);
		}
	}
	[LineNumberTable(48), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static LinkedBag.Node access$400(LinkedBag linkedBag)
	{
		return linkedBag.first;
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class LinkedQueue : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("LinkedQueue", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("LinkedQueue.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("LinkedQueue.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LLinkedQueue<TItem;>.Node;")]
		private LinkedQueue.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedQueue this$0 = linkedQueue;
		[LineNumberTable(168), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ListIterator(LinkedQueue linkedQueue, LinkedQueue.1) : this(linkedQueue)
		{
		}
		[LineNumberTable(new byte[]
		{
			118,
			111
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ListIterator(LinkedQueue linkedQueue)
		{
			this.current = LinkedQueue.access$400(this.this$0);
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(172)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			125,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = LinkedQueue.Node.access$000(this.current);
			this.current = LinkedQueue.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("LinkedQueue.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LLinkedQueue<TItem;>.Node;")]
		private LinkedQueue.Node next;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedQueue this$0 = linkedQueue;
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$000(LinkedQueue.Node node)
		{
			return node.item;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(LinkedQueue linkedQueue, LinkedQueue.1) : this(linkedQueue)
		{
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$002(LinkedQueue.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedQueue.Node access$202(LinkedQueue.Node node, LinkedQueue.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedQueue.Node access$200(LinkedQueue.Node node)
		{
			return node.next;
		}
		[LineNumberTable(42)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node(LinkedQueue linkedQueue)
		{
		}
	}
	private int N;
	[Signature("LLinkedQueue<TItem;>.Node;")]
	private LinkedQueue.Node first;
	[Signature("LLinkedQueue<TItem;>.Node;")]
	private LinkedQueue.Node last;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		76,
		104,
		106,
		141,
		105,
		114,
		112,
		178,
		112,
		111,
		175,
		98,
		106,
		36,
		169,
		171,
		103,
		104,
		137,
		171
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		if (this.N == 0)
		{
			if (this.first != null)
			{
				return false;
			}
			if (this.last != null)
			{
				return false;
			}
		}
		else if (this.N == 1)
		{
			if (this.first == null || this.last == null)
			{
				return false;
			}
			if (this.first != this.last)
			{
				return false;
			}
			if (LinkedQueue.Node.access$200(this.first) != null)
			{
				return false;
			}
		}
		else
		{
			if (this.first == this.last)
			{
				return false;
			}
			if (LinkedQueue.Node.access$200(this.first) == null)
			{
				return false;
			}
			if (LinkedQueue.Node.access$200(this.last) != null)
			{
				return false;
			}
			int num = 0;
			LinkedQueue.Node node;
			for (node = this.first; node != null; node = LinkedQueue.Node.access$200(node))
			{
				num++;
			}
			if (num != this.N)
			{
				return false;
			}
			node = this.first;
			while (LinkedQueue.Node.access$200(node) != null)
			{
				node = LinkedQueue.Node.access$200(node);
			}
			if (this.last != node)
			{
				return false;
			}
		}
		return true;
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(164), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new LinkedQueue.ListIterator(this, null);
	}
	[LineNumberTable(new byte[]
	{
		0,
		104,
		103,
		103,
		103,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinkedQueue()
	{
		this.first = null;
		this.last = null;
		this.N = 0;
		if (!LinkedQueue.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		38,
		103,
		109,
		109,
		109,
		118,
		109,
		110,
		122
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public void Enqueue(object obj)
	{
		LinkedQueue.Node node = this.last;
		this.last = new LinkedQueue.Node(this, null);
		LinkedQueue.Node.access$002(this.last, obj);
		LinkedQueue.Node.access$202(this.last, null);
		if (IsEmpty)
		{
			this.first = this.last;
		}
		else
		{
			LinkedQueue.Node.access$202(node, this.last);
		}
		this.N++;
		if (!LinkedQueue.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		54,
		120,
		108,
		113,
		110,
		111,
		122
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Dequeue()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = LinkedQueue.Node.access$000(this.first);
		this.first = LinkedQueue.Node.access$200(this.first);
		this.N--;
		if (IsEmpty)
		{
			this.last = null;
		}
		if (!LinkedQueue.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		29,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return LinkedQueue.Node.access$000(this.first);
	}
	[LineNumberTable(new byte[]
	{
		68,
		102,
		118,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			object obj = iterator.Current;
			stringBuilder.append(new StringBuilder().append(obj).append(" ").toString());
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		LinkedQueue linkedQueue = new LinkedQueue();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				linkedQueue.enqueue(text);
			}
			else if (!linkedQueue.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)linkedQueue.dequeue()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(linkedQueue.size()).append(" left on queue)").toString());
	}
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static LinkedQueue.Node access$400(LinkedQueue linkedQueue)
	{
		return linkedQueue.first;
	}
	[LineNumberTable(36)]
	static LinkedQueue()
	{
		LinkedQueue.$assertionsDisabled = !ClassLiteral<LinkedQueue>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class LinkedStack : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("LinkedStack", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("LinkedStack.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("LinkedStack.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LLinkedStack<TItem;>.Node;")]
		private LinkedStack.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedStack this$0 = linkedStack;
		[LineNumberTable(129), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ListIterator(LinkedStack linkedStack, LinkedStack.1) : this(linkedStack)
		{
		}
		[LineNumberTable(new byte[]
		{
			79,
			111
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ListIterator(LinkedStack linkedStack)
		{
			this.current = LinkedStack.access$400(this.this$0);
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(132)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			85,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = LinkedStack.Node.access$100(this.current);
			this.current = LinkedStack.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("LinkedStack.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LLinkedStack<TItem;>.Node;")]
		private LinkedStack.Node next;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal LinkedStack this$0 = linkedStack;
		[LineNumberTable(43), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(LinkedStack linkedStack, LinkedStack.1) : this(linkedStack)
		{
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$102(LinkedStack.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedStack.Node access$202(LinkedStack.Node node, LinkedStack.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$100(LinkedStack.Node node)
		{
			return node.item;
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static LinkedStack.Node access$200(LinkedStack.Node node)
		{
			return node.next;
		}
		[LineNumberTable(43)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node(LinkedStack linkedStack)
		{
		}
	}
	private int N;
	[Signature("LLinkedStack<TItem;>.Node;")]
	private LinkedStack.Node first;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		95,
		104,
		138,
		105,
		106,
		175,
		207,
		98,
		106,
		36,
		169,
		139
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		if (this.N == 0)
		{
			if (this.first != null)
			{
				return false;
			}
		}
		else if (this.N == 1)
		{
			if (this.first == null)
			{
				return false;
			}
			if (LinkedStack.Node.access$200(this.first) != null)
			{
				return false;
			}
		}
		else if (LinkedStack.Node.access$200(this.first) == null)
		{
			return false;
		}
		int num = 0;
		for (LinkedStack.Node node = this.first; node != null; node = LinkedStack.Node.access$200(node))
		{
			num++;
		}
		return num == this.N;
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(126), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new LinkedStack.ListIterator(this, null);
	}
	[LineNumberTable(new byte[]
	{
		1,
		104,
		103,
		103,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LinkedStack()
	{
		this.first = null;
		this.N = 0;
		if (!LinkedStack.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		28,
		103,
		109,
		109,
		109,
		110,
		122
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void push(object obj)
	{
		LinkedStack.Node node = this.first;
		this.first = new LinkedStack.Node(this, null);
		LinkedStack.Node.access$102(this.first, obj);
		LinkedStack.Node.access$202(this.first, node);
		this.N++;
		if (!LinkedStack.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		42,
		120,
		108,
		113,
		110,
		122
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object pop()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = LinkedStack.Node.access$100(this.first);
		this.first = LinkedStack.Node.access$200(this.first);
		this.N--;
		if (!LinkedStack.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		57,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return LinkedStack.Node.access$100(this.first);
	}
	[LineNumberTable(new byte[]
	{
		66,
		102,
		118,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			object obj = iterator.Current;
			stringBuilder.append(new StringBuilder().append(obj).append(" ").toString());
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		120,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		LinkedStack linkedStack = new LinkedStack();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				linkedStack.push(text);
			}
			else if (!linkedStack.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)linkedStack.pop()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(linkedStack.size()).append(" left on stack)").toString());
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static LinkedStack.Node access$400(LinkedStack linkedStack)
	{
		return linkedStack.first;
	}
	[LineNumberTable(38)]
	static LinkedStack()
	{
		LinkedStack.$assertionsDisabled = !ClassLiteral<LinkedStack>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LongestCommonSubstring : java.lang.Object
{
	[LineNumberTable(20)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LongestCommonSubstring()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		167,
		110,
		110,
		123,
		123,
		104,
		167,
		126,
		169,
		169,
		103,
		172,
		191,
		2,
		190,
		107,
		107,
		254,
		53,
		235,
		80,
		108,
		127,
		13
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		In.__<clinit>();
		In in2 = new In(strarr[1]);
		string text = java.lang.String.instancehelper_replaceAll(java.lang.String.instancehelper_trim(@in.readAll()), "\\s+", " ");
		string text2 = java.lang.String.instancehelper_replaceAll(java.lang.String.instancehelper_trim(in2.readAll()), "\\s+", " ");
		int num = java.lang.String.instancehelper_length(text);
		java.lang.String.instancehelper_length(text2);
		string text3 = new StringBuilder().append(text).append('\u0001').append(text2).toString();
		int num2 = java.lang.String.instancehelper_length(text3);
		SuffixArray suffixArray = new SuffixArray(text3);
		string text4 = "";
		for (int i = 1; i < num2; i++)
		{
			if (suffixArray.index(i) >= num || suffixArray.index(i - 1) >= num)
			{
				if (suffixArray.index(i) <= num || suffixArray.index(i - 1) <= num)
				{
					int num3 = suffixArray.lcp(i);
					if (num3 > java.lang.String.instancehelper_length(text4))
					{
						text4 = java.lang.String.instancehelper_substring(text3, suffixArray.index(i), suffixArray.index(i) + num3);
					}
				}
			}
		}
		StdOut.println(java.lang.String.instancehelper_length(text4));
		StdOut.println(new StringBuilder().append("'").append(text4).append("'").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LookupCSV : java.lang.Object
{
	[LineNumberTable(33)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LookupCSV()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		105,
		169,
		166,
		110,
		104,
		104,
		110,
		102,
		102,
		106,
		130,
		103,
		103,
		121,
		106,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[1]);
		int num2 = Integer.parseInt(strarr[2]);
		ST sT = new ST();
		In.__<clinit>();
		In @in = new In(strarr[0]);
		while (@in.hasNextLine())
		{
			string text = @in.readLine();
			string[] array = java.lang.String.instancehelper_split(text, ",");
			string c = array[num];
			string obj = array[num2];
			sT.put(c, obj);
		}
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (sT.contains(text))
			{
				StdOut.println(sT.get(text));
			}
			else
			{
				StdOut.println("Not found");
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class LookupIndex : java.lang.Object
{
	[LineNumberTable(36)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LookupIndex()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		100,
		100,
		135,
		102,
		135,
		107,
		104,
		106,
		102,
		109,
		103,
		119,
		121,
		116,
		245,
		59,
		235,
		71,
		133,
		170,
		106,
		103,
		106,
		127,
		12,
		127,
		3,
		107,
		127,
		13,
		127,
		3,
		133
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		string regex = strarr[1];
		In @in = new In(str);
		ST sT = new ST();
		ST sT2 = new ST();
		while (@in.hasNextLine())
		{
			string text = @in.readLine();
			string[] array = java.lang.String.instancehelper_split(text, regex);
			string text2 = array[0];
			for (int i = 1; i < array.Length; i++)
			{
				string text3 = array[i];
				if (!sT.contains(text2))
				{
					sT.put(text2, new global::Queue());
				}
				if (!sT2.contains(text3))
				{
					sT2.put(text3, new global::Queue());
				}
				((global::Queue)sT.get(text2)).enqueue(text3);
				((global::Queue)sT2.get(text3)).enqueue(text2);
			}
		}
		StdOut.println("Done indexing");
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readLine();
			if (sT.contains(text))
			{
				Iterator iterator = ((global::Queue)sT.get(text)).iterator();
				while (iterator.MoveNext())
				{
					string text2 = (string)iterator.Current;
					StdOut.println(new StringBuilder().append("  ").append(text2).toString());
				}
			}
			if (sT2.contains(text))
			{
				Iterator iterator = ((global::Queue)sT2.get(text)).iterator();
				while (iterator.MoveNext())
				{
					string text2 = (string)iterator.Current;
					StdOut.println(new StringBuilder().append("  ").append(text2).toString());
				}
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LRS : java.lang.Object
{
	[LineNumberTable(29)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LRS()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		174,
		117,
		135,
		135,
		102,
		104,
		106,
		138,
		250,
		60,
		232,
		72,
		127,
		12
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = java.lang.String.instancehelper_replaceAll(StdIn.readAll(), "\\s+", " ");
		SuffixArray suffixArray = new SuffixArray(text);
		int num = suffixArray.length();
		string text2 = "";
		for (int i = 1; i < num; i++)
		{
			int num2 = suffixArray.lcp(i);
			if (num2 > java.lang.String.instancehelper_length(text2))
			{
				text2 = java.lang.String.instancehelper_substring(text, suffixArray.index(i), suffixArray.index(i) + num2);
			}
		}
		StdOut.println(new StringBuilder().append("'").append(text2).append("'").toString());
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LSD : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		166,
		99,
		102,
		135,
		203,
		106,
		104,
		62,
		200,
		104,
		58,
		200,
		104,
		63,
		17,
		200,
		104,
		40,
		232,
		47,
		233,
		84
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(string[] strarr, int i)
	{
		int num = strarr.Length;
		int num2 = 256;
		string[] array = new string[num];
		for (int j = i - 1; j >= 0; j += -1)
		{
			int[] array2 = new int[num2 + 1];
			for (int k = 0; k < num; k++)
			{
				int[] arg_3D_0 = array2;
				int num3 = (int)(java.lang.String.instancehelper_charAt(strarr[k], j) + '\u0001');
				int[] array3 = arg_3D_0;
				array3[num3]++;
			}
			for (int k = 0; k < num2; k++)
			{
				int[] arg_63_0 = array2;
				int num3 = k + 1;
				int[] array3 = arg_63_0;
				array3[num3] += array2[k];
			}
			for (int k = 0; k < num; k++)
			{
				string[] arg_B4_0 = array;
				int[] arg_94_0 = array2;
				int num3 = (int)java.lang.String.instancehelper_charAt(strarr[k], j);
				int[] array3 = arg_94_0;
				int[] arg_A3_0 = array3;
				int arg_A1_0 = num3;
				num3 = array3[num3];
				int num4 = arg_A1_0;
				array3 = arg_A3_0;
				int arg_B4_1 = num3;
				array3[num4] = num3 + 1;
				arg_B4_0[arg_B4_1] = strarr[k];
			}
			for (int k = 0; k < num; k++)
			{
				strarr[k] = array[k];
			}
		}
	}
	[LineNumberTable(20)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LSD()
	{
	}
	[LineNumberTable(new byte[]
	{
		2,
		102,
		163,
		105,
		102,
		63,
		3,
		198,
		167,
		102,
		40,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		int num = array.Length;
		int num2 = java.lang.String.instancehelper_length(array[0]);
		for (int i = 0; i < num; i++)
		{
			if (!LSD.$assertionsDisabled && java.lang.String.instancehelper_length(array[i]) != num2)
			{
				object arg_34_0 = "Strings must have fixed length";
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError(arg_34_0);
			}
		}
		LSD.sort(array, num2);
		for (int i = 0; i < num; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(20)]
	static LSD()
	{
		LSD.$assertionsDisabled = !ClassLiteral<LSD>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class LZW : java.lang.Object
{
	private const int R = 256;
	private const int L = 4096;
	private const int W = 12;
	[LineNumberTable(new byte[]
	{
		159,
		167,
		102,
		102,
		106,
		63,
		8,
		134,
		134,
		108,
		104,
		120,
		104,
		114,
		123,
		105,
		101,
		108,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void compress()
	{
		string text = BinaryStdIn.readString();
		TST tST = new TST();
		int i;
		for (i = 0; i < 256; i++)
		{
			tST.put(new StringBuilder().append("").append((char)i).toString(), Integer.valueOf(i));
		}
		i = 257;
		while (java.lang.String.instancehelper_length(text) > 0)
		{
			string text2 = tST.longestPrefixOf(text);
			BinaryStdOut.write(((Integer)tST.get(text2)).intValue(), 12);
			int num = java.lang.String.instancehelper_length(text2);
			if (num < java.lang.String.instancehelper_length(text) && i < 4096)
			{
				TST arg_A5_0 = tST;
				string arg_A5_1 = java.lang.String.instancehelper_substring(text, 0, num + 1);
				int arg_A0_0 = i;
				i++;
				arg_A5_0.put(arg_A5_1, Integer.valueOf(arg_A0_0));
			}
			text = java.lang.String.instancehelper_substring(text, num);
		}
		BinaryStdOut.write(256, 12);
		BinaryStdOut.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		187,
		203,
		106,
		62,
		134,
		140,
		104,
		164,
		102,
		104,
		109,
		101,
		127,
		3,
		127,
		13,
		99,
		101,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void expand()
	{
		string[] array = new string[4096];
		int i;
		for (i = 0; i < 256; i++)
		{
			array[i] = new StringBuilder().append("").append((char)i).toString();
		}
		string[] arg_44_0 = array;
		int arg_44_1 = i;
		i++;
		arg_44_0[arg_44_1] = "";
		int num = BinaryStdIn.readInt(12);
		string text = array[num];
		while (true)
		{
			BinaryStdOut.write(text);
			num = BinaryStdIn.readInt(12);
			if (num == 256)
			{
				break;
			}
			string text2 = array[num];
			if (i == num)
			{
				text2 = new StringBuilder().append(text).append(java.lang.String.instancehelper_charAt(text, 0)).toString();
			}
			if (i < 4096)
			{
				string[] arg_BE_0 = array;
				int arg_BE_1 = i;
				i++;
				arg_BE_0[arg_BE_1] = new StringBuilder().append(text).append(java.lang.String.instancehelper_charAt(text2, 0)).toString();
			}
			text = text2;
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(19)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public LZW()
	{
	}
	[LineNumberTable(new byte[]
	{
		21,
		118,
		118,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		if (java.lang.String.instancehelper_equals(strarr[0], "-"))
		{
			LZW.compress();
		}
		else
		{
			if (!java.lang.String.instancehelper_equals(strarr[0], "+"))
			{
				string arg_36_0 = "Illegal command line argument";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_36_0);
			}
			LZW.expand();
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TKey;>;")]
public class MaxPQ : java.lang.Object, Iterable, IEnumerable
{
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TKey;>;"), SourceFile("MaxPQ.java")]
	internal sealed class HeapIterator : java.lang.Object, Iterator
	{
		[Signature("LMaxPQ<TKey;>;")]
		private MaxPQ copy;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal MaxPQ this$0 = maxPQ;
		[LineNumberTable(new byte[]
		{
			160,
			128,
			111,
			127,
			1,
			124,
			107,
			51,
			134
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public HeapIterator(MaxPQ maxPQ)
		{
			if (MaxPQ.access$000(maxPQ) == null)
			{
				MaxPQ.__<clinit>();
				this.copy = new MaxPQ(maxPQ.size());
			}
			else
			{
				MaxPQ.__<clinit>();
				this.copy = new MaxPQ(maxPQ.size(), MaxPQ.access$000(maxPQ));
			}
			for (int i = 1; i <= MaxPQ.access$100(maxPQ); i++)
			{
				this.copy.insert(MaxPQ.access$200(maxPQ)[i]);
			}
		}
		[LineNumberTable(249)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return !this.copy.IsEmpty;
		}
		[LineNumberTable(250)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			160,
			139,
			115
		}), Signature("()TKey;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			return this.copy.delMax();
		}
	}
	[Signature("[TKey;")]
	private object[] pq;
	private int N;
	[Signature("Ljava/util/Comparator<TKey;>;")]
	private Comparator comparator;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		3,
		104,
		115,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MaxPQ(int i)
	{
		this.pq = (object[])new object[i + 1];
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		21,
		104,
		103,
		115,
		103
	}), Signature("(ILjava/util/Comparator<TKey;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MaxPQ(int i, Comparator c)
	{
		this.comparator = c;
		this.pq = (object[])new object[i + 1];
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		67,
		107,
		100,
		121,
		108,
		104,
		99,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void sink(int num)
	{
		while (2 * num <= this.N)
		{
			int num2 = 2 * num;
			if (num2 < this.N && this.less(num2, num2 + 1))
			{
				num2++;
			}
			if (!this.less(num, num2))
			{
				break;
			}
			this.exch(num, num2);
			num = num2;
		}
	}
	[LineNumberTable(210)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isMaxHeap()
	{
		return this.isMaxHeap(1);
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		80,
		123,
		108,
		124,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!MaxPQ.$assertionsDisabled && num <= this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		object[] array = (object[])new object[num];
		for (int i = 1; i <= this.N; i++)
		{
			array[i] = this.pq[i];
		}
		this.pq = array;
	}
	[LineNumberTable(new byte[]
	{
		124,
		112,
		106,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void swim(int num)
	{
		while (num > 1 && this.less(num / 2, num))
		{
			this.exch(num, num / 2);
			num /= 2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		89,
		105,
		112,
		105
	})]
	private void exch(int num, int num2)
	{
		object obj = this.pq[num];
		this.pq[num] = this.pq[num2];
		this.pq[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		160,
		80,
		104,
		190
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool less(int num, int num2)
	{
		if (this.comparator == null)
		{
			return Comparable.__Helper.compareTo((IComparable)this.pq[num], this.pq[num2]) < 0;
		}
		return this.comparator.compare(this.pq[num], this.pq[num2]) < 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		101,
		107,
		106,
		117,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isMaxHeap(int num)
	{
		if (num > this.N)
		{
			return true;
		}
		int num2 = 2 * num;
		int num3 = 2 * num + 1;
		return (num2 > this.N || !this.less(num, num2)) && (num3 > this.N || !this.less(num, num3)) && (this.isMaxHeap(num2) && this.isMaxHeap(num3));
	}
	[LineNumberTable(new byte[]
	{
		12,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MaxPQ() : this(1)
	{
	}
	[LineNumberTable(new byte[]
	{
		94,
		191,
		1,
		123,
		108,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void insert(object obj)
	{
		if (this.N >= this.pq.Length - 1)
		{
			this.resize(2 * this.pq.Length);
		}
		object[] arg_3A_0 = this.pq;
		int num = this.N + 1;
		int arg_3A_1 = num;
		this.N = num;
		arg_3A_0[arg_3A_1] = obj;
		this.swim(this.N);
		if (!MaxPQ.$assertionsDisabled && !this.isMaxHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		108,
		120,
		105,
		122,
		103,
		112,
		127,
		12,
		122
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object delMax()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = this.pq[1];
		int arg_36_1 = 1;
		int n = this.N;
		int arg_36_2 = n;
		this.N = n - 1;
		this.exch(arg_36_1, arg_36_2);
		this.sink(1);
		this.pq[this.N + 1] = null;
		if (this.N > 0 && this.N == (this.pq.Length - 1) / 4)
		{
			this.resize(this.pq.Length / 2);
		}
		if (!MaxPQ.$assertionsDisabled && !this.isMaxHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		32,
		106
	}), Signature("(Ljava/util/Comparator<TKey;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MaxPQ(Comparator c) : this(1, c)
	{
	}
	[LineNumberTable(new byte[]
	{
		40,
		104,
		104,
		116,
		107,
		45,
		134,
		109,
		39,
		134,
		122
	}), Signature("([TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MaxPQ(object[] objarr)
	{
		this.N = objarr.Length;
		this.pq = (object[])new object[objarr.Length + 1];
		for (int i = 0; i < this.N; i++)
		{
			this.pq[i + 1] = objarr[i];
		}
		for (int i = this.N / 2; i >= 1; i += -1)
		{
			this.sink(i);
		}
		if (!MaxPQ.$assertionsDisabled && !this.isMaxHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		74,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object max()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.pq[1];
	}
	[LineNumberTable(233), Signature("()Ljava/util/Iterator<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new MaxPQ.HeapIterator(this);
	}
	[LineNumberTable(new byte[]
	{
		160,
		148,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		MaxPQ maxPQ = new MaxPQ();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				maxPQ.insert(text);
			}
			else if (!maxPQ.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)maxPQ.delMax()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(maxPQ.size()).append(" left on pq)").toString());
	}
	[LineNumberTable(44), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static Comparator access$000(MaxPQ maxPQ)
	{
		return maxPQ.comparator;
	}
	[LineNumberTable(44), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(MaxPQ maxPQ)
	{
		return maxPQ.N;
	}
	[LineNumberTable(44), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object[] access$200(MaxPQ maxPQ)
	{
		return maxPQ.pq;
	}
	[LineNumberTable(44)]
	static MaxPQ()
	{
		MaxPQ.$assertionsDisabled = !ClassLiteral<MaxPQ>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Merge : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		60,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Merge.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(91)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		17,
		101,
		104,
		105,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, IComparable[] array2, int num, int num2)
	{
		if (num2 <= num)
		{
			return;
		}
		int num3 = num + (num2 - num) / 2;
		Merge.sort(array, array2, num, num3);
		Merge.sort(array, array2, num3 + 1, num2);
		Merge.merge(array, array2, num, num3, num2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		124,
		191,
		0,
		103,
		38,
		230,
		69,
		102,
		106,
		112,
		113,
		121,
		234,
		60,
		233,
		72,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(IComparable[] array, IComparable[] array2, int num, int num2, int num3)
	{
		if (!Merge.$assertionsDisabled && !Merge.isSorted(array, num, num2))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!Merge.$assertionsDisabled && !Merge.isSorted(array, num2 + 1, num3))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		int i;
		for (i = num; i <= num3; i++)
		{
			array2[i] = array[i];
		}
		i = num;
		int num4 = num2 + 1;
		for (int j = num; j <= num3; j++)
		{
			if (i > num2)
			{
				int arg_6B_1 = j;
				int arg_6A_1 = num4;
				num4++;
				array[arg_6B_1] = array2[arg_6A_1];
			}
			else if (num4 > num3)
			{
				int arg_7C_1 = j;
				int arg_7B_1 = i;
				i++;
				array[arg_7C_1] = array2[arg_7B_1];
			}
			else if (Merge.less(array2[num4], array2[i]))
			{
				int arg_95_1 = j;
				int arg_94_1 = num4;
				num4++;
				array[arg_95_1] = array2[arg_94_1];
			}
			else
			{
				int arg_A1_1 = j;
				int arg_A0_1 = i;
				i++;
				array[arg_A1_1] = array2[arg_A0_1];
			}
		}
		if (!Merge.$assertionsDisabled && !Merge.isSorted(array, num, num3))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(106)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return Merge.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		106,
		102,
		105,
		106,
		109,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, int[] array2, int[] array3, int num, int num2)
	{
		if (num2 <= num)
		{
			return;
		}
		int num3 = num + (num2 - num) / 2;
		Merge.sort(array, array2, array3, num, num3);
		Merge.sort(array, array2, array3, num3 + 1, num2);
		Merge.merge(array, array2, array3, num, num3, num2);
	}
	[LineNumberTable(new byte[]
	{
		73,
		103,
		38,
		230,
		69,
		103,
		106,
		113,
		113,
		125,
		234,
		60,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(IComparable[] array, int[] array2, int[] array3, int num, int num2, int num3)
	{
		int i;
		for (i = num; i <= num3; i++)
		{
			array3[i] = array2[i];
		}
		i = num;
		int num4 = num2 + 1;
		for (int j = num; j <= num3; j++)
		{
			if (i > num2)
			{
				int arg_32_1 = j;
				int arg_31_1 = num4;
				num4++;
				array2[arg_32_1] = array3[arg_31_1];
			}
			else if (num4 > num3)
			{
				int arg_43_1 = j;
				int arg_42_1 = i;
				i++;
				array2[arg_43_1] = array3[arg_42_1];
			}
			else if (Merge.less(array[array3[num4]], array[array3[i]]))
			{
				int arg_60_1 = j;
				int arg_5F_1 = num4;
				num4++;
				array2[arg_60_1] = array3[arg_5F_1];
			}
			else
			{
				int arg_6C_1 = j;
				int arg_6B_1 = i;
				i++;
				array2[arg_6C_1] = array3[arg_6B_1];
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		29,
		104,
		108,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		IComparable[] array = new IComparable[carr.Length];
		Merge.sort(carr, array, 0, carr.Length - 1);
		if (!Merge.$assertionsDisabled && !Merge.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		115,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(38)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Merge()
	{
	}
	[LineNumberTable(new byte[]
	{
		46,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		94,
		99,
		103,
		102,
		36,
		166,
		103,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] indexSort(IComparable[] carr)
	{
		int num = carr.Length;
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = i;
		}
		int[] array2 = new int[num];
		Merge.sort(carr, array, array2, 0, num - 1);
		return array;
	}
	[LineNumberTable(new byte[]
	{
		125,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Merge.sort(array);
		Merge.show(array);
	}
	[LineNumberTable(35)]
	static Merge()
	{
		Merge.$assertionsDisabled = !ClassLiteral<Merge>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class MergeBU : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(83)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		103,
		38,
		230,
		69,
		102,
		106,
		112,
		113,
		121,
		234,
		60,
		233,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(IComparable[] array, IComparable[] array2, int num, int num2, int num3)
	{
		int i;
		for (i = num; i <= num3; i++)
		{
			array2[i] = array[i];
		}
		i = num;
		int num4 = num2 + 1;
		for (int j = num; j <= num3; j++)
		{
			if (i > num2)
			{
				int arg_30_1 = j;
				int arg_2F_1 = num4;
				num4++;
				array[arg_30_1] = array2[arg_2F_1];
			}
			else if (num4 > num3)
			{
				int arg_41_1 = j;
				int arg_40_1 = i;
				i++;
				array[arg_41_1] = array2[arg_40_1];
			}
			else if (MergeBU.less(array2[num4], array2[i]))
			{
				int arg_5A_1 = j;
				int arg_59_1 = num4;
				num4++;
				array[arg_5A_1] = array2[arg_59_1];
			}
			else
			{
				int arg_66_1 = j;
				int arg_65_1 = i;
				i++;
				array[arg_66_1] = array2[arg_65_1];
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		48,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (MergeBU.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		14,
		99,
		103,
		105,
		104,
		99,
		103,
		113,
		237,
		60,
		40,
		233,
		72,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int num = carr.Length;
		IComparable[] array = new IComparable[num];
		for (int i = 1; i < num; i += i)
		{
			for (int j = 0; j < num - i; j += i + i)
			{
				int num2 = j;
				int num3 = j + i - 1;
				int num4 = java.lang.Math.min(j + i + i - 1, num - 1);
				MergeBU.merge(carr, array, num2, num3, num4);
			}
		}
		if (!MergeBU.$assertionsDisabled && !MergeBU.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		55,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(38)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private MergeBU()
	{
	}
	[LineNumberTable(new byte[]
	{
		38,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		65,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		MergeBU.sort(array);
		MergeBU.show(array);
	}
	[LineNumberTable(35)]
	static MergeBU()
	{
		MergeBU.$assertionsDisabled = !ClassLiteral<MergeBU>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class MergeX : java.lang.Object
{
	private const int CUTOFF = 7;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		72,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (MergeX.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(111)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		46,
		102,
		117,
		42,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void insertionSort(IComparable[] array, int num, int num2)
	{
		for (int i = num; i <= num2; i++)
		{
			int num3 = i;
			while (num3 > num && MergeX.less(array[num3], array[num3 - 1]))
			{
				MergeX.exch(array, num3, num3 - 1);
				num3 += -1;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		11,
		102,
		106,
		129,
		104,
		105,
		235,
		72,
		111,
		112,
		161,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, IComparable[] array2, int num, int num2)
	{
		if (num2 <= num + 7)
		{
			MergeX.insertionSort(array2, num, num2);
			return;
		}
		int num3 = num + (num2 - num) / 2;
		MergeX.sort(array2, array, num, num3);
		MergeX.sort(array2, array, num3 + 1, num2);
		if (!MergeX.less(array[num3 + 1], array[num3]))
		{
			ByteCodeHelper.arraycopy(array, num, array2, num, num2 - num + 1);
			return;
		}
		MergeX.merge(array, array2, num, num3, num2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		124,
		159,
		0,
		102,
		106,
		112,
		113,
		121,
		234,
		60,
		233,
		72,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(IComparable[] array, IComparable[] array2, int num, int num2, int num3)
	{
		if (!MergeX.$assertionsDisabled && !MergeX.isSorted(array, num, num2))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!MergeX.$assertionsDisabled && !MergeX.isSorted(array, num2 + 1, num3))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		int num4 = num;
		int num5 = num2 + 1;
		for (int i = num; i <= num3; i++)
		{
			if (num4 > num2)
			{
				int arg_58_1 = i;
				int arg_57_1 = num5;
				num5++;
				array2[arg_58_1] = array[arg_57_1];
			}
			else if (num5 > num3)
			{
				int arg_69_1 = i;
				int arg_68_1 = num4;
				num4++;
				array2[arg_69_1] = array[arg_68_1];
			}
			else if (MergeX.less(array[num5], array[num4]))
			{
				int arg_82_1 = i;
				int arg_81_1 = num5;
				num5++;
				array2[arg_82_1] = array[arg_81_1];
			}
			else
			{
				int arg_8E_1 = i;
				int arg_8D_1 = num4;
				num4++;
				array2[arg_8E_1] = array[arg_8D_1];
			}
		}
		if (!MergeX.$assertionsDisabled && !MergeX.isSorted(array2, num, num3))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(118)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return MergeX.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		54,
		100,
		102,
		100
	})]
	private static void exch(IComparable[] array, int num, int num2)
	{
		IComparable comparable = array[num];
		array[num] = array[num2];
		array[num2] = comparable;
	}
	[LineNumberTable(new byte[]
	{
		38,
		108,
		108,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		IComparable[] array = (IComparable[])carr.Clone();
		MergeX.sort(array, carr, 0, carr.Length - 1);
		if (!MergeX.$assertionsDisabled && !MergeX.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		79,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private MergeX()
	{
	}
	[LineNumberTable(new byte[]
	{
		90,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		MergeX.sort(array);
		MergeX.show(array);
	}
	[LineNumberTable(35)]
	static MergeX()
	{
		MergeX.$assertionsDisabled = !ClassLiteral<MergeX>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TKey;>;")]
public class MinPQ : java.lang.Object, Iterable, IEnumerable
{
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TKey;>;"), SourceFile("MinPQ.java")]
	internal sealed class HeapIterator : java.lang.Object, Iterator
	{
		[Signature("LMinPQ<TKey;>;")]
		private MinPQ copy;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal MinPQ this$0 = minPQ;
		[LineNumberTable(new byte[]
		{
			160,
			119,
			111,
			127,
			1,
			124,
			107,
			51,
			134
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public HeapIterator(MinPQ minPQ)
		{
			if (MinPQ.access$000(minPQ) == null)
			{
				MinPQ.__<clinit>();
				this.copy = new MinPQ(minPQ.size());
			}
			else
			{
				MinPQ.__<clinit>();
				this.copy = new MinPQ(minPQ.size(), MinPQ.access$000(minPQ));
			}
			for (int i = 1; i <= MinPQ.access$100(minPQ); i++)
			{
				this.copy.insert(MinPQ.access$200(minPQ)[i]);
			}
		}
		[LineNumberTable(240)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return !this.copy.IsEmpty;
		}
		[LineNumberTable(241)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			160,
			130,
			115
		}), Signature("()TKey;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			return this.copy.delMin();
		}
	}
	[Signature("[TKey;")]
	private object[] pq;
	private int N;
	[Signature("Ljava/util/Comparator<TKey;>;")]
	private Comparator comparator;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		86,
		191,
		1,
		123,
		108,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void insert(object obj)
	{
		if (this.N == this.pq.Length - 1)
		{
			this.resize(2 * this.pq.Length);
		}
		object[] arg_3A_0 = this.pq;
		int num = this.N + 1;
		int arg_3A_1 = num;
		this.N = num;
		arg_3A_0[arg_3A_1] = obj;
		this.swim(this.N);
		if (!MinPQ.$assertionsDisabled && !this.isMinHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		10,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MinPQ() : this(1)
	{
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		100,
		120,
		109,
		123,
		103,
		112,
		127,
		12,
		122
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object delMin()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		this.exch(1, this.N);
		object[] arg_3E_0 = this.pq;
		int n = this.N;
		int arg_3E_1 = n;
		this.N = n - 1;
		object result = arg_3E_0[arg_3E_1];
		this.sink(1);
		this.pq[this.N + 1] = null;
		if (this.N > 0 && this.N == (this.pq.Length - 1) / 4)
		{
			this.resize(this.pq.Length / 2);
		}
		if (!MinPQ.$assertionsDisabled && !this.isMinHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		1,
		104,
		115,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MinPQ(int i)
	{
		this.pq = (object[])new object[i + 1];
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		19,
		104,
		103,
		115,
		103
	}), Signature("(ILjava/util/Comparator<TKey;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MinPQ(int i, Comparator c)
	{
		this.comparator = c;
		this.pq = (object[])new object[i + 1];
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		123,
		107,
		100,
		121,
		108,
		104,
		99,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void sink(int num)
	{
		while (2 * num <= this.N)
		{
			int num2 = 2 * num;
			if (num2 < this.N && this.greater(num2, num2 + 1))
			{
				num2++;
			}
			if (!this.greater(num, num2))
			{
				break;
			}
			this.exch(num, num2);
			num = num2;
		}
	}
	[LineNumberTable(202)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isMinHeap()
	{
		return this.isMinHeap(1);
	}
	[LineNumberTable(new byte[]
	{
		74,
		123,
		108,
		124,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!MinPQ.$assertionsDisabled && num <= this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		object[] array = (object[])new object[num];
		for (int i = 1; i <= this.N; i++)
		{
			array[i] = this.pq[i];
		}
		this.pq = array;
	}
	[LineNumberTable(new byte[]
	{
		116,
		112,
		106,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void swim(int num)
	{
		while (num > 1 && this.greater(num / 2, num))
		{
			this.exch(num, num / 2);
			num /= 2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		105,
		112,
		105
	})]
	private void exch(int num, int num2)
	{
		object obj = this.pq[num];
		this.pq[num] = this.pq[num2];
		this.pq[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		160,
		72,
		104,
		190
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool greater(int num, int num2)
	{
		if (this.comparator == null)
		{
			return Comparable.__Helper.compareTo((IComparable)this.pq[num], this.pq[num2]) > 0;
		}
		return this.comparator.compare(this.pq[num], this.pq[num2]) > 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		93,
		107,
		106,
		117,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isMinHeap(int num)
	{
		if (num > this.N)
		{
			return true;
		}
		int num2 = 2 * num;
		int num3 = 2 * num + 1;
		return (num2 > this.N || !this.greater(num, num2)) && (num3 > this.N || !this.greater(num, num3)) && (this.isMinHeap(num2) && this.isMinHeap(num3));
	}
	[LineNumberTable(79), Signature("(Ljava/util/Comparator<TKey;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MinPQ(Comparator c) : this(1, c)
	{
	}
	[LineNumberTable(new byte[]
	{
		36,
		104,
		104,
		116,
		107,
		45,
		134,
		109,
		39,
		134,
		122
	}), Signature("([TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MinPQ(object[] objarr)
	{
		this.N = objarr.Length;
		this.pq = (object[])new object[objarr.Length + 1];
		for (int i = 0; i < this.N; i++)
		{
			this.pq[i + 1] = objarr[i];
		}
		for (int i = this.N / 2; i >= 1; i += -1)
		{
			this.sink(i);
		}
		if (!MinPQ.$assertionsDisabled && !this.isMinHeap())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		68,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object min()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Priority queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.pq[1];
	}
	[LineNumberTable(225), Signature("()Ljava/util/Iterator<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new MinPQ.HeapIterator(this);
	}
	[LineNumberTable(new byte[]
	{
		160,
		139,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		MinPQ minPQ = new MinPQ();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				minPQ.insert(text);
			}
			else if (!minPQ.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)minPQ.delMin()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(minPQ.size()).append(" left on pq)").toString());
	}
	[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static Comparator access$000(MinPQ minPQ)
	{
		return minPQ.comparator;
	}
	[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(MinPQ minPQ)
	{
		return minPQ.N;
	}
	[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object[] access$200(MinPQ minPQ)
	{
		return minPQ.pq;
	}
	[LineNumberTable(42)]
	static MinPQ()
	{
		MinPQ.$assertionsDisabled = !ClassLiteral<MinPQ>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class MSD : java.lang.Object
{
	private const int R = 256;
	private const int CUTOFF = 15;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		103,
		107,
		193,
		107,
		102,
		106,
		17,
		230,
		70,
		106,
		51,
		198,
		102,
		106,
		31,
		3,
		230,
		70,
		102,
		41,
		230,
		69,
		106,
		57,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(string[] array, int num, int num2, int num3, string[] array2)
	{
		if (num2 <= num + 15)
		{
			MSD.insertion(array, num, num2, num3);
			return;
		}
		int[] array3 = new int[258];
		for (int i = num; i <= num2; i++)
		{
			int num4 = MSD.charAt(array[i], num3);
			int[] arg_33_0 = array3;
			int num5 = num4 + 2;
			int[] array4 = arg_33_0;
			array4[num5]++;
		}
		for (int i = 0; i < 257; i++)
		{
			int[] arg_54_0 = array3;
			int num5 = i + 1;
			int[] array4 = arg_54_0;
			array4[num5] += array3[i];
		}
		for (int i = num; i <= num2; i++)
		{
			int num4 = MSD.charAt(array[i], num3);
			int[] arg_7F_0 = array3;
			int num5 = num4 + 1;
			int[] array4 = arg_7F_0;
			int[] arg_8B_0 = array4;
			int arg_89_0 = num5;
			num5 = array4[num5];
			int num6 = arg_89_0;
			array4 = arg_8B_0;
			int arg_99_1 = num5;
			array4[num6] = num5 + 1;
			array2[arg_99_1] = array[i];
		}
		for (int i = num; i <= num2; i++)
		{
			array[i] = array2[i - num];
		}
		for (int i = 0; i < 256; i++)
		{
			MSD.sort(array, num + array3[i], num + array3[i + 1] - 1, num3 + 1, array2);
		}
	}
	[LineNumberTable(new byte[]
	{
		32,
		102,
		118,
		42,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void insertion(string[] array, int num, int num2, int num3)
	{
		for (int i = num; i <= num2; i++)
		{
			int num4 = i;
			while (num4 > num && MSD.less(array[num4], array[num4 - 1], num3))
			{
				MSD.exch(array, num4, num4 - 1);
				num4 += -1;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		180,
		127,
		0,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int charAt(string @this, int num)
	{
		if (!MSD.$assertionsDisabled && (num < 0 || num > java.lang.String.instancehelper_length(@this)))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (num == java.lang.String.instancehelper_length(@this))
		{
			return -1;
		}
		return (int)java.lang.String.instancehelper_charAt(@this, num);
	}
	[LineNumberTable(new byte[]
	{
		53,
		127,
		10,
		118,
		114,
		18,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(string @this, string this2, int num)
	{
		if (!MSD.$assertionsDisabled && !java.lang.String.instancehelper_equals(java.lang.String.instancehelper_substring(@this, 0, num), java.lang.String.instancehelper_substring(this2, 0, num)))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		for (int i = num; i < java.lang.Math.min(java.lang.String.instancehelper_length(@this), java.lang.String.instancehelper_length(this2)); i++)
		{
			if (java.lang.String.instancehelper_charAt(@this, i) < java.lang.String.instancehelper_charAt(this2, i))
			{
				return true;
			}
			if (java.lang.String.instancehelper_charAt(@this, i) > java.lang.String.instancehelper_charAt(this2, i))
			{
				return false;
			}
		}
		return java.lang.String.instancehelper_length(@this) < java.lang.String.instancehelper_length(this2);
	}
	[LineNumberTable(new byte[]
	{
		39,
		100,
		102,
		100
	})]
	private static void exch(string[] array, int num, int num2)
	{
		string text = array[num];
		array[num] = array[num2];
		array[num2] = text;
	}
	[LineNumberTable(new byte[]
	{
		159,
		173,
		99,
		103,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(string[] strarr)
	{
		int num = strarr.Length;
		string[] array = new string[num];
		MSD.sort(strarr, 0, num - 1, 0, array);
	}
	[LineNumberTable(25)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public MSD()
	{
	}
	[LineNumberTable(new byte[]
	{
		63,
		102,
		99,
		102,
		102,
		40,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		int num = array.Length;
		MSD.sort(array);
		for (int i = 0; i < num; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(25)]
	static MSD()
	{
		MSD.$assertionsDisabled = !ClassLiteral<MSD>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Multiway : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		159,
		186,
		99,
		103,
		102,
		106,
		15,
		230,
		69,
		104,
		127,
		10,
		103,
		106,
		111,
		98,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void merge(In[] array)
	{
		int num = array.Length;
		IndexMinPQ indexMinPQ = new IndexMinPQ(num);
		for (int i = 0; i < num; i++)
		{
			if (!array[i].IsEmpty)
			{
				indexMinPQ.insert(i, array[i].readString());
			}
		}
		while (!indexMinPQ.IsEmpty)
		{
			StdOut.print(new StringBuilder().append((string)indexMinPQ.minKey()).append(" ").toString());
			int i = indexMinPQ.delMin();
			if (!array[i].IsEmpty)
			{
				indexMinPQ.insert(i, array[i].readString());
			}
		}
		StdOut.println();
	}
	[LineNumberTable(40)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Multiway()
	{
	}
	[LineNumberTable(new byte[]
	{
		18,
		99,
		103,
		102,
		48,
		134,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = strarr.Length;
		In[] array = new In[num];
		for (int i = 0; i < num; i++)
		{
			In[] arg_1F_0 = array;
			int arg_1F_1 = i;
			In.__<clinit>();
			arg_1F_0[arg_1F_1] = new In(strarr[i]);
		}
		Multiway.merge(array);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class NFA : java.lang.Object
{
	private Digraph G;
	private string regexp;
	private int M;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		179,
		104,
		103,
		108,
		102,
		115,
		110,
		98,
		118,
		113,
		110,
		178,
		108,
		113,
		112,
		144,
		108,
		101,
		210,
		120,
		111,
		143,
		127,
		2,
		239,
		40,
		233,
		90
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public NFA(string str)
	{
		this.regexp = str;
		this.M = java.lang.String.instancehelper_length(str);
		global::Stack stack = new global::Stack();
		this.G = new Digraph(this.M + 1);
		for (int i = 0; i < this.M; i++)
		{
			int num = i;
			if (java.lang.String.instancehelper_charAt(str, i) == '(' || java.lang.String.instancehelper_charAt(str, i) == '|')
			{
				stack.push(Integer.valueOf(i));
			}
			else if (java.lang.String.instancehelper_charAt(str, i) == ')')
			{
				int num2 = ((Integer)stack.pop()).intValue();
				if (java.lang.String.instancehelper_charAt(str, num2) == '|')
				{
					num = ((Integer)stack.pop()).intValue();
					this.G.addEdge(num, num2 + 1);
					this.G.addEdge(num2, i);
				}
				else if (java.lang.String.instancehelper_charAt(str, num2) == '(')
				{
					num = num2;
				}
				else if (!NFA.$assertionsDisabled)
				{
					Throwable.__<suppressFillInStackTrace>();
					throw new AssertionError();
				}
			}
			if (i < this.M - 1 && java.lang.String.instancehelper_charAt(str, i + 1) == '*')
			{
				this.G.addEdge(num, i + 1);
				this.G.addEdge(i + 1, num);
			}
			if (java.lang.String.instancehelper_charAt(str, i) == '(' || java.lang.String.instancehelper_charAt(str, i) == '*' || java.lang.String.instancehelper_charAt(str, i) == ')')
			{
				this.G.addEdge(i, i + 1);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		22,
		109,
		102,
		112,
		53,
		198,
		110,
		102,
		127,
		5,
		108,
		127,
		8,
		148,
		109,
		102,
		114,
		55,
		200,
		234,
		51,
		233,
		81,
		127,
		5,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool recognizes(string str)
	{
		DirectedDFS directedDFS = new DirectedDFS(this.G, 0);
		Bag bag = new Bag();
		for (int i = 0; i < this.G.V(); i++)
		{
			if (directedDFS.marked(i))
			{
				bag.add(Integer.valueOf(i));
			}
		}
		for (int i = 0; i < java.lang.String.instancehelper_length(str); i++)
		{
			Bag bag2 = new Bag();
			Iterator iterator = bag.iterator();
			while (iterator.MoveNext())
			{
				int num = ((Integer)iterator.Current).intValue();
				if (num != this.M)
				{
					if (java.lang.String.instancehelper_charAt(this.regexp, num) == java.lang.String.instancehelper_charAt(str, i) || java.lang.String.instancehelper_charAt(this.regexp, num) == '.')
					{
						bag2.add(Integer.valueOf(num + 1));
					}
				}
			}
			directedDFS = new DirectedDFS(this.G, bag2);
			bag = new Bag();
			for (int j = 0; j < this.G.V(); j++)
			{
				if (directedDFS.marked(j))
				{
					bag.add(Integer.valueOf(j));
				}
			}
			if (bag.size() == 0)
			{
				return false;
			}
		}
		Iterator iterator2 = bag.iterator();
		while (iterator2.hasNext())
		{
			int num2 = ((Integer)iterator2.next()).intValue();
			if (num2 == this.M)
			{
				return true;
			}
		}
		return false;
	}
	[LineNumberTable(new byte[]
	{
		52,
		127,
		8,
		100,
		107,
		144,
		103,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = new StringBuilder().append("(").append(strarr[0]).append(")").toString();
		string text = strarr[1];
		if (java.lang.String.instancehelper_indexOf(text, 124) >= 0)
		{
			string arg_40_0 = "| character in text is not supported";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_40_0);
		}
		NFA nFA = new NFA(str);
		StdOut.println(nFA.recognizes(text));
	}
	[LineNumberTable(30)]
	static NFA()
	{
		NFA.$assertionsDisabled = !ClassLiteral<NFA>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.net;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Out : java.lang.Object
{
	private static string charsetName;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Locale US_LOCALE;
	private PrintWriter @out;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		21,
		136,
		103,
		108,
		159,
		0,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Out(string str)
	{
		IOException ex;
		try
		{
			FileOutputStream fileOutputStream = new FileOutputStream(str);
			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, Out.charsetName);
			this.@out = new PrintWriter(outputStreamWriter, true);
		}
		catch (IOException arg_2D_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_2D_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_37;
		}
		return;
		IL_37:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		48,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(object obj)
	{
		this.@out.println(obj);
	}
	[LineNumberTable(83)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void close()
	{
		this.@out.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		185,
		136,
		108,
		159,
		0,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Out(OutputStream os)
	{
		IOException ex;
		try
		{
			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(os, Out.charsetName);
			this.@out = new PrintWriter(outputStreamWriter, true);
		}
		catch (IOException arg_26_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_26_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_30;
		}
		return;
		IL_30:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(54)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Out() : this(System.@out)
	{
	}
	[LineNumberTable(new byte[]
	{
		9,
		136,
		103,
		108,
		159,
		0,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Out(Socket s)
	{
		IOException ex;
		try
		{
			OutputStream outputStream = s.getOutputStream();
			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream, Out.charsetName);
			this.@out = new PrintWriter(outputStreamWriter, true);
		}
		catch (IOException arg_2D_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_2D_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_37;
		}
		return;
		IL_37:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		41,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println()
	{
		this.@out.println();
	}
	[LineNumberTable(new byte[]
	{
		159,
		116,
		98,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(bool b)
	{
		this.@out.println(b);
	}
	[LineNumberTable(new byte[]
	{
		159,
		114,
		66,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(char ch)
	{
		this.@out.println(ch);
	}
	[LineNumberTable(new byte[]
	{
		69,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(double d)
	{
		this.@out.println(d);
	}
	[LineNumberTable(new byte[]
	{
		76,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(float f)
	{
		this.@out.println(f);
	}
	[LineNumberTable(new byte[]
	{
		83,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(int i)
	{
		this.@out.println(i);
	}
	[LineNumberTable(new byte[]
	{
		90,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(long l)
	{
		this.@out.println(l);
	}
	[LineNumberTable(new byte[]
	{
		159,
		106,
		163,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void println(byte b)
	{
		int x = (int)((sbyte)b);
		this.@out.println(x);
	}
	[LineNumberTable(new byte[]
	{
		106,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print()
	{
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		113,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(object obj)
	{
		this.@out.print(obj);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		100,
		162,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(bool b)
	{
		this.@out.print(b);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		98,
		162,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(char ch)
	{
		this.@out.print(ch);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		73,
		109,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(double d)
	{
		this.@out.print(d);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		109,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(float f)
	{
		this.@out.print(f);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		89,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(int i)
	{
		this.@out.print(i);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		97,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(long l)
	{
		this.@out.print(l);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		88,
		163,
		108,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void print(byte b)
	{
		int i = (int)((sbyte)b);
		this.@out.print(i);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		114,
		115,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void printf(string str, params object[] objarr)
	{
		this.@out.printf(Out.US_LOCALE, str, objarr);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		123,
		111,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void printf(Locale l, string str, params object[] objarr)
	{
		this.@out.printf(l, str, objarr);
		this.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		135,
		102,
		107,
		166,
		107,
		107,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Out @out = new Out();
		@out.println("Test 1");
		@out.close();
		@out = new Out("test.txt");
		@out.println("Test 2");
		@out.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		170
	})]
	static Out()
	{
		Out.charsetName = "UTF-8";
		Out.US_LOCALE = new Locale("en", "US");
	}
}

using IKVM.Attributes;
using java.awt;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Particle : java.lang.Object
{
	private const double INFINITY = double.PositiveInfinity;
	private double rx;
	private double ry;
	private double vx;
	private double vy;
	private double radius;
	private double mass;
	private Color color;
	private int count;
	[LineNumberTable(new byte[]
	{
		12,
		98,
		110,
		111,
		111,
		111,
		112,
		107,
		115,
		108,
		106,
		112,
		148,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double timeToHit(Particle p)
	{
		if (this == p)
		{
			return double.PositiveInfinity;
		}
		double num = p.rx - this.rx;
		double num2 = p.ry - this.ry;
		double num3 = p.vx - this.vx;
		double num4 = p.vy - this.vy;
		double num5 = num * num3 + num2 * num4;
		if (num5 > (double)0f)
		{
			return double.PositiveInfinity;
		}
		double num6 = num3 * num3 + num4 * num4;
		double num7 = num * num + num2 * num2;
		double num8 = this.radius + p.radius;
		double num9 = num5 * num5 - num6 * (num7 - num8 * num8);
		if (num9 < (double)0f)
		{
			return double.PositiveInfinity;
		}
		return -(num5 + java.lang.Math.sqrt(num9)) / num6;
	}
	public virtual double timeToHitVerticalWall()
	{
		if (this.vx > (double)0f)
		{
			return ((double)1f - this.rx - this.radius) / this.vx;
		}
		if (this.vx < (double)0f)
		{
			return (this.radius - this.rx) / this.vx;
		}
		return double.PositiveInfinity;
	}
	public virtual double timeToHitHorizontalWall()
	{
		if (this.vy > (double)0f)
		{
			return ((double)1f - this.ry - this.radius) / this.vy;
		}
		if (this.vy < (double)0f)
		{
			return (this.radius - this.ry) / this.vy;
		}
		return double.PositiveInfinity;
	}
	[LineNumberTable(new byte[]
	{
		2,
		107,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void draw()
	{
		StdDraw.setPenColor(this.color);
		StdDraw.filledCircle(this.rx, this.ry, this.radius);
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		119,
		119
	})]
	public virtual void move(double d)
	{
		this.rx += this.vx * d;
		this.ry += this.vy * d;
	}
	[LineNumberTable(new byte[]
	{
		45,
		111,
		111,
		111,
		111,
		106,
		176,
		127,
		15,
		106,
		170,
		119,
		119,
		119,
		183,
		110,
		110
	})]
	public virtual void bounceOff(Particle p)
	{
		double num = p.rx - this.rx;
		double num2 = p.ry - this.ry;
		double num3 = p.vx - this.vx;
		double num4 = p.vy - this.vy;
		double num5 = num * num3 + num2 * num4;
		double num6 = this.radius + p.radius;
		double num7 = 2.0 * this.mass * p.mass * num5 / ((this.mass + p.mass) * num6);
		double num8 = num7 * num / num6;
		double num9 = num7 * num2 / num6;
		this.vx += num8 / this.mass;
		this.vy += num9 / this.mass;
		p.vx -= num8 / p.mass;
		p.vy -= num9 / p.mass;
		this.count++;
		p.count++;
	}
	[LineNumberTable(new byte[]
	{
		70,
		110,
		110
	})]
	public virtual void bounceOffVerticalWall()
	{
		this.vx = -this.vx;
		this.count++;
	}
	[LineNumberTable(new byte[]
	{
		76,
		110,
		110
	})]
	public virtual void bounceOffHorizontalWall()
	{
		this.vy = -this.vy;
		this.count++;
	}
	[LineNumberTable(new byte[]
	{
		159,
		176,
		104,
		108,
		108,
		127,
		1,
		127,
		1,
		112,
		112,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Particle()
	{
		this.rx = java.lang.Math.random();
		this.ry = java.lang.Math.random();
		this.vx = 0.01 * (java.lang.Math.random() - 0.5);
		this.vy = 0.01 * (java.lang.Math.random() - 0.5);
		this.radius = 0.01;
		this.mass = 0.5;
		this.color = Color.BLACK;
	}
	[LineNumberTable(new byte[]
	{
		159,
		165,
		104,
		105,
		106,
		105,
		105,
		106,
		106,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Particle(double d1, double d2, double d3, double d4, double d5, double d6, Color c)
	{
		this.vx = d3;
		this.vy = d4;
		this.rx = d1;
		this.ry = d2;
		this.radius = d5;
		this.mass = d6;
		this.color = c;
	}
	public virtual int count()
	{
		return this.count;
	}
	public virtual double kineticEnergy()
	{
		return 0.5 * this.mass * (this.vx * this.vx + this.vy * this.vy);
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.awt;
using java.awt.@event;
using java.awt.image;
using java.io;
using java.lang;
using java.net;
using java.util;
using javax.imageio;
using javax.swing;
using System;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.awt.event.ActionListener"
})]
public sealed class Picture : java.lang.Object, ActionListener, EventListener
{
	private BufferedImage image;
	private JFrame frame;
	private string filename;
	private bool isOriginUpperLeft;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int width;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int height;
	[LineNumberTable(new byte[]
	{
		20,
		232,
		58,
		231,
		71,
		116,
		116,
		103,
		103,
		142,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Picture(int i1, int i2)
	{
		this.isOriginUpperLeft = true;
		if (i1 < 0)
		{
			string arg_1D_0 = "width must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1D_0);
		}
		if (i2 < 0)
		{
			string arg_31_0 = "height must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_31_0);
		}
		this.width = i1;
		this.height = i2;
		this.image = new BufferedImage(i1, i2, 1);
		this.filename = new StringBuilder().append(i1).append("-by-").append(i2).toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		110,
		127,
		26,
		127,
		26,
		115,
		125,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void set(int i1, int i2, Color c)
	{
		if (i1 < 0 || i1 >= this.width())
		{
			string arg_33_0 = new StringBuilder().append("x must be between 0 and ").append(this.width() - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_33_0);
		}
		if (i2 < 0 || i2 >= this.height())
		{
			string arg_6C_0 = new StringBuilder().append("y must be between 0 and ").append(this.height() - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_6C_0);
		}
		if (c == null)
		{
			string arg_7F_0 = "can't set Color to null";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_7F_0);
		}
		if (this.isOriginUpperLeft)
		{
			this.image.setRGB(i1, i2, c.getRGB());
		}
		else
		{
			this.image.setRGB(i1, this.height - i2 - 1, c.getRGB());
		}
	}
	[LineNumberTable(new byte[]
	{
		118,
		107,
		139,
		102,
		107,
		104,
		107,
		103,
		151,
		104,
		204,
		145,
		108,
		113,
		108,
		107,
		204,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void show()
	{
		if (this.frame == null)
		{
			this.frame = new JFrame();
			JMenuBar jMenuBar = new JMenuBar();
			JMenu jMenu = new JMenu("File");
			jMenuBar.add(jMenu);
			JMenuItem jMenuItem = new JMenuItem(" Save...   ");
			jMenuItem.addActionListener(this);
			jMenuItem.setAccelerator(KeyStroke.getKeyStroke(83, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
			jMenu.add(jMenuItem);
			this.frame.setJMenuBar(jMenuBar);
			this.frame.setContentPane(this.getJLabel());
			this.frame.setDefaultCloseOperation(2);
			this.frame.setTitle(this.filename);
			this.frame.setResizable(false);
			this.frame.pack();
			this.frame.setVisible(true);
		}
		this.frame.repaint();
	}
	public virtual int width()
	{
		return this.width;
	}
	public virtual int height()
	{
		return this.height;
	}
	[LineNumberTable(new byte[]
	{
		160,
		100,
		127,
		26,
		127,
		26,
		127,
		3
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Color get(int i1, int i2)
	{
		if (i1 < 0 || i1 >= this.width())
		{
			string arg_33_0 = new StringBuilder().append("x must be between 0 and ").append(this.width() - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_33_0);
		}
		if (i2 < 0 || i2 >= this.height())
		{
			string arg_6C_0 = new StringBuilder().append("y must be between 0 and ").append(this.height() - 1).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_6C_0);
		}
		if (this.isOriginUpperLeft)
		{
			Color.__<clinit>();
			return new Color(this.image.getRGB(i1, i2));
		}
		Color.__<clinit>();
		return new Color(this.image.getRGB(i1, this.height - i2 - 1));
	}
	[LineNumberTable(new byte[]
	{
		93,
		106,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual JLabel getJLabel()
	{
		if (this.image == null)
		{
			return null;
		}
		ImageIcon.__<clinit>();
		ImageIcon imageIcon = new ImageIcon(this.image);
		return new JLabel(imageIcon);
	}
	[LineNumberTable(new byte[]
	{
		160,
		146,
		108,
		121,
		123,
		103,
		122,
		127,
		1,
		171,
		143
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void save(File f)
	{
		this.filename = f.getName();
		if (this.frame != null)
		{
			this.frame.setTitle(this.filename);
		}
		string text = java.lang.String.instancehelper_substring(this.filename, java.lang.String.instancehelper_lastIndexOf(this.filename, 46) + 1);
		text = java.lang.String.instancehelper_toLowerCase(text);
		if (!java.lang.String.instancehelper_equals(text, "jpg"))
		{
			if (!java.lang.String.instancehelper_equals(text, "png"))
			{
				System.@out.println("Error: filename must end in .jpg or .png");
				return;
			}
		}
		IOException ex;
		try
		{
			ImageIO.write(this.image, text, f);
		}
		catch (IOException arg_74_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_74_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_7E;
		}
		return;
		IL_7E:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
	}
	[LineNumberTable(new byte[]
	{
		160,
		139,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void save(string str)
	{
		this.save(new File(str));
	}
	[LineNumberTable(new byte[]
	{
		47,
		232,
		31,
		231,
		98,
		167,
		103,
		104,
		238,
		69,
		109,
		106,
		140,
		114,
		253,
		69,
		226,
		61,
		129,
		159,
		6
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Picture(string str)
	{
		this.isOriginUpperLeft = true;
		this.filename = str;
		try
		{
			File file = new File(str);
			if (file.isFile())
			{
				this.image = ImageIO.read(file);
			}
			else
			{
				URL uRL = java.lang.Object.instancehelper_getClass(this).getResource(str);
				if (uRL == null)
				{
					uRL = new URL(str);
				}
				this.image = ImageIO.read(uRL);
			}
			this.width = this.image.getWidth(null);
			this.height = this.image.getHeight(null);
		}
		catch (IOException arg_7E_0)
		{
			goto IL_82;
		}
		return;
		IL_82:
		string arg_A7_0 = new StringBuilder().append("Could not open file: ").append(str).toString();
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_A7_0);
	}
	[LineNumberTable(new byte[]
	{
		33,
		232,
		45,
		231,
		84,
		108,
		108,
		125,
		108,
		107,
		107,
		58,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Picture(Picture p)
	{
		this.isOriginUpperLeft = true;
		this.width = p.width();
		this.height = p.height();
		BufferedImage.__<clinit>();
		this.image = new BufferedImage(this.width, this.height, 1);
		this.filename = p.filename;
		for (int i = 0; i < this.width(); i++)
		{
			for (int j = 0; j < this.height(); j++)
			{
				this.image.setRGB(i, j, p.get(i, j).getRGB());
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		74,
		232,
		4,
		231,
		125,
		222,
		226,
		61,
		97,
		102,
		159,
		6,
		104,
		159,
		6,
		114,
		114,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Picture(File f)
	{
		this.isOriginUpperLeft = true;
		IOException ex;
		try
		{
			this.image = ImageIO.read(f);
		}
		catch (IOException arg_20_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_20_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_2A;
		}
		if (this.image == null)
		{
			string arg_82_0 = new StringBuilder().append("Invalid image file: ").append(f).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_82_0);
		}
		this.width = this.image.getWidth(null);
		this.height = this.image.getHeight(null);
		this.filename = f.getName();
		return;
		IL_2A:
		IOException this2 = ex;
		Throwable.instancehelper_printStackTrace(this2);
		string arg_55_0 = new StringBuilder().append("Could not open file: ").append(f).toString();
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_55_0);
	}
	public virtual void setOriginUpperLeft()
	{
		this.isOriginUpperLeft = true;
	}
	public virtual void setOriginLowerLeft()
	{
		this.isOriginUpperLeft = false;
	}
	[LineNumberTable(new byte[]
	{
		160,
		121,
		102,
		101,
		112,
		103,
		112,
		112,
		107,
		107,
		57,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override bool equals(object obj)
	{
		if (obj == this)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (obj.GetType() != this.GetType())
		{
			return false;
		}
		Picture picture = (Picture)obj;
		if (this.width() != picture.width())
		{
			return false;
		}
		if (this.height() != picture.height())
		{
			return false;
		}
		for (int i = 0; i < this.width(); i++)
		{
			for (int j = 0; j < this.height(); j++)
			{
				if (!this.get(i, j).equals(picture.get(i, j)))
				{
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		163,
		151,
		103,
		104,
		159,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void actionPerformed(ActionEvent ae)
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(this.frame, "Use a .png or .jpg extension", 1);
		fileDialog.setVisible(true);
		if (fileDialog.getFile() != null)
		{
			this.save(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		177,
		105,
		127,
		19,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Picture picture = new Picture(strarr[0]);
		System.@out.printf("%d-by-%d\n", new object[]
		{
			Integer.valueOf(picture.width()),
			Integer.valueOf(picture.height())
		});
		picture.show();
	}
}

using IKVM.Attributes;
using java.awt;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class PictureDump : java.lang.Object
{
	[LineNumberTable(18)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public PictureDump()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		163,
		105,
		105,
		104,
		98,
		107,
		104,
		111,
		103,
		100,
		103,
		117,
		239,
		58,
		43,
		235,
		75,
		102,
		127,
		2
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		Picture picture = new Picture(num, num2);
		int num3 = 0;
		for (int i = 0; i < num2; i++)
		{
			for (int j = 0; j < num; j++)
			{
				picture.set(j, i, Color.RED);
				if (!BinaryStdIn.IsEmpty)
				{
					num3++;
					int num4 = BinaryStdIn.readBoolean() ? 1 : 0;
					if (num4 != 0)
					{
						picture.set(j, i, Color.BLACK);
					}
					else
					{
						picture.set(j, i, Color.WHITE);
					}
				}
			}
		}
		picture.show();
		StdOut.println(new StringBuilder().append(num3).append(" bits").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Comparable"
}), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LPoint2D;>;")]
public class Point2D : java.lang.Object, Comparable
{
	[EnclosingMethod("Point2D", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("Point2D.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class Atan2Order : java.lang.Object, Comparator
	{
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal Point2D this$0 = point2D;
		[LineNumberTable(212), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Atan2Order(Point2D point2D, Point2D.1) : this(point2D)
		{
		}
		[LineNumberTable(212)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Atan2Order(Point2D point2D)
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			100,
			110,
			110,
			102,
			102
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D point2D, Point2D point2D2)
		{
			double num = Point2D.access$800(this.this$0, point2D);
			double num2 = Point2D.access$800(this.this$0, point2D2);
			if (num < num2)
			{
				return -1;
			}
			if (num > num2)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(212), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class DistanceToOrder : java.lang.Object, Comparator
	{
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal Point2D this$0 = point2D;
		[LineNumberTable(244), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal DistanceToOrder(Point2D point2D, Point2D.1) : this(point2D)
		{
		}
		[LineNumberTable(244)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private DistanceToOrder(Point2D point2D)
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			132,
			110,
			110,
			102,
			102
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D pd, Point2D pd2)
		{
			double num = this.this$0.distanceSquaredTo(pd);
			double num2 = this.this$0.distanceSquaredTo(pd2);
			if (num < num2)
			{
				return -1;
			}
			if (num > num2)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(244), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class PolarOrder : java.lang.Object, Comparator
	{
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal Point2D this$0 = point2D;
		[LineNumberTable(223), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal PolarOrder(Point2D point2D, Point2D.1) : this(point2D)
		{
		}
		[LineNumberTable(223)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private PolarOrder(Point2D point2D)
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			111,
			116,
			116,
			116,
			148,
			114,
			114,
			112,
			114,
			114,
			130
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D point2D, Point2D point2D2)
		{
			double num = Point2D.access$600(point2D) - Point2D.access$600(this.this$0);
			double num2 = Point2D.access$700(point2D) - Point2D.access$700(this.this$0);
			double num3 = Point2D.access$600(point2D2) - Point2D.access$600(this.this$0);
			double num4 = Point2D.access$700(point2D2) - Point2D.access$700(this.this$0);
			if (num2 >= (double)0f && num4 < (double)0f)
			{
				return -1;
			}
			if (num4 >= (double)0f && num2 < (double)0f)
			{
				return 1;
			}
			if (num2 != (double)0f || num4 != (double)0f)
			{
				return -Point2D.ccw(this.this$0, point2D, point2D2);
			}
			if (num >= (double)0f && num3 < (double)0f)
			{
				return -1;
			}
			if (num3 >= (double)0f && num < (double)0f)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(223), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class ROrder : java.lang.Object, Comparator
	{
		[LineNumberTable(202), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ROrder(Point2D.1) : this()
		{
		}
		[LineNumberTable(202)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ROrder()
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			90,
			127,
			26,
			106,
			106
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D point2D, Point2D point2D2)
		{
			double num = Point2D.access$600(point2D) * Point2D.access$600(point2D) + Point2D.access$700(point2D) * Point2D.access$700(point2D) - (Point2D.access$600(point2D2) * Point2D.access$600(point2D2) + Point2D.access$700(point2D2) * Point2D.access$700(point2D2));
			if (num < (double)0f)
			{
				return -1;
			}
			if (num > (double)0f)
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(202), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class XOrder : java.lang.Object, Comparator
	{
		[LineNumberTable(184), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal XOrder(Point2D.1) : this()
		{
		}
		[LineNumberTable(184)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private XOrder()
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			72,
			112,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D point2D, Point2D point2D2)
		{
			if (Point2D.access$600(point2D) < Point2D.access$600(point2D2))
			{
				return -1;
			}
			if (Point2D.access$600(point2D) > Point2D.access$600(point2D2))
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(184), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Comparator<LPoint2D;>;"), SourceFile("Point2D.java")]
	internal sealed class YOrder : java.lang.Object, Comparator
	{
		[LineNumberTable(193), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal YOrder(Point2D.1) : this()
		{
		}
		[LineNumberTable(193)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private YOrder()
		{
		}
		[LineNumberTable(new byte[]
		{
			160,
			81,
			112,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Point2D point2D, Point2D point2D2)
		{
			if (Point2D.access$700(point2D) < Point2D.access$700(point2D2))
			{
				return -1;
			}
			if (Point2D.access$700(point2D) > Point2D.access$700(point2D2))
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(193), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj, object obj2)
		{
			return this.compare((Point2D)obj, (Point2D)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal static Comparator __<>X_ORDER;
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal static Comparator __<>Y_ORDER;
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal static Comparator __<>R_ORDER;
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal Comparator __<>POLAR_ORDER;
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal Comparator __<>ATAN2_ORDER;
	[Signature("Ljava/util/Comparator<LPoint2D;>;")]
	internal Comparator __<>DISTANCE_TO_ORDER;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double x;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double y;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator X_ORDER
	{
		[HideFromJava]
		get
		{
			return Point2D.__<>X_ORDER;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator Y_ORDER
	{
		[HideFromJava]
		get
		{
			return Point2D.__<>Y_ORDER;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Comparator R_ORDER
	{
		[HideFromJava]
		get
		{
			return Point2D.__<>R_ORDER;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Final)]
	public Comparator POLAR_ORDER
	{
		[HideFromJava]
		get
		{
			return this.__<>POLAR_ORDER;
		}
		[HideFromJava]
		private set
		{
			this.__<>POLAR_ORDER = value;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Final)]
	public Comparator ATAN2_ORDER
	{
		[HideFromJava]
		get
		{
			return this.__<>ATAN2_ORDER;
		}
		[HideFromJava]
		private set
		{
			this.__<>ATAN2_ORDER = value;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Final)]
	public Comparator DISTANCE_TO_ORDER
	{
		[HideFromJava]
		get
		{
			return this.__<>DISTANCE_TO_ORDER;
		}
		[HideFromJava]
		private set
		{
			this.__<>DISTANCE_TO_ORDER = value;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		160,
		147,
		102,
		101,
		112,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override bool equals(object obj)
	{
		if (obj == this)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (obj.GetType() != this.GetType())
		{
			return false;
		}
		Point2D point2D = (Point2D)obj;
		return this.x == point2D.x && this.y == point2D.y;
	}
	public virtual double x()
	{
		return this.x;
	}
	public virtual double y()
	{
		return this.y;
	}
	[LineNumberTable(new byte[]
	{
		103,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double distanceTo(Point2D pd)
	{
		double num = this.x - pd.x;
		double num2 = this.y - pd.y;
		return java.lang.Math.sqrt(num * num + num2 * num2);
	}
	[LineNumberTable(new byte[]
	{
		19,
		232,
		41,
		237,
		69,
		237,
		69,
		237,
		78,
		114,
		112,
		114,
		112,
		112,
		112,
		105,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Point2D(double d1, double d2)
	{
		this.__<>POLAR_ORDER = new Point2D.PolarOrder(this, null);
		this.__<>ATAN2_ORDER = new Point2D.Atan2Order(this, null);
		this.__<>DISTANCE_TO_ORDER = new Point2D.DistanceToOrder(this, null);
		if (java.lang.Double.isInfinite(d1) || java.lang.Double.isInfinite(d2))
		{
			string arg_4B_0 = "Coordinates must be finite";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_4B_0);
		}
		if (java.lang.Double.isNaN(d1) || java.lang.Double.isNaN(d2))
		{
			string arg_6D_0 = "Coordinates cannot be NaN";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_6D_0);
		}
		if (d1 == (double)0f)
		{
			d1 = (double)0f;
		}
		if (d2 == (double)0f)
		{
			d2 = (double)0f;
		}
		this.x = d1;
		this.y = d2;
	}
	[LineNumberTable(144)]
	public static double area2(Point2D pd1, Point2D pd2, Point2D pd3)
	{
		return (pd2.x - pd1.x) * (pd3.y - pd1.y) - (pd2.y - pd1.y) * (pd3.x - pd1.x);
	}
	[LineNumberTable(new byte[]
	{
		80,
		127,
		26,
		106,
		106
	})]
	public static int ccw(Point2D pd1, Point2D pd2, Point2D pd3)
	{
		double num = (pd2.x - pd1.x) * (pd3.y - pd1.y) - (pd2.y - pd1.y) * (pd3.x - pd1.x);
		if (num < (double)0f)
		{
			return -1;
		}
		if (num > (double)0f)
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		176,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void draw()
	{
		StdDraw.point(this.x, this.y);
	}
	[LineNumberTable(new byte[]
	{
		67,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private double angleTo(Point2D point2D)
	{
		double num = point2D.x - this.x;
		double num2 = point2D.y - this.y;
		return java.lang.Math.atan2(num2, num);
	}
	[LineNumberTable(new byte[]
	{
		160,
		184,
		127,
		0
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void drawTo(Point2D pd)
	{
		StdDraw.line(this.x, this.y, pd.x, pd.y);
	}
	[LineNumberTable(new byte[]
	{
		126,
		112,
		112,
		112,
		112
	})]
	public virtual int compareTo(Point2D pd)
	{
		if (this.y < pd.y)
		{
			return -1;
		}
		if (this.y > pd.y)
		{
			return 1;
		}
		if (this.x < pd.x)
		{
			return -1;
		}
		if (this.x > pd.x)
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(101)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double r()
	{
		return java.lang.Math.sqrt(this.x * this.x + this.y * this.y);
	}
	[LineNumberTable(109)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double theta()
	{
		return java.lang.Math.atan2(this.y, this.x);
	}
	[LineNumberTable(new byte[]
	{
		114,
		111,
		111
	})]
	public virtual double distanceSquaredTo(Point2D pd)
	{
		double num = this.x - pd.x;
		double num2 = this.y - pd.y;
		return num * num + num2 * num2;
	}
	[LineNumberTable(273)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return new StringBuilder().append("(").append(this.x).append(", ").append(this.y).append(")").toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		167,
		113,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override int hashCode()
	{
		int num = java.lang.Double.valueOf(this.x).hashCode();
		int num2 = java.lang.Double.valueOf(this.y).hashCode();
		return 31 * num + num2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		192,
		105,
		105,
		137,
		111,
		115,
		115,
		110,
		103,
		104,
		105,
		105,
		111,
		233,
		60,
		232,
		72,
		107,
		106,
		110,
		199,
		101,
		106,
		109,
		104,
		107,
		7,
		200
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		int num3 = Integer.parseInt(strarr[2]);
		StdDraw.setCanvasSize(800, 800);
		StdDraw.setXscale((double)0f, 100.0);
		StdDraw.setYscale((double)0f, 100.0);
		StdDraw.setPenRadius(0.005);
		Point2D[] array = new Point2D[num3];
		for (int i = 0; i < num3; i++)
		{
			int j = StdRandom.uniform(100);
			int num4 = StdRandom.uniform(100);
			array[i] = new Point2D((double)j, (double)num4);
			array[i].draw();
		}
		Point2D point2D = new Point2D((double)num, (double)num2);
		StdDraw.setPenColor(StdDraw.__<>RED);
		StdDraw.setPenRadius(0.02);
		point2D.draw();
		StdDraw.setPenRadius();
		StdDraw.setPenColor(StdDraw.__<>BLUE);
		Arrays.sort(array, point2D.__<>POLAR_ORDER);
		for (int j = 0; j < num3; j++)
		{
			point2D.drawTo(array[j]);
			StdDraw.show(100);
		}
	}
	[LineNumberTable(26), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(object obj)
	{
		return this.compareTo((Point2D)obj);
	}
	[LineNumberTable(26), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$600(Point2D point2D)
	{
		return point2D.x;
	}
	[LineNumberTable(26), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$700(Point2D point2D)
	{
		return point2D.y;
	}
	[LineNumberTable(26), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	internal static double access$800(Point2D point2D, Point2D point2D2)
	{
		return point2D.angleTo(point2D2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		173,
		235,
		69,
		235,
		69
	})]
	static Point2D()
	{
		Point2D.__<>X_ORDER = new Point2D.XOrder(null);
		Point2D.__<>Y_ORDER = new Point2D.YOrder(null);
		Point2D.__<>R_ORDER = new Point2D.ROrder(null);
	}
	[HideFromJava]
	int IComparable.Object;)IcompareTo(object obj)
	{
		return this.compareTo(obj);
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class PolynomialRegression : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int N;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int degree;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private object beta;
	private double SSE;
	private double SST;
	[LineNumberTable(90)]
	public virtual double beta(int i)
	{
		this.beta;
		i;
		0;
		throw new NoClassDefFoundError("Jama.Matrix");
	}
	public virtual double R2()
	{
		if (this.SST == (double)0f)
		{
			return (double)1f;
		}
		return (double)1f - this.SSE / this.SST;
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		104,
		103,
		168,
		127,
		12,
		109,
		104,
		52,
		40,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public PolynomialRegression(double[] darr1, double[] darr2, int i)
	{
		this.degree = i;
		this.N = darr1.Length;
		int arg_2C_0 = this.N;
		int arg_27_0 = i + 1;
		int[] array = new int[2];
		int num = arg_27_0;
		array[1] = num;
		num = arg_2C_0;
		array[0] = num;
		double[][] array2 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int j = 0; j < this.N; j++)
		{
			for (int k = 0; k <= i; k++)
			{
				array2[j][k] = java.lang.Math.pow(darr1[j], (double)k);
			}
		}
		throw new NoClassDefFoundError("Jama.Matrix");
	}
	public virtual int degree()
	{
		return this.degree;
	}
	[LineNumberTable(new byte[]
	{
		69,
		102,
		107,
		46,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double predict(double d)
	{
		double num = (double)0f;
		for (int i = this.degree; i >= 0; i += -1)
		{
			num = this.beta(i) + d * num;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		81,
		102,
		167,
		123,
		166,
		105,
		127,
		30,
		127,
		28,
		255,
		31,
		61,
		233,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string str = "";
		int i = this.degree;
		while (i >= 0 && java.lang.Math.abs(this.beta(i)) < 1E-05)
		{
			i += -1;
		}
		for (i = i; i >= 0; i += -1)
		{
			if (i == 0)
			{
				str = new StringBuilder().append(str).append(java.lang.String.format("%.2f ", new object[]
				{
					java.lang.Double.valueOf(this.beta(i))
				})).toString();
			}
			else if (i == 1)
			{
				str = new StringBuilder().append(str).append(java.lang.String.format("%.2f N + ", new object[]
				{
					java.lang.Double.valueOf(this.beta(i))
				})).toString();
			}
			else
			{
				str = new StringBuilder().append(str).append(java.lang.String.format("%.2f N^%d + ", new object[]
				{
					java.lang.Double.valueOf(this.beta(i)),
					Integer.valueOf(i)
				})).toString();
			}
		}
		return new StringBuilder().append(str).append("  (R^2 = ").append(java.lang.String.format("%.3f", new object[]
		{
			java.lang.Double.valueOf(this.R2())
		})).append(")").toString();
	}
	[LineNumberTable(new byte[]
	{
		98,
		127,
		48,
		127,
		48,
		105,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double[] darr = new double[]
		{
			10.0,
			20.0,
			40.0,
			80.0,
			160.0,
			200.0
		};
		double[] darr2 = new double[]
		{
			100.0,
			350.0,
			1500.0,
			6700.0,
			20160.0,
			40000.0
		};
		PolynomialRegression obj = new PolynomialRegression(darr, darr2, 3);
		StdOut.println(obj);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class PrimMST : java.lang.Object
{
	private Edge[] edgeTo;
	private double[] distTo;
	private bool[] marked;
	[Signature("LIndexMinPQ<Ljava/lang/Double;>;")]
	private IndexMinPQ pq;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		41,
		109,
		121,
		109,
		108,
		104,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void prim(EdgeWeightedGraph edgeWeightedGraph, int num)
	{
		this.distTo[num] = (double)0f;
		this.pq.insert(num, java.lang.Double.valueOf(this.distTo[num]));
		while (!this.pq.IsEmpty)
		{
			int num2 = this.pq.delMin();
			this.scan(edgeWeightedGraph, num2);
		}
	}
	[LineNumberTable(new byte[]
	{
		96,
		102,
		127,
		1,
		140,
		106,
		112,
		127,
		14,
		194,
		109,
		127,
		5,
		116,
		109,
		111,
		130,
		107,
		162,
		127,
		5,
		116,
		109,
		111,
		130,
		162,
		191,
		8,
		109,
		127,
		5,
		116,
		113,
		162,
		127,
		8,
		116,
		109,
		112,
		127,
		16,
		162,
		202
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(EdgeWeightedGraph edgeWeightedGraph)
	{
		double num = (double)0f;
		Iterator iterator = this.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			num += edge.weight();
		}
		double num2 = 1E-12;
		if (java.lang.Math.abs(num - this.weight()) > num2)
		{
			System.err.printf("Weight of edges does not equal weight(): %f vs. %f\n", new object[]
			{
				java.lang.Double.valueOf(num),
				java.lang.Double.valueOf(this.weight())
			});
			return false;
		}
		UF uF = new UF(edgeWeightedGraph.V());
		Iterator iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (uF.connected(num3, i))
			{
				System.err.println("Not a forest");
				return false;
			}
			uF.union(num3, i);
		}
		iterator2 = edgeWeightedGraph.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			int num3 = edge2.either();
			int i = edge2.other(num3);
			if (!uF.connected(num3, i))
			{
				System.err.println("Not a spanning forest");
				return false;
			}
		}
		iterator2 = this.edges().iterator();
		while (iterator2.hasNext())
		{
			Edge edge2 = (Edge)iterator2.next();
			uF = new UF(edgeWeightedGraph.V());
			Iterator iterator3 = this.edges().iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (edge3 != edge2)
				{
					uF.union(num4, i2);
				}
			}
			iterator3 = edgeWeightedGraph.edges().iterator();
			while (iterator3.hasNext())
			{
				Edge edge3 = (Edge)iterator3.next();
				int num4 = edge3.either();
				int i2 = edge3.other(num4);
				if (!uF.connected(num4, i2) && edge3.weight() < edge2.weight())
				{
					System.err.println(new StringBuilder().append("Edge ").append(edge3).append(" violates cut optimality conditions").toString());
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		51,
		105,
		127,
		5,
		104,
		108,
		112,
		111,
		105,
		127,
		10,
		153,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void scan(EdgeWeightedGraph edgeWeightedGraph, int num)
	{
		this.marked[num] = true;
		Iterator iterator = edgeWeightedGraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			int num2 = edge.other(num);
			if (!this.marked[num2])
			{
				if (edge.weight() < this.distTo[num2])
				{
					this.distTo[num2] = edge.weight();
					this.edgeTo[num2] = edge;
					if (this.pq.contains(num2))
					{
						this.pq.decreaseKey(num2, java.lang.Double.valueOf(this.distTo[num2]));
					}
					else
					{
						this.pq.insert(num2, java.lang.Double.valueOf(this.distTo[num2]));
					}
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		70,
		102,
		108,
		105,
		99,
		231,
		61,
		230,
		70
	}), Signature("()Ljava/lang/Iterable<LEdge;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable edges()
	{
		global::Queue queue = new global::Queue();
		for (int i = 0; i < this.edgeTo.Length; i++)
		{
			Edge edge = this.edgeTo[i];
			if (edge != null)
			{
				queue.enqueue(edge);
			}
		}
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		85,
		102,
		127,
		1,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double weight()
	{
		double num = (double)0f;
		Iterator iterator = this.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge edge = (Edge)iterator.Current;
			num += edge.weight();
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		25,
		104,
		113,
		113,
		113,
		113,
		159,
		3,
		107,
		50,
		198,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public PrimMST(EdgeWeightedGraph ewg)
	{
		this.edgeTo = new Edge[ewg.V()];
		this.distTo = new double[ewg.V()];
		this.marked = new bool[ewg.V()];
		this.pq = new IndexMinPQ(ewg.V());
		for (int i = 0; i < ewg.V(); i++)
		{
			this.distTo[i] = double.PositiveInfinity;
		}
		for (int i = 0; i < ewg.V(); i++)
		{
			if (!this.marked[i])
			{
				this.prim(ewg, i);
			}
		}
		if (!PrimMST.$assertionsDisabled && !this.check(ewg))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		92,
		110,
		103,
		103,
		127,
		2,
		137,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		EdgeWeightedGraph ewg = new EdgeWeightedGraph(i);
		PrimMST primMST = new PrimMST(ewg);
		Iterator iterator = primMST.edges().iterator();
		while (iterator.MoveNext())
		{
			Edge obj = (Edge)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.printf("%.5f\n", new object[]
		{
			java.lang.Double.valueOf(primMST.weight())
		});
	}
	[LineNumberTable(65)]
	static PrimMST()
	{
		PrimMST.$assertionsDisabled = !ClassLiteral<PrimMST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class Queue : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("Queue", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("Queue.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("Queue.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LQueue$Node<TItem;>;")]
		private global::Queue.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal global::Queue this$0 = queue;
		[LineNumberTable(new byte[]
		{
			83,
			111,
			103
		}), Signature("(LQueue$Node<TItem;>;)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ListIterator(global::Queue queue, global::Queue.Node node)
		{
			this.current = node;
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(138)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			91,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = global::Queue.Node.access$000(this.current);
			this.current = global::Queue.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;"), SourceFile("Queue.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LQueue$Node<TItem;>;")]
		private global::Queue.Node next;
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$000(global::Queue.Node node)
		{
			return node.item;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(global::Queue.1) : this()
		{
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$002(global::Queue.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static global::Queue.Node access$202(global::Queue.Node node, global::Queue.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(42), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static global::Queue.Node access$200(global::Queue.Node node)
		{
			return node.next;
		}
		[LineNumberTable(42)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node()
		{
		}
	}
	private int N;
	[Signature("LQueue$Node<TItem;>;")]
	private global::Queue.Node first;
	[Signature("LQueue$Node<TItem;>;")]
	private global::Queue.Node last;
	[LineNumberTable(new byte[]
	{
		0,
		104,
		103,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Queue()
	{
		this.first = null;
		this.last = null;
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		37,
		103,
		108,
		109,
		109,
		118,
		109,
		110
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public void Enqueue(object obj)
	{
		global::Queue.Node node = this.last;
		this.last = new global::Queue.Node(null);
		global::Queue.Node.access$002(this.last, obj);
		global::Queue.Node.access$202(this.last, null);
		if (IsEmpty)
		{
			this.first = this.last;
		}
		else
		{
			global::Queue.Node.access$202(node, this.last);
		}
		this.N++;
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(new byte[]
	{
		52,
		120,
		108,
		113,
		110,
		111
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Dequeue()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = global::Queue.Node.access$000(this.first);
		this.first = global::Queue.Node.access$200(this.first);
		this.N--;
		if (IsEmpty)
		{
			this.last = null;
		}
		return result;
	}
	[LineNumberTable(126), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new global::Queue.ListIterator(this, this.first);
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		28,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return global::Queue.Node.access$000(this.first);
	}
	[LineNumberTable(new byte[]
	{
		65,
		102,
		118,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			object obj = iterator.Current;
			stringBuilder.append(new StringBuilder().append(obj).append(" ").toString());
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		103,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		global::Queue queue = new global::Queue();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				queue.enqueue(text);
			}
			else if (!queue.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)queue.dequeue()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(queue.size()).append(" left on queue)").toString());
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Quick : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		5,
		101,
		105,
		106,
		106,
		124
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, int num, int num2)
	{
		if (num2 <= num)
		{
			return;
		}
		int num3 = Quick.partition(array, num, num2);
		Quick.sort(array, num, num3 - 1);
		Quick.sort(array, num3 + 1, num2);
		if (!Quick.$assertionsDisabled && !Quick.isSorted(array, num, num2))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		15,
		98,
		100,
		196,
		111,
		166,
		111,
		166,
		134,
		202,
		168
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int partition(IComparable[] array, int num, int num2)
	{
		int num3 = num;
		int num4 = num2 + 1;
		IComparable comparable = array[num];
		while (true)
		{
			num3++;
			if (!Quick.less(array[num3], comparable) || num3 == num2)
			{
				IComparable arg_27_0;
				do
				{
					arg_27_0 = comparable;
					num4 += -1;
				}
				while (Quick.less(arg_27_0, array[num4]) && num4 != num);
				if (num3 >= num4)
				{
					break;
				}
				Quick.exch(array, num3, num4);
			}
		}
		Quick.exch(array, num, num4);
		return num4;
	}
	[LineNumberTable(new byte[]
	{
		90,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Quick.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(121)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		76,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		102,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		StdRandom.shuffle(carr);
		Quick.sort(carr, 0, carr.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		98,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(new byte[]
	{
		49,
		105,
		144,
		102,
		103,
		100,
		105,
		106,
		106,
		100,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static IComparable select(IComparable[] carr, int i)
	{
		if (i < 0 || i >= carr.Length)
		{
			string arg_13_0 = "Selected element out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_13_0);
		}
		StdRandom.shuffle(carr);
		int num = 0;
		int j = carr.Length - 1;
		while (j > num)
		{
			int num2 = Quick.partition(carr, num, j);
			if (num2 > i)
			{
				j = num2 - 1;
			}
			else
			{
				if (num2 >= i)
				{
					return carr[num2];
				}
				num = num2 + 1;
			}
		}
		return carr[num];
	}
	[LineNumberTable(42)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Quick()
	{
	}
	[LineNumberTable(136)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return Quick.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		110,
		102,
		102,
		166,
		166,
		101,
		103,
		109,
		6,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Quick.sort(array);
		Quick.show(array);
		StdRandom.shuffle(array);
		StdOut.println();
		for (int i = 0; i < array.Length; i++)
		{
			string obj = (string)Quick.select(array, i);
			StdOut.println(obj);
		}
	}
	[LineNumberTable(39)]
	static Quick()
	{
		Quick.$assertionsDisabled = !ClassLiteral<Quick>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Quick3string : java.lang.Object
{
	private const int CUTOFF = 15;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		103,
		107,
		161,
		100,
		106,
		100,
		103,
		107,
		119,
		115,
		100,
		165,
		107,
		111,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(string[] array, int num, int num2, int num3)
	{
		if (num2 <= num + 15)
		{
			Quick3string.insertion(array, num, num2, num3);
			return;
		}
		int num4 = num;
		int num5 = num2;
		int num6 = Quick3string.charAt(array[num], num3);
		int i = num + 1;
		while (i <= num5)
		{
			int num7 = Quick3string.charAt(array[i], num3);
			if (num7 < num6)
			{
				int arg_47_1 = num4;
				num4++;
				int arg_47_2 = i;
				i++;
				Quick3string.exch(array, arg_47_1, arg_47_2);
			}
			else if (num7 > num6)
			{
				int arg_5A_1 = i;
				int arg_5A_2 = num5;
				num5 += -1;
				Quick3string.exch(array, arg_5A_1, arg_5A_2);
			}
			else
			{
				i++;
			}
		}
		Quick3string.sort(array, num, num4 - 1, num3);
		if (num6 >= 0)
		{
			Quick3string.sort(array, num4, num5, num3 + 1);
		}
		Quick3string.sort(array, num5 + 1, num2, num3);
	}
	[LineNumberTable(new byte[]
	{
		52,
		103,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(string[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (java.lang.String.instancehelper_compareTo(array[i], array[i - 1]) < 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		21,
		102,
		118,
		42,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void insertion(string[] array, int num, int num2, int num3)
	{
		for (int i = num; i <= num2; i++)
		{
			int num4 = i;
			while (num4 > num && Quick3string.less(array[num4], array[num4 - 1], num3))
			{
				Quick3string.exch(array, num4, num4 - 1);
				num4 += -1;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		180,
		127,
		0,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int charAt(string @this, int num)
	{
		if (!Quick3string.$assertionsDisabled && (num < 0 || num > java.lang.String.instancehelper_length(@this)))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (num == java.lang.String.instancehelper_length(@this))
		{
			return -1;
		}
		return (int)java.lang.String.instancehelper_charAt(@this, num);
	}
	[LineNumberTable(new byte[]
	{
		28,
		100,
		102,
		100
	})]
	private static void exch(string[] array, int num, int num2)
	{
		string text = array[num];
		array[num] = array[num2];
		array[num2] = text;
	}
	[LineNumberTable(new byte[]
	{
		42,
		127,
		10,
		118,
		114,
		18,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(string @this, string this2, int num)
	{
		if (!Quick3string.$assertionsDisabled && !java.lang.String.instancehelper_equals(java.lang.String.instancehelper_substring(@this, 0, num), java.lang.String.instancehelper_substring(this2, 0, num)))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		for (int i = num; i < java.lang.Math.min(java.lang.String.instancehelper_length(@this), java.lang.String.instancehelper_length(this2)); i++)
		{
			if (java.lang.String.instancehelper_charAt(@this, i) < java.lang.String.instancehelper_charAt(this2, i))
			{
				return true;
			}
			if (java.lang.String.instancehelper_charAt(@this, i) > java.lang.String.instancehelper_charAt(this2, i))
			{
				return false;
			}
		}
		return java.lang.String.instancehelper_length(@this) < java.lang.String.instancehelper_length(this2);
	}
	[LineNumberTable(new byte[]
	{
		159,
		173,
		102,
		108,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(string[] strarr)
	{
		StdRandom.shuffle(strarr);
		Quick3string.sort(strarr, 0, strarr.Length - 1, 0);
		if (!Quick3string.$assertionsDisabled && !Quick3string.isSorted(strarr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(26)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Quick3string()
	{
	}
	[LineNumberTable(new byte[]
	{
		61,
		102,
		163,
		166,
		102,
		40,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		int num = array.Length;
		Quick3string.sort(array);
		for (int i = 0; i < num; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(26)]
	static Quick3string()
	{
		Quick3string.$assertionsDisabled = !ClassLiteral<Quick3string>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Quick3way : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		1,
		101,
		100,
		100,
		98,
		100,
		107,
		119,
		115,
		100,
		165,
		106,
		106,
		124
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, int num, int num2)
	{
		if (num2 <= num)
		{
			return;
		}
		int num3 = num;
		int num4 = num2;
		IComparable comparable = array[num];
		int i = num;
		while (i <= num4)
		{
			int num5 = Comparable.__Helper.compareTo(array[i], comparable);
			if (num5 < 0)
			{
				int arg_2E_1 = num3;
				num3++;
				int arg_2E_2 = i;
				i++;
				Quick3way.exch(array, arg_2E_1, arg_2E_2);
			}
			else if (num5 > 0)
			{
				int arg_41_1 = i;
				int arg_41_2 = num4;
				num4 += -1;
				Quick3way.exch(array, arg_41_1, arg_41_2);
			}
			else
			{
				i++;
			}
		}
		Quick3way.sort(array, num, num3 - 1);
		Quick3way.sort(array, num4 + 1, num2);
		if (!Quick3way.$assertionsDisabled && !Quick3way.isSorted(array, num, num2))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(96)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return Quick3way.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		36,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		50,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Quick3way.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(76)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		102,
		107,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		StdRandom.shuffle(carr);
		Quick3way.sort(carr, 0, carr.Length - 1);
		if (!Quick3way.$assertionsDisabled && !Quick3way.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		59,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(37)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Quick3way()
	{
	}
	[LineNumberTable(81)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool eq(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) == 0;
	}
	[LineNumberTable(new byte[]
	{
		69,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Quick3way.sort(array);
		Quick3way.show(array);
	}
	[LineNumberTable(34)]
	static Quick3way()
	{
		Quick3way.$assertionsDisabled = !ClassLiteral<Quick3way>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class QuickFindUF : java.lang.Object
{
	private int[] id;
	private int count;
	[LineNumberTable(70)]
	public virtual bool connected(int i1, int i2)
	{
		return this.id[i1] == this.id[i2];
	}
	[LineNumberTable(new byte[]
	{
		159,
		178,
		104,
		103,
		108,
		102,
		41,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public QuickFindUF(int i)
	{
		this.count = i;
		this.id = new int[i];
		for (int j = 0; j < i; j++)
		{
			this.id[j] = j;
		}
	}
	[LineNumberTable(new byte[]
	{
		31,
		107,
		105,
		108,
		59,
		134,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void union(int i1, int i2)
	{
		if (this.connected(i1, i2))
		{
			return;
		}
		int num = this.id[i1];
		for (int j = 0; j < this.id.Length; j++)
		{
			if (this.id[j] == num)
			{
				this.id[j] = this.id[i2];
			}
		}
		this.count--;
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(58)]
	public virtual int find(int i)
	{
		return this.id[i];
	}
	[LineNumberTable(new byte[]
	{
		45,
		102,
		103,
		103,
		102,
		102,
		108,
		104,
		127,
		6,
		98,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int i = StdIn.readInt();
		QuickFindUF quickFindUF = new QuickFindUF(i);
		while (!StdIn.IsEmpty)
		{
			int num = StdIn.readInt();
			int num2 = StdIn.readInt();
			if (!quickFindUF.connected(num, num2))
			{
				quickFindUF.union(num, num2);
				StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
			}
		}
		StdOut.println(new StringBuilder().append(quickFindUF.count()).append(" components").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class QuickUnionUF : java.lang.Object
{
	private int[] id;
	private int count;
	[LineNumberTable(new byte[]
	{
		10,
		107,
		108
	})]
	public virtual int find(int i)
	{
		while (i != this.id[i])
		{
			i = this.id[i];
		}
		return i;
	}
	[LineNumberTable(new byte[]
	{
		159,
		179,
		104,
		108,
		103,
		102,
		41,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public QuickUnionUF(int i)
	{
		this.id = new int[i];
		this.count = i;
		for (int j = 0; j < i; j++)
		{
			this.id[j] = j;
		}
	}
	[LineNumberTable(74)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool connected(int i1, int i2)
	{
		return this.find(i1) == this.find(i2);
	}
	[LineNumberTable(new byte[]
	{
		36,
		104,
		104,
		101,
		105,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void union(int i1, int i2)
	{
		int num = this.find(i1);
		int num2 = this.find(i2);
		if (num == num2)
		{
			return;
		}
		this.id[num] = num2;
		this.count--;
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(new byte[]
	{
		50,
		102,
		103,
		103,
		102,
		102,
		108,
		104,
		127,
		6,
		98,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int i = StdIn.readInt();
		QuickUnionUF quickUnionUF = new QuickUnionUF(i);
		while (!StdIn.IsEmpty)
		{
			int num = StdIn.readInt();
			int num2 = StdIn.readInt();
			if (!quickUnionUF.connected(num, num2))
			{
				quickUnionUF.union(num, num2);
				StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
			}
		}
		StdOut.println(new StringBuilder().append(quickUnionUF.count()).append(" components").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class QuickX : java.lang.Object
{
	private const int CUTOFF = 8;
	[LineNumberTable(new byte[]
	{
		159,
		183,
		166,
		100,
		106,
		193,
		101,
		110,
		104,
		197,
		100,
		102,
		112,
		111,
		113,
		109,
		201,
		102,
		103,
		133,
		112,
		102,
		112,
		166,
		112,
		108,
		134,
		104,
		120,
		223,
		4,
		100,
		125,
		158,
		104,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void sort(IComparable[] array, int num, int num2)
	{
		int num3 = num2 - num + 1;
		if (num3 <= 8)
		{
			QuickX.insertionSort(array, num, num2);
			return;
		}
		int num4;
		int num5;
		int num6;
		int num7;
		if (num3 <= 40)
		{
			num4 = QuickX.median3(array, num, num + num3 / 2, num2);
			QuickX.exch(array, num4, num);
		}
		else
		{
			num4 = num3 / 8;
			num5 = num + num3 / 2;
			num6 = QuickX.median3(array, num, num + num4, num + num4 + num4);
			num7 = QuickX.median3(array, num5 - num4, num5, num5 + num4);
			int num8 = QuickX.median3(array, num2 - num4 - num4, num2 - num4, num2);
			int i = QuickX.median3(array, num6, num7, num8);
			QuickX.exch(array, i, num);
		}
		num4 = num;
		num5 = num2 + 1;
		num6 = num;
		num7 = num2 + 1;
		IComparable comparable = array[num];
		while (true)
		{
			num4++;
			if (!QuickX.less(array[num4], comparable) || num4 == num2)
			{
				IComparable arg_B6_0;
				do
				{
					arg_B6_0 = comparable;
					num5 += -1;
				}
				while (QuickX.less(arg_B6_0, array[num5]) && num5 != num);
				if (num4 == num5 && QuickX.eq(array[num4], comparable))
				{
					num6++;
					QuickX.exch(array, num6, num4);
				}
				if (num4 >= num5)
				{
					break;
				}
				QuickX.exch(array, num4, num5);
				if (QuickX.eq(array[num4], comparable))
				{
					num6++;
					QuickX.exch(array, num6, num4);
				}
				if (QuickX.eq(array[num5], comparable))
				{
					num7 += -1;
					QuickX.exch(array, num7, num5);
				}
			}
		}
		num4 = num5 + 1;
		for (int i = num; i <= num6; i++)
		{
			int arg_13C_1 = i;
			int arg_13C_2 = num5;
			num5 += -1;
			QuickX.exch(array, arg_13C_1, arg_13C_2);
		}
		for (int i = num2; i >= num7; i += -1)
		{
			int arg_15A_1 = i;
			int arg_15A_2 = num4;
			num4++;
			QuickX.exch(array, arg_15A_1, arg_15A_2);
		}
		QuickX.sort(array, num, num5);
		QuickX.sort(array, num4, num2);
	}
	[LineNumberTable(new byte[]
	{
		48,
		102,
		117,
		42,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void insertionSort(IComparable[] array, int num, int num2)
	{
		for (int i = num; i <= num2; i++)
		{
			int num3 = i;
			while (num3 > num && QuickX.less(array[num3], array[num3 - 1]))
			{
				QuickX.exch(array, num3, num3 - 1);
				num3 += -1;
			}
		}
	}
	[LineNumberTable(106)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int median3(IComparable[] array, int num, int num2, int num3)
	{
		return (!QuickX.less(array[num], array[num2])) ? ((!QuickX.less(array[num3], array[num2])) ? ((!QuickX.less(array[num3], array[num])) ? num : num3) : num2) : ((!QuickX.less(array[num2], array[num3])) ? ((!QuickX.less(array[num], array[num3])) ? num : num3) : num2);
	}
	[LineNumberTable(new byte[]
	{
		77,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(117)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(122)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool eq(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) == 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		179,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		QuickX.sort(carr, 0, carr.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		94,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(30)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private QuickX()
	{
	}
	[LineNumberTable(new byte[]
	{
		87,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (QuickX.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		105,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		QuickX.sort(array);
		QuickX.show(array);
	}
}

using IKVM.Attributes;
using java.lang;
using java.math;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class RabinKarp : java.lang.Object
{
	private string pat;
	private long patHash;
	private int M;
	private long Q;
	private int R;
	private long RM;
	[LineNumberTable(new byte[]
	{
		61,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static long longRandomPrime()
	{
		BigInteger bigInteger = BigInteger.probablePrime(31, new java.util.Random());
		return bigInteger.longValue();
	}
	[LineNumberTable(new byte[]
	{
		13,
		99,
		102,
		63,
		6,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private long hash(string this2, int num)
	{
		long num2 = 0L;
		for (int i = 0; i < num; i++)
		{
			long expr_1A = (long)this.R * num2 + (long)java.lang.String.instancehelper_charAt(this2, i);
			long expr_21 = this.Q;
			num2 = ((expr_21 != -1L) ? (expr_1A % expr_21) : 0L);
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		21,
		107,
		119,
		2,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(string this2, int num)
	{
		for (int i = 0; i < this.M; i++)
		{
			if (java.lang.String.instancehelper_charAt(this.pat, i) != java.lang.String.instancehelper_charAt(this2, num + i))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		104,
		103,
		107,
		108,
		171,
		104,
		109,
		63,
		7,
		134,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public RabinKarp(string str)
	{
		this.pat = str;
		this.R = 256;
		this.M = java.lang.String.instancehelper_length(str);
		this.Q = RabinKarp.longRandomPrime();
		this.RM = 1L;
		for (int i = 1; i <= this.M - 1; i++)
		{
			long expr_54 = (long)this.R * this.RM;
			long expr_5B = this.Q;
			this.RM = ((expr_5B != -1L) ? (expr_54 % expr_5B) : 0L);
		}
		this.patHash = this.hash(str, this.M);
	}
	[LineNumberTable(new byte[]
	{
		34,
		103,
		107,
		174,
		115,
		162,
		142,
		127,
		37,
		191,
		6,
		107,
		115,
		226,
		56,
		233,
		76
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int search(string str)
	{
		int num = java.lang.String.instancehelper_length(str);
		if (num < this.M)
		{
			return num;
		}
		long num2 = this.hash(str, this.M);
		if (this.patHash == num2 && this.check(str, 0))
		{
			return 0;
		}
		for (int i = this.M; i < num; i++)
		{
			long arg_73_0 = num2 + this.Q;
			long expr_60 = this.RM * (long)java.lang.String.instancehelper_charAt(str, i - this.M);
			long expr_67 = this.Q;
			long expr_73 = arg_73_0 - ((expr_67 != -1L) ? (expr_60 % expr_67) : 0L);
			long expr_7A = this.Q;
			num2 = ((expr_7A != -1L) ? (expr_73 % expr_7A) : 0L);
			long expr_98 = num2 * (long)this.R + (long)java.lang.String.instancehelper_charAt(str, i);
			long expr_9F = this.Q;
			num2 = ((expr_9F != -1L) ? (expr_98 % expr_9F) : 0L);
			int num3 = i - this.M + 1;
			if (this.patHash == num2 && this.check(str, num3))
			{
				return num3;
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public RabinKarp(int i, char[] charr)
	{
		string arg_10_0 = "Operation not supported yet";
		Throwable.__<suppressFillInStackTrace>();
		throw new UnsupportedOperationException(arg_10_0);
	}
	private bool check(int num)
	{
		return true;
	}
	[LineNumberTable(new byte[]
	{
		67,
		100,
		100,
		103,
		135,
		103,
		168,
		191,
		0,
		106,
		104,
		42,
		136,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = strarr[0];
		string text2 = strarr[1];
		java.lang.String.instancehelper_toCharArray(text);
		java.lang.String.instancehelper_toCharArray(text2);
		RabinKarp rabinKarp = new RabinKarp(text);
		int num = rabinKarp.search(text2);
		StdOut.println(new StringBuilder().append("text:    ").append(text2).toString());
		StdOut.print("pattern: ");
		for (int i = 0; i < num; i++)
		{
			StdOut.print(" ");
		}
		StdOut.println(text);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class RandomSeq : java.lang.Object
{
	[LineNumberTable(29)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RandomSeq()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		169,
		133,
		102,
		103,
		6,
		235,
		70,
		101,
		106,
		171,
		104,
		107,
		26,
		200,
		162,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		if (strarr.Length == 1)
		{
			for (int i = 0; i < num; i++)
			{
				double d = StdRandom.uniform();
				StdOut.println(d);
			}
		}
		else
		{
			if (strarr.Length != 3)
			{
				string arg_87_0 = "Invalid number of arguments";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_87_0);
			}
			double d2 = java.lang.Double.parseDouble(strarr[1]);
			double d3 = java.lang.Double.parseDouble(strarr[2]);
			for (int j = 0; j < num; j++)
			{
				double d4 = StdRandom.uniform(d2, d3);
				StdOut.printf("%.2f\n", new object[]
				{
					java.lang.Double.valueOf(d4)
				});
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key::Ljava/lang/Comparable<TKey;>;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class RedBlackBST : java.lang.Object
{
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("RedBlackBST.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TKey;")]
		private IComparable key;
		[Signature("TValue;")]
		private object val;
		[Signature("LRedBlackBST<TKey;TValue;>.Node;")]
		private RedBlackBST.Node left;
		[Signature("LRedBlackBST<TKey;TValue;>.Node;")]
		private RedBlackBST.Node right;
		private bool color;
		private int N;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal RedBlackBST this$0 = redBlackBST;
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static bool access$000(RedBlackBST.Node node)
		{
			return node.color;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$100(RedBlackBST.Node node)
		{
			return node.N;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static IComparable access$200(RedBlackBST.Node node)
		{
			return node.key;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static RedBlackBST.Node access$300(RedBlackBST.Node node)
		{
			return node.left;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static RedBlackBST.Node access$400(RedBlackBST.Node node)
		{
			return node.right;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$500(RedBlackBST.Node node)
		{
			return node.val;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static bool access$002(RedBlackBST.Node node, bool result)
		{
			node.color = result;
			return result;
		}
		[LineNumberTable(new byte[]
		{
			159,
			131,
			67,
			111,
			103,
			103,
			103,
			104
		}), Signature("(TKey;TValue;ZI)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Node(RedBlackBST redBlackBST, IComparable comparable, object obj, bool flag, int n)
		{
			this.key = comparable;
			this.val = obj;
			this.color = flag;
			this.N = n;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static RedBlackBST.Node access$302(RedBlackBST.Node node, RedBlackBST.Node result)
		{
			node.left = result;
			return result;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static RedBlackBST.Node access$402(RedBlackBST.Node node, RedBlackBST.Node result)
		{
			node.right = result;
			return result;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$502(RedBlackBST.Node node, object result)
		{
			node.val = result;
			return result;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$102(RedBlackBST.Node node, int num)
		{
			node.N = num;
			return num;
		}
		[LineNumberTable(37), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static IComparable access$202(RedBlackBST.Node node, IComparable result)
		{
			node.key = result;
			return result;
		}
	}
	private const bool RED = true;
	private const bool BLACK = false;
	[Signature("LRedBlackBST<TKey;TValue;>.Node;")]
	private RedBlackBST.Node root;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		13,
		101
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int size(RedBlackBST.Node node)
	{
		if (node == null)
		{
			return 0;
		}
		return RedBlackBST.Node.access$100(node);
	}
	[LineNumberTable(new byte[]
	{
		39,
		99,
		109,
		110,
		110,
		105,
		98
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private object get(RedBlackBST.Node node, IComparable o)
	{
		while (node != null)
		{
			int num = Comparable.__Helper.compareTo(o, RedBlackBST.Node.access$200(node));
			if (num < 0)
			{
				node = RedBlackBST.Node.access$300(node);
			}
			else
			{
				if (num <= 0)
				{
					return RedBlackBST.Node.access$500(node);
				}
				node = RedBlackBST.Node.access$400(node);
			}
		}
		return null;
	}
	[LineNumberTable(85), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(IComparable c)
	{
		return this.get(this.root, c);
	}
	[LineNumberTable(new byte[]
	{
		72,
		144,
		109,
		123,
		123,
		168,
		127,
		6,
		127,
		11,
		127,
		4,
		159,
		3
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;TValue;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node put(RedBlackBST.Node node, IComparable comparable, object obj)
	{
		if (node == null)
		{
			return new RedBlackBST.Node(this, comparable, obj, true, 1);
		}
		int num = Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node));
		if (num < 0)
		{
			RedBlackBST.Node.access$302(node, this.put(RedBlackBST.Node.access$300(node), comparable, obj));
		}
		else if (num > 0)
		{
			RedBlackBST.Node.access$402(node, this.put(RedBlackBST.Node.access$400(node), comparable, obj));
		}
		else
		{
			RedBlackBST.Node.access$502(node, obj);
		}
		if (this.isRed(RedBlackBST.Node.access$400(node)) && !this.isRed(RedBlackBST.Node.access$300(node)))
		{
			node = this.rotateLeft(node);
		}
		if (this.isRed(RedBlackBST.Node.access$300(node)) && this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node))))
		{
			node = this.rotateRight(node);
		}
		if (this.isRed(RedBlackBST.Node.access$300(node)) && this.isRed(RedBlackBST.Node.access$400(node)))
		{
			this.flipColors(node);
		}
		RedBlackBST.Node.access$102(node, this.size(RedBlackBST.Node.access$300(node)) + this.size(RedBlackBST.Node.access$400(node)) + 1);
		return node;
	}
	[LineNumberTable(new byte[]
	{
		161,
		101,
		114,
		114,
		114,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check()
	{
		if (!this.isBST())
		{
			StdOut.println("Not in symmetric order");
		}
		if (!this.isSizeConsistent())
		{
			StdOut.println("Subtree counts not consistent");
		}
		if (!this.isRankConsistent())
		{
			StdOut.println("Ranks not consistent");
		}
		if (!this.Is23())
		{
			StdOut.println("Not a 2-3 tree");
		}
		if (!this.IsBalanced)
		{
			StdOut.println("Not balanced");
		}
		return this.isBST() && this.isSizeConsistent() && this.isRankConsistent() && this.Is23() && this.IsBalanced;
	}
	[LineNumberTable(new byte[]
	{
		7,
		101
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isRed(RedBlackBST.Node node)
	{
		return node != null && RedBlackBST.Node.access$000(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		147,
		127,
		4,
		103,
		109,
		104,
		114,
		109,
		109,
		127,
		3
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node rotateLeft(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && (node == null || !this.isRed(RedBlackBST.Node.access$400(node))))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		RedBlackBST.Node node2 = RedBlackBST.Node.access$400(node);
		RedBlackBST.Node.access$402(node, RedBlackBST.Node.access$300(node2));
		RedBlackBST.Node.access$302(node2, node);
		RedBlackBST.Node.access$002(node2, RedBlackBST.Node.access$000(RedBlackBST.Node.access$300(node2)));
		RedBlackBST.Node.access$002(RedBlackBST.Node.access$300(node2), true);
		RedBlackBST.Node.access$102(node2, RedBlackBST.Node.access$100(node));
		RedBlackBST.Node.access$102(node, this.size(RedBlackBST.Node.access$300(node)) + this.size(RedBlackBST.Node.access$400(node)) + 1);
		return node2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		134,
		127,
		4,
		103,
		109,
		104,
		114,
		109,
		109,
		127,
		3
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node rotateRight(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && (node == null || !this.isRed(RedBlackBST.Node.access$300(node))))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		RedBlackBST.Node node2 = RedBlackBST.Node.access$300(node);
		RedBlackBST.Node.access$302(node, RedBlackBST.Node.access$400(node2));
		RedBlackBST.Node.access$402(node2, node);
		RedBlackBST.Node.access$002(node2, RedBlackBST.Node.access$000(RedBlackBST.Node.access$400(node2)));
		RedBlackBST.Node.access$002(RedBlackBST.Node.access$400(node2), true);
		RedBlackBST.Node.access$102(node2, RedBlackBST.Node.access$100(node));
		RedBlackBST.Node.access$102(node, this.size(RedBlackBST.Node.access$300(node)) + this.size(RedBlackBST.Node.access$400(node)) + 1);
		return node2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		161,
		127,
		6,
		159,
		61,
		115,
		125,
		125
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void flipColors(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && (node == null || RedBlackBST.Node.access$300(node) == null || RedBlackBST.Node.access$400(node) == null))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!RedBlackBST.$assertionsDisabled && (this.isRed(node) || !this.isRed(RedBlackBST.Node.access$300(node)) || !this.isRed(RedBlackBST.Node.access$400(node))) && (!this.isRed(node) || this.isRed(RedBlackBST.Node.access$300(node)) || this.isRed(RedBlackBST.Node.access$400(node))))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		RedBlackBST.Node.access$002(node, !RedBlackBST.Node.access$000(node));
		RedBlackBST.Node.access$002(RedBlackBST.Node.access$300(node), !RedBlackBST.Node.access$000(RedBlackBST.Node.access$300(node)));
		RedBlackBST.Node.access$002(RedBlackBST.Node.access$400(node), !RedBlackBST.Node.access$000(RedBlackBST.Node.access$400(node)));
	}
	public bool IsEmpty
	{
		return this.root == null;
	}
	[LineNumberTable(new byte[]
	{
		107,
		104,
		130,
		127,
		2,
		137,
		115
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node deleteMin(RedBlackBST.Node node)
	{
		if (RedBlackBST.Node.access$300(node) == null)
		{
			return null;
		}
		if (!this.isRed(RedBlackBST.Node.access$300(node)) && !this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node))))
		{
			node = this.moveRedLeft(node);
		}
		RedBlackBST.Node.access$302(node, this.deleteMin(RedBlackBST.Node.access$300(node)));
		return this.balance(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		172,
		117,
		159,
		29,
		103,
		115,
		115,
		137
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node moveRedLeft(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!RedBlackBST.$assertionsDisabled && (!this.isRed(node) || this.isRed(RedBlackBST.Node.access$300(node)) || this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node)))))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		this.flipColors(node);
		if (this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$400(node))))
		{
			RedBlackBST.Node.access$402(node, this.rotateRight(RedBlackBST.Node.access$400(node)));
			node = this.rotateLeft(node);
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		197,
		149,
		119,
		127,
		11,
		159,
		4,
		127,
		3
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node balance(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (this.isRed(RedBlackBST.Node.access$400(node)))
		{
			node = this.rotateLeft(node);
		}
		if (this.isRed(RedBlackBST.Node.access$300(node)) && this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node))))
		{
			node = this.rotateRight(node);
		}
		if (this.isRed(RedBlackBST.Node.access$300(node)) && this.isRed(RedBlackBST.Node.access$400(node)))
		{
			this.flipColors(node);
		}
		RedBlackBST.Node.access$102(node, this.size(RedBlackBST.Node.access$300(node)) + this.size(RedBlackBST.Node.access$400(node)) + 1);
		return node;
	}
	[LineNumberTable(new byte[]
	{
		160,
		69,
		110,
		137,
		104,
		130,
		127,
		2,
		137,
		147
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node deleteMax(RedBlackBST.Node node)
	{
		if (this.isRed(RedBlackBST.Node.access$300(node)))
		{
			node = this.rotateRight(node);
		}
		if (RedBlackBST.Node.access$400(node) == null)
		{
			return null;
		}
		if (!this.isRed(RedBlackBST.Node.access$400(node)) && !this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$400(node))))
		{
			node = this.moveRedRight(node);
		}
		RedBlackBST.Node.access$402(node, this.deleteMax(RedBlackBST.Node.access$400(node)));
		return this.balance(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		186,
		117,
		127,
		29,
		103,
		115,
		137
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node moveRedRight(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!RedBlackBST.$assertionsDisabled && (!this.isRed(node) || this.isRed(RedBlackBST.Node.access$400(node)) || this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$400(node)))))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		this.flipColors(node);
		if (this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node))))
		{
			node = this.rotateRight(node);
		}
		return node;
	}
	[LineNumberTable(100), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(IComparable c)
	{
		return this.get(c) != null;
	}
	[LineNumberTable(new byte[]
	{
		160,
		101,
		156,
		111,
		127,
		2,
		105,
		185,
		110,
		105,
		118,
		98,
		127,
		2,
		105,
		110,
		109,
		109,
		173,
		115,
		98,
		148
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node delete(RedBlackBST.Node node, IComparable comparable)
	{
		if (!RedBlackBST.$assertionsDisabled && !this.contains(node, comparable))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node)) < 0)
		{
			if (!this.isRed(RedBlackBST.Node.access$300(node)) && !this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$300(node))))
			{
				node = this.moveRedLeft(node);
			}
			RedBlackBST.Node.access$302(node, this.delete(RedBlackBST.Node.access$300(node), comparable));
		}
		else
		{
			if (this.isRed(RedBlackBST.Node.access$300(node)))
			{
				node = this.rotateRight(node);
			}
			if (Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node)) == 0 && RedBlackBST.Node.access$400(node) == null)
			{
				return null;
			}
			if (!this.isRed(RedBlackBST.Node.access$400(node)) && !this.isRed(RedBlackBST.Node.access$300(RedBlackBST.Node.access$400(node))))
			{
				node = this.moveRedRight(node);
			}
			if (Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node)) == 0)
			{
				RedBlackBST.Node node2 = this.min(RedBlackBST.Node.access$400(node));
				RedBlackBST.Node.access$202(node, RedBlackBST.Node.access$200(node2));
				RedBlackBST.Node.access$502(node, RedBlackBST.Node.access$500(node2));
				RedBlackBST.Node.access$402(node, this.deleteMin(RedBlackBST.Node.access$400(node)));
			}
			else
			{
				RedBlackBST.Node.access$402(node, this.delete(RedBlackBST.Node.access$400(node), comparable));
			}
		}
		return this.balance(node);
	}
	[LineNumberTable(105), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool contains(RedBlackBST.Node node, IComparable comparable)
	{
		return this.get(node, comparable) != null;
	}
	[LineNumberTable(new byte[]
	{
		160,
		231,
		117,
		106
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node min(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (RedBlackBST.Node.access$300(node) == null)
		{
			return node;
		}
		return this.min(RedBlackBST.Node.access$300(node));
	}
	[LineNumberTable(new byte[]
	{
		160,
		215,
		101
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int height(RedBlackBST.Node node)
	{
		if (node == null)
		{
			return -1;
		}
		return 1 + java.lang.Math.max(this.height(RedBlackBST.Node.access$300(node)), this.height(RedBlackBST.Node.access$400(node)));
	}
	[LineNumberTable(new byte[]
	{
		160,
		244,
		117,
		106
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node max(RedBlackBST.Node node)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (RedBlackBST.Node.access$400(node) == null)
		{
			return node;
		}
		return this.max(RedBlackBST.Node.access$400(node));
	}
	[LineNumberTable(new byte[]
	{
		161,
		2,
		101,
		109,
		101,
		116,
		110,
		101
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node floor(RedBlackBST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node));
		if (num == 0)
		{
			return node;
		}
		if (num < 0)
		{
			return this.floor(RedBlackBST.Node.access$300(node), comparable);
		}
		RedBlackBST.Node node2 = this.floor(RedBlackBST.Node.access$400(node), comparable);
		if (node2 != null)
		{
			return node2;
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		161,
		20,
		101,
		109,
		101,
		116,
		110,
		101
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node ceiling(RedBlackBST.Node node, IComparable comparable)
	{
		if (node == null)
		{
			return null;
		}
		int num = Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node));
		if (num == 0)
		{
			return node;
		}
		if (num > 0)
		{
			return this.ceiling(RedBlackBST.Node.access$400(node), comparable);
		}
		RedBlackBST.Node node2 = this.ceiling(RedBlackBST.Node.access$300(node), comparable);
		if (node2 != null)
		{
			return node2;
		}
		return node;
	}
	[LineNumberTable(73)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public int Size
	{
		return this.size(this.root);
	}
	[LineNumberTable(new byte[]
	{
		161,
		39,
		117,
		127,
		1,
		109,
		116,
		120
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;I)LRedBlackBST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private RedBlackBST.Node select(RedBlackBST.Node node, int num)
	{
		if (!RedBlackBST.$assertionsDisabled && node == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		if (!RedBlackBST.$assertionsDisabled && (num < 0 || num >= this.size(node)))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		int num2 = this.size(RedBlackBST.Node.access$300(node));
		if (num2 > num)
		{
			return this.select(RedBlackBST.Node.access$300(node), num);
		}
		if (num2 < num)
		{
			return this.select(RedBlackBST.Node.access$400(node), num - num2 - 1);
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		161,
		54,
		101,
		109,
		116,
		127,
		2
	}), Signature("(TKey;LRedBlackBST<TKey;TValue;>.Node;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int rank(IComparable comparable, RedBlackBST.Node node)
	{
		if (node == null)
		{
			return 0;
		}
		int num = Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node));
		if (num < 0)
		{
			return this.rank(comparable, RedBlackBST.Node.access$300(node));
		}
		if (num > 0)
		{
			return 1 + this.size(RedBlackBST.Node.access$300(node)) + this.rank(comparable, RedBlackBST.Node.access$400(node));
		}
		return this.size(RedBlackBST.Node.access$300(node));
	}
	[LineNumberTable(new byte[]
	{
		160,
		225,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable min()
	{
		if (IsEmpty)
		{
			return null;
		}
		return RedBlackBST.Node.access$200(this.min(this.root));
	}
	[LineNumberTable(new byte[]
	{
		160,
		238,
		106
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable max()
	{
		if (IsEmpty)
		{
			return null;
		}
		return RedBlackBST.Node.access$200(this.max(this.root));
	}
	[LineNumberTable(new byte[]
	{
		161,
		72,
		134,
		111
	}), Signature("(TKey;TKey;)Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys(IComparable c1, IComparable c2)
	{
		global::Queue queue = new global::Queue();
		this.keys(this.root, queue, c1, c2);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		161,
		81,
		100,
		109,
		110,
		116,
		116,
		118
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;LQueue<TKey;>;TKey;TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void keys(RedBlackBST.Node node, global::Queue queue, IComparable comparable, IComparable comparable2)
	{
		if (node == null)
		{
			return;
		}
		int num = Comparable.__Helper.compareTo(comparable, RedBlackBST.Node.access$200(node));
		int num2 = Comparable.__Helper.compareTo(comparable2, RedBlackBST.Node.access$200(node));
		if (num < 0)
		{
			this.keys(RedBlackBST.Node.access$300(node), queue, comparable, comparable2);
		}
		if (num <= 0 && num2 >= 0)
		{
			queue.enqueue(RedBlackBST.Node.access$200(node));
		}
		if (num2 > 0)
		{
			this.keys(RedBlackBST.Node.access$400(node), queue, comparable, comparable2);
		}
	}
	[LineNumberTable(419), Signature("(TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int rank(IComparable c)
	{
		return this.rank(c, this.root);
	}
	[LineNumberTable(482)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isBST()
	{
		return this.isBST(this.root, null, null);
	}
	[LineNumberTable(496)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isSizeConsistent()
	{
		return this.isSizeConsistent(this.root);
	}
	[LineNumberTable(new byte[]
	{
		161,
		135,
		107,
		50,
		134,
		127,
		1,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isRankConsistent()
	{
		for (int i = 0; i < this.size(); i++)
		{
			if (i != this.rank(this.select(i)))
			{
				return false;
			}
		}
		Iterator iterator = this.keys().iterator();
		while (iterator.MoveNext())
		{
			IComparable comparable = (IComparable)iterator.Current;
			if (Comparable.__Helper.compareTo(comparable, this.select(this.rank(comparable))) != 0)
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(514)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool Is23()
	{
		return this.Is23(this.root);
	}
	[LineNumberTable(new byte[]
	{
		161,
		155,
		98,
		103,
		99,
		109,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool IsBalanced
	{
		int num = 0;
		for (RedBlackBST.Node node = this.root; node != null; node = RedBlackBST.Node.access$300(node))
		{
			if (!this.isRed(node))
			{
				num++;
			}
		}
		return this.isBalanced(this.root, num);
	}
	[LineNumberTable(new byte[]
	{
		161,
		119,
		101,
		116,
		116
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;TKey;TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isBST(RedBlackBST.Node node, IComparable comparable, IComparable comparable2)
	{
		return node == null || ((comparable == null || Comparable.__Helper.compareTo(RedBlackBST.Node.access$200(node), comparable) > 0) && (comparable2 == null || Comparable.__Helper.compareTo(RedBlackBST.Node.access$200(node), comparable2) < 0) && (this.isBST(RedBlackBST.Node.access$300(node), comparable, RedBlackBST.Node.access$200(node)) && this.isBST(RedBlackBST.Node.access$400(node), RedBlackBST.Node.access$200(node), comparable2)));
	}
	[LineNumberTable(new byte[]
	{
		161,
		128,
		101,
		127,
		6
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isSizeConsistent(RedBlackBST.Node node)
	{
		return node == null || (RedBlackBST.Node.access$100(node) == this.size(RedBlackBST.Node.access$300(node)) + this.size(RedBlackBST.Node.access$400(node)) + 1 && (this.isSizeConsistent(RedBlackBST.Node.access$300(node)) && this.isSizeConsistent(RedBlackBST.Node.access$400(node))));
	}
	[LineNumberTable(new byte[]
	{
		161,
		32,
		111,
		110
	}), Signature("(I)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable select(int i)
	{
		if (i < 0 || i >= this.size())
		{
			return null;
		}
		RedBlackBST.Node node = this.select(this.root, i);
		return RedBlackBST.Node.access$200(node);
	}
	[LineNumberTable(437), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		return this.keys(this.min(), this.max());
	}
	[LineNumberTable(new byte[]
	{
		161,
		146,
		101,
		112,
		127,
		1,
		98
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool Is23(RedBlackBST.Node node)
	{
		return node == null || (!this.isRed(RedBlackBST.Node.access$400(node)) && (node == this.root || !this.isRed(node) || !this.isRed(RedBlackBST.Node.access$300(node))) && (this.Is23(RedBlackBST.Node.access$300(node)) && this.Is23(RedBlackBST.Node.access$400(node))));
	}
	[LineNumberTable(new byte[]
	{
		161,
		166,
		107,
		110
	}), Signature("(LRedBlackBST<TKey;TValue;>.Node;I)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isBalanced(RedBlackBST.Node node, int num)
	{
		if (node == null)
		{
			return num == 0;
		}
		if (!this.isRed(node))
		{
			num += -1;
		}
		return this.isBalanced(RedBlackBST.Node.access$300(node), num) && this.isBalanced(RedBlackBST.Node.access$400(node), num);
	}
	[LineNumberTable(new byte[]
	{
		159,
		171,
		232,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public RedBlackBST()
	{
	}
	[LineNumberTable(new byte[]
	{
		65,
		116,
		109,
		122
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(IComparable c, object obj)
	{
		this.root = this.put(this.root, c, obj);
		RedBlackBST.Node.access$002(this.root, false);
		if (!RedBlackBST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		94,
		184,
		127,
		7,
		141,
		114,
		117,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMin()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "BST underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		if (!this.isRed(RedBlackBST.Node.access$300(this.root)) && !this.isRed(RedBlackBST.Node.access$400(this.root)))
		{
			RedBlackBST.Node.access$002(this.root, true);
		}
		this.root = this.deleteMin(this.root);
		if (!IsEmpty)
		{
			RedBlackBST.Node.access$002(this.root, false);
		}
		if (!RedBlackBST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		120,
		184,
		127,
		7,
		141,
		114,
		117,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void deleteMax()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "BST underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		if (!this.isRed(RedBlackBST.Node.access$300(this.root)) && !this.isRed(RedBlackBST.Node.access$400(this.root)))
		{
			RedBlackBST.Node.access$002(this.root, true);
		}
		this.root = this.deleteMax(this.root);
		if (!IsEmpty)
		{
			RedBlackBST.Node.access$002(this.root, false);
		}
		if (!RedBlackBST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		85,
		105,
		127,
		7,
		193,
		127,
		7,
		141,
		115,
		117,
		122
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(IComparable c)
	{
		if (!this.contains(c))
		{
			System.err.println(new StringBuilder().append("symbol table does not contain ").append(c).toString());
			return;
		}
		if (!this.isRed(RedBlackBST.Node.access$300(this.root)) && !this.isRed(RedBlackBST.Node.access$400(this.root)))
		{
			RedBlackBST.Node.access$002(this.root, true);
		}
		this.root = this.delete(this.root, c);
		if (!IsEmpty)
		{
			RedBlackBST.Node.access$002(this.root, false);
		}
		if (!RedBlackBST.$assertionsDisabled && !this.check())
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(327)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int height()
	{
		return this.height(this.root);
	}
	[LineNumberTable(new byte[]
	{
		160,
		251,
		110,
		101
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable floor(IComparable c)
	{
		RedBlackBST.Node node = this.floor(this.root, c);
		if (node == null)
		{
			return null;
		}
		return RedBlackBST.Node.access$200(node);
	}
	[LineNumberTable(new byte[]
	{
		161,
		13,
		110,
		101
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable ceiling(IComparable c)
	{
		RedBlackBST.Node node = this.ceiling(this.root, c);
		if (node == null)
		{
			return null;
		}
		return RedBlackBST.Node.access$200(node);
	}
	[LineNumberTable(new byte[]
	{
		161,
		91,
		108,
		123
	}), Signature("(TKey;TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int size(IComparable c1, IComparable c2)
	{
		if (Comparable.__Helper.compareTo(c1, c2) > 0)
		{
			return 0;
		}
		if (this.contains(c2))
		{
			return this.rank(c2) - this.rank(c1) + 1;
		}
		return this.rank(c2) - this.rank(c1);
	}
	[LineNumberTable(new byte[]
	{
		161,
		176,
		102,
		105,
		102,
		13,
		198,
		127,
		1,
		127,
		14,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		RedBlackBST redBlackBST = new RedBlackBST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			redBlackBST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = redBlackBST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(redBlackBST.get(text)).toString());
		}
		StdOut.println();
	}
	[LineNumberTable(29)]
	static RedBlackBST()
	{
		RedBlackBST.$assertionsDisabled = !ClassLiteral<RedBlackBST>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class ResizingArrayBag : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("ResizingArrayBag", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("ResizingArrayBag.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("ResizingArrayBag.java")]
	internal sealed class ArrayIterator : java.lang.Object, Iterator
	{
		private int i;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal ResizingArrayBag this$0 = resizingArrayBag;
		[LineNumberTable(84), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ArrayIterator(ResizingArrayBag resizingArrayBag, ResizingArrayBag.1) : this(resizingArrayBag)
		{
		}
		[LineNumberTable(new byte[]
		{
			34,
			111
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ArrayIterator(ResizingArrayBag resizingArrayBag)
		{
			this.i = 0;
		}
		[LineNumberTable(86)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return this.i < ResizingArrayBag.access$100(this.this$0);
		}
		[LineNumberTable(87)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			40,
			115
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object[] arg_31_0 = ResizingArrayBag.access$200(this.this$0);
			int num = this.i;
			int arg_31_1 = num;
			this.i = num + 1;
			return arg_31_0[arg_31_1];
		}
	}
	[Signature("[TItem;")]
	private object[] a;
	private int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		8,
		123,
		108,
		107,
		43,
		134,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!ResizingArrayBag.$assertionsDisabled && num < this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		object[] array = (object[])new object[num];
		for (int i = 0; i < this.N; i++)
		{
			array[i] = this.a[i];
		}
		this.a = array;
	}
	[LineNumberTable(new byte[]
	{
		159,
		178,
		232,
		59,
		231,
		70,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ResizingArrayBag()
	{
		this.N = 0;
		this.a = (object[])new object[2];
	}
	[LineNumberTable(new byte[]
	{
		20,
		126,
		123
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void add(object obj)
	{
		if (this.N == this.a.Length)
		{
			this.resize(2 * this.a.Length);
		}
		object[] arg_38_0 = this.a;
		int n = this.N;
		int arg_38_1 = n;
		this.N = n + 1;
		arg_38_0[arg_38_1] = obj;
	}
	[LineNumberTable(80), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new ResizingArrayBag.ArrayIterator(this, null);
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		49,
		102,
		107,
		107,
		107,
		107,
		139,
		123,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		ResizingArrayBag resizingArrayBag = new ResizingArrayBag();
		resizingArrayBag.add("Hello");
		resizingArrayBag.add("World");
		resizingArrayBag.add("how");
		resizingArrayBag.add("are");
		resizingArrayBag.add("you");
		Iterator iterator = resizingArrayBag.iterator();
		while (iterator.MoveNext())
		{
			string obj = (string)iterator.Current;
			StdOut.println(obj);
		}
	}
	[LineNumberTable(29), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(ResizingArrayBag resizingArrayBag)
	{
		return resizingArrayBag.N;
	}
	[LineNumberTable(29), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object[] access$200(ResizingArrayBag resizingArrayBag)
	{
		return resizingArrayBag.a;
	}
	[LineNumberTable(29)]
	static ResizingArrayBag()
	{
		ResizingArrayBag.$assertionsDisabled = !ClassLiteral<ResizingArrayBag>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class ResizingArrayQueue : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("ResizingArrayQueue", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("ResizingArrayQueue.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("ResizingArrayQueue.java")]
	internal sealed class ArrayIterator : java.lang.Object, Iterator
	{
		private int i;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal ResizingArrayQueue this$0 = resizingArrayQueue;
		[LineNumberTable(128), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ArrayIterator(ResizingArrayQueue resizingArrayQueue, ResizingArrayQueue.1) : this(resizingArrayQueue)
		{
		}
		[LineNumberTable(new byte[]
		{
			78,
			111
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ArrayIterator(ResizingArrayQueue resizingArrayQueue)
		{
			this.i = 0;
		}
		[LineNumberTable(130)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual bool hasNext()
		{
			return this.i < ResizingArrayQueue.access$100(this.this$0);
		}
		[LineNumberTable(131)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			84,
			115,
			127,
			22,
			110
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object[] arg_46_0 = ResizingArrayQueue.access$200(this.this$0);
			int expr_2F = this.i + ResizingArrayQueue.access$300(this.this$0);
			int expr_3C = ResizingArrayQueue.access$200(this.this$0).Length;
			object result = arg_46_0[(expr_3C != -1) ? (expr_2F % expr_3C) : 0];
			this.i++;
			return result;
		}
	}
	[Signature("[TItem;")]
	private object[] q;
	private int N;
	private int first;
	private int last;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		19,
		123,
		108,
		107,
		63,
		4,
		166,
		103,
		103,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!ResizingArrayQueue.$assertionsDisabled && num < this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		object[] array = (object[])new object[num];
		for (int i = 0; i < this.N; i++)
		{
			object[] arg_54_0 = array;
			int arg_54_1 = i;
			object[] arg_53_0 = this.q;
			int expr_41 = this.first + i;
			int expr_49 = this.q.Length;
			arg_54_0[arg_54_1] = arg_53_0[(expr_49 != -1) ? (expr_41 % expr_49) : 0];
		}
		this.q = array;
		this.first = 0;
		this.last = this.N;
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		232,
		56,
		103,
		103,
		231,
		72,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ResizingArrayQueue()
	{
		this.N = 0;
		this.first = 0;
		this.last = 0;
		this.q = (object[])new object[2];
	}
	[LineNumberTable(new byte[]
	{
		35,
		126,
		123,
		118,
		110
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public void Enqueue(object obj)
	{
		if (this.N == this.q.Length)
		{
			this.resize(2 * this.q.Length);
		}
		object[] arg_38_0 = this.q;
		int num = this.last;
		int arg_38_1 = num;
		this.last = num + 1;
		arg_38_0[arg_38_1] = obj;
		if (this.last == this.q.Length)
		{
			this.last = 0;
		}
		this.N++;
	}
	[LineNumberTable(new byte[]
	{
		47,
		120,
		110,
		110,
		110,
		110,
		150,
		127,
		10
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Dequeue()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = this.q[this.first];
		this.q[this.first] = null;
		this.N--;
		this.first++;
		if (this.first == this.q.Length)
		{
			this.first = 0;
		}
		if (this.N > 0 && this.N == this.q.Length / 4)
		{
			this.resize(this.q.Length / 2);
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		64,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Queue underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.q[this.first];
	}
	[LineNumberTable(124), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new ResizingArrayQueue.ArrayIterator(this, null);
	}
	[LineNumberTable(new byte[]
	{
		95,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		ResizingArrayQueue resizingArrayQueue = new ResizingArrayQueue();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				resizingArrayQueue.enqueue(text);
			}
			else if (!resizingArrayQueue.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)resizingArrayQueue.dequeue()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(resizingArrayQueue.size()).append(" left on queue)").toString());
	}
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$100(ResizingArrayQueue resizingArrayQueue)
	{
		return resizingArrayQueue.N;
	}
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object[] access$200(ResizingArrayQueue resizingArrayQueue)
	{
		return resizingArrayQueue.q;
	}
	[LineNumberTable(36), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$300(ResizingArrayQueue resizingArrayQueue)
	{
		return resizingArrayQueue.first;
	}
	[LineNumberTable(36)]
	static ResizingArrayQueue()
	{
		ResizingArrayQueue.$assertionsDisabled = !ClassLiteral<ResizingArrayQueue>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class ResizingArrayStack : java.lang.Object, Iterable, IEnumerable
{
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("ResizingArrayStack.java")]
	internal sealed class ReverseArrayIterator : java.lang.Object, Iterator
	{
		private int i;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal ResizingArrayStack this$0 = resizingArrayStack;
		[LineNumberTable(new byte[]
		{
			74,
			111,
			108
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ReverseArrayIterator(ResizingArrayStack resizingArrayStack)
		{
			this.i = ResizingArrayStack.access$000(resizingArrayStack);
		}
		public virtual bool hasNext()
		{
			return this.i > 0;
		}
		[LineNumberTable(133)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			87,
			115
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object[] arg_31_0 = ResizingArrayStack.access$100(this.this$0);
			int num = this.i - 1;
			int arg_31_1 = num;
			this.i = num;
			return arg_31_0[arg_31_1];
		}
	}
	[Signature("[TItem;")]
	private object[] a;
	private int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		19,
		123,
		108,
		107,
		43,
		166,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int num)
	{
		if (!ResizingArrayStack.$assertionsDisabled && num < this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
		object[] array = (object[])new object[num];
		for (int i = 0; i < this.N; i++)
		{
			array[i] = this.a[i];
		}
		this.a = array;
	}
	public bool IsEmpty
	{
		return this.N == 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		104,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ResizingArrayStack()
	{
		this.a = (object[])new object[2];
	}
	[LineNumberTable(new byte[]
	{
		32,
		126,
		123
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void push(object obj)
	{
		if (this.N == this.a.Length)
		{
			this.resize(2 * this.a.Length);
		}
		object[] arg_38_0 = this.a;
		int n = this.N;
		int arg_38_1 = n;
		this.N = n + 1;
		arg_38_0[arg_38_1] = obj;
	}
	[LineNumberTable(new byte[]
	{
		42,
		120,
		112,
		112,
		142,
		127,
		10
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object pop()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = this.a[this.N - 1];
		this.a[this.N - 1] = null;
		this.N--;
		if (this.N > 0 && this.N == this.a.Length / 4)
		{
			this.resize(this.a.Length / 2);
		}
		return result;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		58,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return this.a[this.N - 1];
	}
	[LineNumberTable(117), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new ResizingArrayStack.ReverseArrayIterator(this);
	}
	[LineNumberTable(new byte[]
	{
		97,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		ResizingArrayStack resizingArrayStack = new ResizingArrayStack();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				resizingArrayStack.push(text);
			}
			else if (!resizingArrayStack.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)resizingArrayStack.pop()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(resizingArrayStack.size()).append(" left on stack)").toString());
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static int access$000(ResizingArrayStack resizingArrayStack)
	{
		return resizingArrayStack.N;
	}
	[LineNumberTable(38), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object[] access$100(ResizingArrayStack resizingArrayStack)
	{
		return resizingArrayStack.a;
	}
	[LineNumberTable(38)]
	static ResizingArrayStack()
	{
		ResizingArrayStack.$assertionsDisabled = !ClassLiteral<ResizingArrayStack>.Value.desiredAssertionStatus();
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class RunLength : java.lang.Object
{
	private const int R = 256;
	private const int lgR = 8;
	[LineNumberTable(new byte[]
	{
		159,
		180,
		98,
		98,
		103,
		102,
		100,
		103,
		98,
		170,
		104,
		103,
		98,
		135,
		133,
		98,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void compress()
	{
		int num = 0;
		int num2 = 0;
		while (!BinaryStdIn.IsEmpty)
		{
			int num3 = BinaryStdIn.readBoolean() ? 1 : 0;
			if (num3 != num2)
			{
				BinaryStdOut.write((char)num, 8);
				num = 1;
				num2 = ((num2 != 0) ? 0 : 1);
			}
			else
			{
				if (num == 255)
				{
					BinaryStdOut.write((char)num, 8);
					num = 0;
					BinaryStdOut.write((char)num, 8);
				}
				num = (int)((ushort)(num + 1));
			}
		}
		BinaryStdOut.write((char)num, 8);
		BinaryStdOut.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		169,
		98,
		103,
		103,
		102,
		38,
		134,
		104,
		98,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void expand()
	{
		int num = 0;
		while (!BinaryStdIn.IsEmpty)
		{
			int num2 = BinaryStdIn.readInt(8);
			for (int i = 0; i < num2; i++)
			{
				BinaryStdOut.write(num != 0);
			}
			num = ((num != 0) ? 0 : 1);
		}
		BinaryStdOut.close();
	}
	[LineNumberTable(22)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public RunLength()
	{
	}
	[LineNumberTable(new byte[]
	{
		12,
		118,
		118,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		if (java.lang.String.instancehelper_equals(strarr[0], "-"))
		{
			RunLength.compress();
		}
		else
		{
			if (!java.lang.String.instancehelper_equals(strarr[0], "+"))
			{
				string arg_36_0 = "Illegal command line argument";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_36_0);
			}
			RunLength.expand();
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Selection : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(83)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		44,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		61,
		104,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Selection.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(106)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		return Selection.isSorted(array, 0, array.Length - 1);
	}
	[LineNumberTable(88)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(Comparator comparator, object obj, object obj2)
	{
		return comparator.compare(obj, obj2) < 0;
	}
	[LineNumberTable(new byte[]
	{
		73,
		104,
		50,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(object[] array, Comparator comparator, int num, int num2)
	{
		for (int i = num + 1; i <= num2; i++)
		{
			if (Selection.less(comparator, array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(118)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(object[] array, Comparator comparator)
	{
		return Selection.isSorted(array, comparator, 0, array.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		159,
		188,
		99,
		105,
		98,
		104,
		47,
		166,
		104,
		252,
		58,
		233,
		72,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int num = carr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i;
			for (int j = i + 1; j < num; j++)
			{
				if (Selection.less(carr[j], carr[num2]))
				{
					num2 = j;
				}
			}
			Selection.exch(carr, i, num2);
			if (!Selection.$assertionsDisabled && !Selection.isSorted(carr, 0, i))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
		}
		if (!Selection.$assertionsDisabled && !Selection.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		82,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(39)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Selection()
	{
	}
	[LineNumberTable(new byte[]
	{
		14,
		99,
		105,
		98,
		104,
		48,
		166,
		104,
		253,
		58,
		233,
		72,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(object[] objarr, Comparator c)
	{
		int num = objarr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i;
			for (int j = i + 1; j < num; j++)
			{
				if (Selection.less(c, objarr[j], objarr[num2]))
				{
					num2 = j;
				}
			}
			Selection.exch(objarr, i, num2);
			if (!Selection.$assertionsDisabled && !Selection.isSorted(objarr, c, 0, i))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
		}
		if (!Selection.$assertionsDisabled && !Selection.isSorted(objarr, c))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		92,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Selection.sort(array);
		Selection.show(array);
	}
	[LineNumberTable(36)]
	static Selection()
	{
		Selection.$assertionsDisabled = !ClassLiteral<Selection>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key:Ljava/lang/Object;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class SeparateChainingHashST : java.lang.Object
{
	private const int INIT_CAPACITY = 4;
	private int N;
	private int M;
	[Signature("[LSequentialSearchST<TKey;TValue;>;")]
	private SequentialSearchST[] st;
	[LineNumberTable(new byte[]
	{
		159,
		176,
		104,
		103,
		113,
		102,
		45,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SeparateChainingHashST(int i)
	{
		this.M = i;
		this.st = (SequentialSearchST[])new SequentialSearchST[i];
		for (int j = 0; j < i; j++)
		{
			this.st[j] = new SequentialSearchST();
		}
	}
	[LineNumberTable(new byte[]
	{
		32,
		173,
		159,
		0,
		104,
		126,
		113
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(object obj1, object obj2)
	{
		if (obj2 == null)
		{
			this.delete(obj1);
			return;
		}
		if (this.N >= 10 * this.M)
		{
			this.resize(2 * this.M);
		}
		int num = this.hash(obj1);
		if (!this.st[num].contains(obj1))
		{
			this.N++;
		}
		this.st[num].put(obj1, obj2);
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		26,
		104
	}), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(object obj)
	{
		int num = this.hash(obj);
		return this.st[num].get(obj);
	}
	[LineNumberTable(56), Signature("(TKey;)I")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int hash(object this2)
	{
		int expr_0B = java.lang.Object.instancehelper_hashCode(this2) & 2147483647;
		int expr_12 = this.M;
		return (expr_12 != -1) ? (expr_0B % expr_12) : 0;
	}
	[LineNumberTable(new byte[]
	{
		44,
		104,
		126,
		174,
		127,
		10
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(object obj)
	{
		int num = this.hash(obj);
		if (this.st[num].contains(obj))
		{
			this.N--;
		}
		this.st[num].delete(obj);
		if (this.M > 4 && this.N <= 2 * this.M)
		{
			this.resize(this.M / 2);
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		185,
		103,
		107,
		127,
		3,
		23,
		230,
		69,
		108,
		108,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void resize(int i)
	{
		SeparateChainingHashST separateChainingHashST = new SeparateChainingHashST(i);
		for (int j = 0; j < this.M; j++)
		{
			Iterator iterator = this.st[j].keys().iterator();
			while (iterator.MoveNext())
			{
				object obj = iterator.Current;
				separateChainingHashST.put(obj, this.st[j].get(obj));
			}
		}
		this.M = separateChainingHashST.M;
		this.N = separateChainingHashST.N;
		this.st = separateChainingHashST.st;
	}
	[LineNumberTable(new byte[]
	{
		159,
		172,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SeparateChainingHashST() : this(4)
	{
	}
	[LineNumberTable(new byte[]
	{
		54,
		102,
		107,
		127,
		3,
		9,
		198
	}), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		global::Queue queue = new global::Queue();
		for (int i = 0; i < this.M; i++)
		{
			Iterator iterator = this.st[i].keys().iterator();
			while (iterator.MoveNext())
			{
				object obj = iterator.Current;
				queue.enqueue(obj);
			}
		}
		return queue;
	}
	[LineNumberTable(66)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(71), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(object obj)
	{
		return this.get(obj) != null;
	}
	[LineNumberTable(new byte[]
	{
		67,
		102,
		105,
		102,
		13,
		230,
		70,
		127,
		1,
		159,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SeparateChainingHashST separateChainingHashST = new SeparateChainingHashST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			separateChainingHashST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = separateChainingHashST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(separateChainingHashST.get(text)).toString());
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Key:Ljava/lang/Object;Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class SequentialSearchST : java.lang.Object
{
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("SequentialSearchST.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TKey;")]
		private object key;
		[Signature("TValue;")]
		private object val;
		[Signature("LSequentialSearchST<TKey;TValue;>.Node;")]
		private SequentialSearchST.Node next;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal SequentialSearchST this$0 = sequentialSearchST;
		[LineNumberTable(60), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$100(SequentialSearchST.Node node)
		{
			return node.key;
		}
		[LineNumberTable(60), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$200(SequentialSearchST.Node node)
		{
			return node.val;
		}
		[LineNumberTable(60), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static SequentialSearchST.Node access$000(SequentialSearchST.Node node)
		{
			return node.next;
		}
		[LineNumberTable(60), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$202(SequentialSearchST.Node node, object result)
		{
			node.val = result;
			return result;
		}
		[LineNumberTable(new byte[]
		{
			15,
			111,
			103,
			103,
			104
		}), Signature("(TKey;TValue;LSequentialSearchST<TKey;TValue;>.Node;)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Node(SequentialSearchST sequentialSearchST, object obj, object obj2, SequentialSearchST.Node node)
		{
			this.key = obj;
			this.val = obj2;
			this.next = node;
		}
		[LineNumberTable(60), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static SequentialSearchST.Node access$002(SequentialSearchST.Node node, SequentialSearchST.Node result)
		{
			node.next = result;
			return result;
		}
	}
	private int N;
	[Signature("LSequentialSearchST<TKey;TValue;>.Node;")]
	private SequentialSearchST.Node first;
	[LineNumberTable(new byte[]
	{
		25,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SequentialSearchST()
	{
	}
	[LineNumberTable(new byte[]
	{
		108,
		102,
		106,
		44,
		137
	}), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		global::Queue queue = new global::Queue();
		for (SequentialSearchST.Node node = this.first; node != null; node = SequentialSearchST.Node.access$000(node))
		{
			queue.enqueue(SequentialSearchST.Node.access$100(node));
		}
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		61,
		106,
		55,
		169
	}), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(object obj)
	{
		for (SequentialSearchST.Node node = this.first; node != null; node = SequentialSearchST.Node.access$000(node))
		{
			if (java.lang.Object.instancehelper_equals(obj, SequentialSearchST.Node.access$100(node)))
			{
				return SequentialSearchST.Node.access$200(node);
			}
		}
		return null;
	}
	[LineNumberTable(101), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(object obj)
	{
		return this.get(obj) != null;
	}
	[LineNumberTable(new byte[]
	{
		75,
		109,
		106,
		55,
		137,
		116,
		110
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(object obj1, object obj2)
	{
		if (obj2 == null)
		{
			this.delete(obj1);
			return;
		}
		for (SequentialSearchST.Node node = this.first; node != null; node = SequentialSearchST.Node.access$000(node))
		{
			if (java.lang.Object.instancehelper_equals(obj1, SequentialSearchST.Node.access$100(node)))
			{
				SequentialSearchST.Node.access$202(node, obj2);
				return;
			}
		}
		this.first = new SequentialSearchST.Node(this, obj1, obj2, this.first);
		this.N++;
	}
	[LineNumberTable(new byte[]
	{
		88,
		115
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(object obj)
	{
		this.first = this.delete(this.first, obj);
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		94,
		101,
		127,
		6,
		116
	}), Signature("(LSequentialSearchST<TKey;TValue;>.Node;TKey;)LSequentialSearchST<TKey;TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private SequentialSearchST.Node delete(SequentialSearchST.Node node, object obj)
	{
		if (node == null)
		{
			return null;
		}
		if (java.lang.Object.instancehelper_equals(obj, SequentialSearchST.Node.access$100(node)))
		{
			this.N--;
			return SequentialSearchST.Node.access$000(node);
		}
		SequentialSearchST.Node.access$002(node, this.delete(SequentialSearchST.Node.access$000(node), obj));
		return node;
	}
	[LineNumberTable(91)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		119,
		102,
		105,
		102,
		13,
		198,
		127,
		1,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SequentialSearchST sequentialSearchST = new SequentialSearchST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			sequentialSearchST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = sequentialSearchST.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(sequentialSearchST.get(text)).toString());
		}
	}
}

using IKVM.Attributes;
using ikvm.lang;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key::Ljava/lang/Comparable<TKey;>;>Ljava/lang/Object;Ljava/lang/Iterable<TKey;>;")]
public class SET : java.lang.Object, Iterable, IEnumerable
{
	[Signature("Ljava/util/TreeSet<TKey;>;")]
	private TreeSet set;
	[LineNumberTable(new byte[]
	{
		1,
		104,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SET()
	{
		this.set = new TreeSet();
	}
	[LineNumberTable(new byte[]
	{
		11,
		115,
		109
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void add(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called add() with a null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		this.set.add(c);
	}
	[LineNumberTable(new byte[]
	{
		24,
		115
	}), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called contains() with a null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		return this.set.contains(c);
	}
	[LineNumberTable(111), Signature("()Ljava/util/Iterator<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return this.set.iterator();
	}
	[LineNumberTable(93)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public int Size
	{
		return this.set.size();
	}
	[LineNumberTable(101)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		93,
		115,
		114,
		127,
		9
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable ceiling(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called ceiling() with a null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		IComparable comparable = (IComparable)this.set.ceiling(c);
		if (comparable == null)
		{
			string arg_47_0 = new StringBuilder().append("all keys are less than ").append(c).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_47_0);
		}
		return comparable;
	}
	[LineNumberTable(new byte[]
	{
		107,
		115,
		114,
		127,
		9
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable floor(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called floor() with a null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		IComparable comparable = (IComparable)this.set.floor(c);
		if (comparable == null)
		{
			string arg_47_0 = new StringBuilder().append("all keys are greater than ").append(c).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_47_0);
		}
		return comparable;
	}
	[LineNumberTable(new byte[]
	{
		34,
		115,
		109
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called delete() with a null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		this.set.remove(c);
	}
	[LineNumberTable(new byte[]
	{
		70,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable max()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "called max() with empty set";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return (IComparable)this.set.last();
	}
	[LineNumberTable(new byte[]
	{
		80,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable min()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "called min() with empty set";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return (IComparable)this.set.first();
	}
	[LineNumberTable(new byte[]
	{
		120,
		115,
		102,
		127,
		5,
		127,
		5
	}), Signature("(LSET<TKey;>;)LSET<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual SET union(SET set)
	{
		if (set == null)
		{
			string arg_0D_0 = "called union() with a null argument";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		SET sET = new SET();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			IComparable c = (IComparable)iterator.Current;
			sET.add(c);
		}
		iterator = set.iterator();
		while (iterator.MoveNext())
		{
			IComparable c = (IComparable)iterator.Current;
			sET.add(c);
		}
		return sET;
	}
	[LineNumberTable(new byte[]
	{
		160,
		70,
		115,
		102,
		110,
		123,
		212,
		123,
		178
	}), Signature("(LSET<TKey;>;)LSET<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual SET intersects(SET set)
	{
		if (set == null)
		{
			string arg_0D_0 = "called intersects() with a null argument";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		SET sET = new SET();
		if (this.size() < set.size())
		{
			Iterator iterator = this.iterator();
			while (iterator.MoveNext())
			{
				IComparable c = (IComparable)iterator.Current;
				if (set.contains(c))
				{
					sET.add(c);
				}
			}
		}
		else
		{
			Iterator iterator = set.iterator();
			while (iterator.MoveNext())
			{
				IComparable c = (IComparable)iterator.Current;
				if (this.contains(c))
				{
					sET.add(c);
				}
			}
		}
		return sET;
	}
	[LineNumberTable(new byte[]
	{
		160,
		95,
		102,
		101,
		112,
		103,
		144,
		123,
		223,
		5,
		2,
		97,
		130
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override bool equals(object obj)
	{
		if (obj == this)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (obj.GetType() != this.GetType())
		{
			return false;
		}
		SET sET = (SET)obj;
		if (this.size() != sET.size())
		{
			return false;
		}
		try
		{
			Iterator iterator = this.iterator();
			while (iterator.MoveNext())
			{
				IComparable c = (IComparable)iterator.Current;
				if (!sET.contains(c))
				{
					return false;
				}
			}
		}
		catch (System.Exception arg_5F_0)
		{
			if (ByteCodeHelper.MapException<ClassCastException>(arg_5F_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
			return false;
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		116,
		102,
		123,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			IComparable obj = (IComparable)iterator.Current;
			stringBuilder.append(new StringBuilder().append(obj).append(" ").toString());
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		126,
		198,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		107,
		171,
		112,
		118,
		112,
		133,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		127,
		15,
		197,
		123,
		168
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SET sET = new SET();
		sET.add("www.cs.princeton.edu");
		sET.add("www.cs.princeton.edu");
		sET.add("www.princeton.edu");
		sET.add("www.math.princeton.edu");
		sET.add("www.yale.edu");
		sET.add("www.amazon.com");
		sET.add("www.simpsons.com");
		sET.add("www.stanford.edu");
		sET.add("www.google.com");
		sET.add("www.ibm.com");
		sET.add("www.apple.com");
		sET.add("www.slashdot.com");
		sET.add("www.whitehouse.gov");
		sET.add("www.espn.com");
		sET.add("www.snopes.com");
		sET.add("www.movies.com");
		sET.add("www.cnn.com");
		sET.add("www.iitb.ac.in");
		StdOut.println(sET.contains("www.cs.princeton.edu"));
		StdOut.println(!sET.contains("www.harvardsucks.com"));
		StdOut.println(sET.contains("www.simpsons.com"));
		StdOut.println();
		StdOut.println(new StringBuilder().append("ceiling(www.simpsonr.com) = ").append((string)sET.ceiling("www.simpsonr.com")).toString());
		StdOut.println(new StringBuilder().append("ceiling(www.simpsons.com) = ").append((string)sET.ceiling("www.simpsons.com")).toString());
		StdOut.println(new StringBuilder().append("ceiling(www.simpsont.com) = ").append((string)sET.ceiling("www.simpsont.com")).toString());
		StdOut.println(new StringBuilder().append("floor(www.simpsonr.com)   = ").append((string)sET.floor("www.simpsonr.com")).toString());
		StdOut.println(new StringBuilder().append("floor(www.simpsons.com)   = ").append((string)sET.floor("www.simpsons.com")).toString());
		StdOut.println(new StringBuilder().append("floor(www.simpsont.com)   = ").append((string)sET.floor("www.simpsont.com")).toString());
		StdOut.println();
		Iterator iterator = sET.iterator();
		while (iterator.MoveNext())
		{
			string obj = (string)iterator.Current;
			StdOut.println(obj);
		}
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Shell : java.lang.Object
{
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(78)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool less(IComparable o, IComparable comparable)
	{
		return Comparable.__Helper.compareTo(o, comparable) < 0;
	}
	[LineNumberTable(new byte[]
	{
		33,
		100,
		102,
		100
	})]
	private static void exch(object[] array, int num, int num2)
	{
		object obj = array[num];
		array[num] = array[num2];
		array[num2] = obj;
	}
	[LineNumberTable(new byte[]
	{
		50,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isHsorted(IComparable[] array, int num)
	{
		for (int i = num; i < array.Length; i++)
		{
			if (Shell.less(array[i], array[i - num]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		43,
		103,
		49,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static bool isSorted(IComparable[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (Shell.less(array[i], array[i - 1]))
			{
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		1,
		163,
		98,
		142,
		135,
		102,
		117,
		42,
		38,
		230,
		69,
		123,
		137,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void sort(IComparable[] carr)
	{
		int num = carr.Length;
		int i;
		for (i = 1; i < num / 3; i = 3 * i + 1)
		{
		}
		while (i >= 1)
		{
			for (int j = i; j < num; j++)
			{
				int num2 = j;
				while (num2 >= i && Shell.less(carr[num2], carr[num2 - i]))
				{
					Shell.exch(carr, num2, num2 - i);
					num2 -= i;
				}
			}
			if (!Shell.$assertionsDisabled && !Shell.isHsorted(carr, i))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			i /= 3;
		}
		if (!Shell.$assertionsDisabled && !Shell.isSorted(carr))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		57,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void show(IComparable[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
	}
	[LineNumberTable(44)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private Shell()
	{
	}
	[LineNumberTable(new byte[]
	{
		67,
		102,
		102,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string[] array = StdIn.readAllStrings();
		Shell.sort(array);
		Shell.show(array);
	}
	[LineNumberTable(41)]
	static Shell()
	{
		Shell.$assertionsDisabled = !ClassLiteral<Shell>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Simplex : java.lang.Object
{
	private const double EPSILON = 1E-10;
	private double[][] a;
	private int M;
	private int N;
	private int[] basis;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		0,
		103,
		166,
		104,
		180,
		168,
		105,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void solve()
	{
		while (true)
		{
			int num = this.bland();
			if (num == -1)
			{
				break;
			}
			int num2 = this.minRatioRule(num);
			if (num2 == -1)
			{
				goto Block_1;
			}
			this.pivot(num2, num);
			this.basis[num2] = num;
		}
		return;
		Block_1:
		string arg_23_0 = "Linear program is unbounded";
		Throwable.__<suppressFillInStackTrace>();
		throw new java.lang.ArithmeticException(arg_23_0);
	}
	[LineNumberTable(209)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(double[][] array, double[] array2, double[] array3)
	{
		return this.isPrimalFeasible(array, array2) && this.isDualFeasible(array, array3) && this.isOptimal(array2, array3);
	}
	[LineNumberTable(new byte[]
	{
		17,
		114,
		56,
		134
	})]
	private int bland()
	{
		for (int i = 0; i < this.M + this.N; i++)
		{
			if (this.a[this.M][i] > (double)0f)
			{
				return i;
			}
		}
		return -1;
	}
	[LineNumberTable(new byte[]
	{
		34,
		98,
		110,
		115,
		104,
		255,
		39,
		61,
		233,
		69
	})]
	private int minRatioRule(int num)
	{
		int num2 = -1;
		for (int i = 0; i < this.M; i++)
		{
			if (this.a[i][num] > (double)0f)
			{
				if (num2 == -1)
				{
					num2 = i;
				}
				else if (this.a[i][this.M + this.N] / this.a[i][num] < this.a[num2][this.M + this.N] / this.a[num2][num])
				{
					num2 = i;
				}
			}
		}
		return num2;
	}
	[LineNumberTable(new byte[]
	{
		47,
		110,
		114,
		63,
		28,
		41,
		233,
		69,
		107,
		51,
		198,
		114,
		63,
		2,
		134,
		111
	})]
	private void pivot(int num, int num2)
	{
		for (int i = 0; i <= this.M; i++)
		{
			for (int j = 0; j <= this.M + this.N; j++)
			{
				if (i != num && j != num2)
				{
					double[] arg_32_0 = this.a[i];
					int num3 = j;
					double[] array = arg_32_0;
					array[num3] -= this.a[num][j] * this.a[i][num2] / this.a[num][num2];
				}
			}
		}
		for (int i = 0; i <= this.M; i++)
		{
			if (i != num)
			{
				this.a[i][num2] = (double)0f;
			}
		}
		for (int i = 0; i <= this.M + this.N; i++)
		{
			if (i != num2)
			{
				double[] arg_B1_0 = this.a[num];
				int num3 = i;
				double[] array = arg_B1_0;
				array[num3] /= this.a[num][num2];
			}
		}
		this.a[num][num2] = (double)1f;
	}
	[LineNumberTable(new byte[]
	{
		68,
		108,
		107,
		63,
		17,
		134
	})]
	public virtual double[] primal()
	{
		double[] array = new double[this.N];
		for (int i = 0; i < this.M; i++)
		{
			if (this.basis[i] < this.N)
			{
				array[this.basis[i]] = this.a[i][this.M + this.N];
			}
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		76,
		108,
		107,
		58,
		134
	})]
	public virtual double[] dual()
	{
		double[] array = new double[this.M];
		for (int i = 0; i < this.M; i++)
		{
			array[i] = -this.a[this.M][this.N + i];
		}
		return array;
	}
	[LineNumberTable(113)]
	public virtual double value()
	{
		return -this.a[this.M][this.M + this.N];
	}
	[LineNumberTable(new byte[]
	{
		85,
		167,
		103,
		106,
		127,
		28,
		226,
		61,
		230,
		72,
		110,
		102,
		107,
		45,
		166,
		112,
		106,
		127,
		34,
		226,
		56,
		233,
		75
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isPrimalFeasible(double[][] array, double[] array2)
	{
		double[] array3 = this.primal();
		for (int i = 0; i < array3.Length; i++)
		{
			if (array3[i] < (double)0f)
			{
				StdOut.println(new StringBuilder().append("x[").append(i).append("] = ").append(array3[i]).append(" is negative").toString());
				return false;
			}
		}
		for (int i = 0; i < this.M; i++)
		{
			double num = (double)0f;
			for (int j = 0; j < this.N; j++)
			{
				num += array[i][j] * array3[j];
			}
			if (num > array2[i] + 1E-10)
			{
				StdOut.println("not primal feasible");
				StdOut.println(new StringBuilder().append("b[").append(i).append("] = ").append(array2[i]).append(", sum = ").append(num).toString());
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		112,
		167,
		103,
		106,
		127,
		28,
		226,
		61,
		230,
		72,
		110,
		102,
		107,
		45,
		166,
		112,
		106,
		127,
		34,
		226,
		56,
		233,
		75
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isDualFeasible(double[][] array, double[] array2)
	{
		double[] array3 = this.dual();
		for (int i = 0; i < array3.Length; i++)
		{
			if (array3[i] < (double)0f)
			{
				StdOut.println(new StringBuilder().append("y[").append(i).append("] = ").append(array3[i]).append(" is negative").toString());
				return false;
			}
		}
		for (int i = 0; i < this.N; i++)
		{
			double num = (double)0f;
			for (int j = 0; j < this.M; j++)
			{
				num += array[j][i] * array3[j];
			}
			if (num < array2[i] - 1E-10)
			{
				StdOut.println("not dual feasible");
				StdOut.println(new StringBuilder().append("c[").append(i).append("] = ").append(array2[i]).append(", sum = ").append(num).toString());
				return false;
			}
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		75,
		103,
		103,
		168,
		102,
		105,
		45,
		136,
		103,
		105,
		47,
		136,
		127,
		8,
		127,
		33,
		162
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool isOptimal(double[] array, double[] array2)
	{
		double[] array3 = this.primal();
		double[] array4 = this.dual();
		double num = this.value();
		double num2 = (double)0f;
		for (int i = 0; i < array3.Length; i++)
		{
			num2 += array2[i] * array3[i];
		}
		double num3 = (double)0f;
		for (int j = 0; j < array4.Length; j++)
		{
			num3 += array4[j] * array[j];
		}
		if (java.lang.Math.abs(num - num2) > 1E-10 || java.lang.Math.abs(num - num3) > 1E-10)
		{
			StdOut.println(new StringBuilder().append("value = ").append(num).append(", cx = ").append(num2).append(", yb = ").append(num3).toString());
			return false;
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		159,
		167,
		104,
		104,
		104,
		127,
		31,
		107,
		109,
		49,
		40,
		166,
		127,
		8,
		127,
		4,
		159,
		11,
		113,
		159,
		2,
		166,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Simplex(double[][] darr1, double[] darr2, double[] darr3)
	{
		this.M = darr2.Length;
		this.N = darr3.Length;
		int arg_3C_0 = this.M + 1;
		int arg_37_0 = this.N + this.M + 1;
		int[] array = new int[2];
		int num = arg_37_0;
		array[1] = num;
		num = arg_3C_0;
		array[0] = num;
		this.a = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < this.M; i++)
		{
			for (int j = 0; j < this.N; j++)
			{
				this.a[i][j] = darr1[i][j];
			}
		}
		for (int i = 0; i < this.M; i++)
		{
			this.a[i][this.N + i] = (double)1f;
		}
		for (int i = 0; i < this.N; i++)
		{
			this.a[this.M][i] = darr3[i];
		}
		for (int i = 0; i < this.M; i++)
		{
			this.a[i][this.M + this.N] = darr2[i];
		}
		this.basis = new int[this.M];
		for (int i = 0; i < this.M; i++)
		{
			this.basis[i] = this.N + i;
		}
		this.solve();
		if (!Simplex.$assertionsDisabled && !this.check(darr1, darr2, darr3))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		116,
		105,
		127,
		5,
		103,
		103,
		63,
		18,
		134,
		103,
		105,
		63,
		20,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test(double[][] darr1, double[] darr2, double[] darr3)
	{
		Simplex simplex = new Simplex(darr1, darr2, darr3);
		StdOut.println(new StringBuilder().append("value = ").append(simplex.value()).toString());
		double[] array = simplex.primal();
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(new StringBuilder().append("x[").append(i).append("] = ").append(array[i]).toString());
		}
		double[] array2 = simplex.dual();
		for (int j = 0; j < array2.Length; j++)
		{
			StdOut.println(new StringBuilder().append("y[").append(j).append("] = ").append(array2[j]).toString());
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		127,
		255,
		160,
		97,
		71,
		127,
		0,
		127,
		36,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test1()
	{
		double[][] darr = new double[][]
		{
			new double[]
			{
				-1.0,
				(double)1f,
				(double)0f
			},
			new double[]
			{
				(double)1f,
				4.0,
				(double)0f
			},
			new double[]
			{
				2.0,
				(double)1f,
				(double)0f
			},
			new double[]
			{
				3.0,
				-4.0,
				(double)0f
			},
			new double[]
			{
				(double)0f,
				(double)0f,
				(double)1f
			}
		};
		double[] darr2 = new double[]
		{
			(double)1f,
			(double)1f,
			(double)1f
		};
		double[] darr3 = new double[]
		{
			5.0,
			45.0,
			27.0,
			24.0,
			4.0
		};
		Simplex.test(darr, darr3, darr2);
	}
	[LineNumberTable(new byte[]
	{
		160,
		142,
		127,
		0,
		127,
		12,
		255,
		75,
		69,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test2()
	{
		double[] darr = new double[]
		{
			13.0,
			23.0
		};
		double[] darr2 = new double[]
		{
			480.0,
			160.0,
			1190.0
		};
		double[][] darr3 = new double[][]
		{
			new double[]
			{
				5.0,
				15.0
			},
			new double[]
			{
				4.0,
				4.0
			},
			new double[]
			{
				35.0,
				20.0
			}
		};
		Simplex.test(darr3, darr2, darr);
	}
	[LineNumberTable(new byte[]
	{
		160,
		154,
		127,
		24,
		127,
		0,
		223,
		78,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test3()
	{
		double[] darr = new double[]
		{
			2.0,
			3.0,
			-1.0,
			-12.0
		};
		double[] darr2 = new double[]
		{
			3.0,
			2.0
		};
		double[][] darr3 = new double[][]
		{
			new double[]
			{
				-2.0,
				-9.0,
				(double)1f,
				9.0
			},
			new double[]
			{
				(double)1f,
				(double)1f,
				-1.0,
				-2.0
			}
		};
		Simplex.test(darr3, darr2, darr);
	}
	[LineNumberTable(new byte[]
	{
		160,
		165,
		127,
		24,
		127,
		0,
		255,
		127,
		69,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test4()
	{
		double[] darr = new double[]
		{
			10.0,
			-57.0,
			-9.0,
			-24.0
		};
		double[] darr2 = new double[]
		{
			(double)0f,
			(double)0f,
			(double)1f
		};
		double[][] darr3 = new double[][]
		{
			new double[]
			{
				0.5,
				-5.5,
				-2.5,
				9.0
			},
			new double[]
			{
				0.5,
				-1.5,
				-0.5,
				(double)1f
			},
			new double[]
			{
				(double)1f,
				(double)0f,
				(double)0f,
				(double)0f
			}
		};
		Simplex.test(darr3, darr2, darr);
	}
	[LineNumberTable(new byte[]
	{
		24,
		98,
		114,
		63,
		3,
		166,
		120
	})]
	private int dantzig()
	{
		int num = 0;
		for (int i = 1; i < this.M + this.N; i++)
		{
			if (this.a[this.M][i] > this.a[this.M][num])
			{
				num = i;
			}
		}
		if (this.a[this.M][num] <= (double)0f)
		{
			return -1;
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		100,
		127,
		5,
		127,
		5,
		107,
		114,
		63,
		3,
		166,
		229,
		60,
		230,
		70,
		127,
		5,
		107,
		63,
		60,
		137,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void show()
	{
		StdOut.println(new StringBuilder().append("M = ").append(this.M).toString());
		StdOut.println(new StringBuilder().append("N = ").append(this.N).toString());
		for (int i = 0; i <= this.M; i++)
		{
			for (int j = 0; j <= this.M + this.N; j++)
			{
				StdOut.printf("%7.2f ", new object[]
				{
					java.lang.Double.valueOf(this.a[i][j])
				});
			}
			StdOut.println();
		}
		StdOut.println(new StringBuilder().append("value = ").append(this.value()).toString());
		for (int i = 0; i < this.M; i++)
		{
			if (this.basis[i] < this.N)
			{
				StdOut.println(new StringBuilder().append("x_").append(this.basis[i]).append(" = ").append(this.a[i][this.M + this.N]).toString());
			}
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		160,
		180,
		124,
		105,
		138,
		124,
		105,
		138,
		124,
		105,
		138,
		126,
		105,
		170,
		106,
		106,
		105,
		105,
		127,
		16,
		105,
		48,
		136,
		105,
		48,
		136,
		105,
		105,
		48,
		40,
		168,
		109,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		java.lang.ArithmeticException ex;
		try
		{
			Simplex.test1();
		}
		catch (System.Exception arg_0A_0)
		{
			java.lang.ArithmeticException expr_0F = ByteCodeHelper.MapException<java.lang.ArithmeticException>(arg_0A_0, ByteCodeHelper.MapFlags.None);
			if (expr_0F == null)
			{
				throw;
			}
			ex = expr_0F;
			goto IL_19;
		}
		goto IL_25;
		IL_19:
		java.lang.ArithmeticException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		IL_25:
		StdOut.println("--------------------------------");
		java.lang.ArithmeticException ex2;
		try
		{
			Simplex.test2();
		}
		catch (System.Exception arg_39_0)
		{
			java.lang.ArithmeticException expr_3E = ByteCodeHelper.MapException<java.lang.ArithmeticException>(arg_39_0, ByteCodeHelper.MapFlags.None);
			if (expr_3E == null)
			{
				throw;
			}
			ex2 = expr_3E;
			goto IL_48;
		}
		goto IL_54;
		IL_48:
		@this = ex2;
		Throwable.instancehelper_printStackTrace(@this);
		IL_54:
		StdOut.println("--------------------------------");
		java.lang.ArithmeticException ex3;
		try
		{
			Simplex.test3();
		}
		catch (System.Exception arg_68_0)
		{
			java.lang.ArithmeticException expr_6D = ByteCodeHelper.MapException<java.lang.ArithmeticException>(arg_68_0, ByteCodeHelper.MapFlags.None);
			if (expr_6D == null)
			{
				throw;
			}
			ex3 = expr_6D;
			goto IL_77;
		}
		goto IL_83;
		IL_77:
		@this = ex3;
		Throwable.instancehelper_printStackTrace(@this);
		IL_83:
		StdOut.println("--------------------------------");
		java.lang.ArithmeticException ex4;
		try
		{
			Simplex.test4();
		}
		catch (System.Exception arg_97_0)
		{
			java.lang.ArithmeticException expr_9C = ByteCodeHelper.MapException<java.lang.ArithmeticException>(arg_97_0, ByteCodeHelper.MapFlags.None);
			if (expr_9C == null)
			{
				throw;
			}
			ex4 = expr_9C;
			goto IL_A7;
		}
		goto IL_B4;
		IL_A7:
		@this = ex4;
		Throwable.instancehelper_printStackTrace(@this);
		IL_B4:
		StdOut.println("--------------------------------");
		int num = Integer.parseInt(strarr[0]);
		int num2 = Integer.parseInt(strarr[1]);
		double[] array = new double[num2];
		double[] array2 = new double[num];
		int arg_F8_0 = num;
		int arg_F0_0 = num2;
		int[] array3 = new int[2];
		int num3 = arg_F0_0;
		array3[1] = num3;
		num3 = arg_F8_0;
		array3[0] = num3;
		double[][] array4 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array3);
		for (int i = 0; i < num2; i++)
		{
			array[i] = (double)StdRandom.uniform(1000);
		}
		for (int i = 0; i < num; i++)
		{
			array2[i] = (double)StdRandom.uniform(1000);
		}
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				array4[i][j] = (double)StdRandom.uniform(100);
			}
		}
		Simplex simplex = new Simplex(array4, array2, array);
		StdOut.println(simplex.value());
	}
	[LineNumberTable(15)]
	static Simplex()
	{
		Simplex.$assertionsDisabled = !ClassLiteral<Simplex>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class SparseVector : java.lang.Object
{
	private int N;
	[Signature("LST<Ljava/lang/Integer;Ljava/lang/Double;>;")]
	private ST st;
	[LineNumberTable(new byte[]
	{
		159,
		172,
		125,
		127,
		18
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double get(int i)
	{
		if (i < 0 || i >= this.N)
		{
			string arg_17_0 = "Illegal index";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		if (this.st.contains(Integer.valueOf(i)))
		{
			return ((java.lang.Double)this.st.get(Integer.valueOf(i))).doubleValue();
		}
		return (double)0f;
	}
	[LineNumberTable(new byte[]
	{
		159,
		189,
		126,
		166,
		120,
		127,
		11,
		191,
		11,
		127,
		11,
		159,
		9
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double dot(SparseVector sv)
	{
		if (this.N != sv.N)
		{
			string arg_18_0 = "Vector lengths disagree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		double num = (double)0f;
		if (this.st.size() <= sv.st.size())
		{
			Iterator iterator = this.st.keys().iterator();
			while (iterator.MoveNext())
			{
				int i = ((Integer)iterator.Current).intValue();
				if (sv.st.contains(Integer.valueOf(i)))
				{
					num += this.get(i) * sv.get(i);
				}
			}
		}
		else
		{
			Iterator iterator = sv.st.keys().iterator();
			while (iterator.MoveNext())
			{
				int i = ((Integer)iterator.Current).intValue();
				if (this.st.contains(Integer.valueOf(i)))
				{
					num += this.get(i) * sv.get(i);
				}
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		159,
		158,
		104,
		103,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SparseVector(int i)
	{
		this.N = i;
		this.st = new ST();
	}
	[LineNumberTable(new byte[]
	{
		159,
		165,
		125,
		124,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(int i, double d)
	{
		if (i < 0 || i >= this.N)
		{
			string arg_17_0 = "Illegal index";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		if (d == (double)0f)
		{
			this.st.delete(Integer.valueOf(i));
		}
		else
		{
			this.st.put(Integer.valueOf(i), java.lang.Double.valueOf(d));
		}
	}
	[LineNumberTable(new byte[]
	{
		37,
		126,
		108,
		127,
		27,
		127,
		35
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual SparseVector plus(SparseVector sv)
	{
		if (this.N != sv.N)
		{
			string arg_18_0 = "Vector lengths disagree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		SparseVector sparseVector = new SparseVector(this.N);
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			sparseVector.put(i, this.get(i));
		}
		iterator = sv.st.keys().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			sparseVector.put(i, sv.get(i) + sparseVector.get(i));
		}
		return sparseVector;
	}
	[LineNumberTable(37)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int nnz()
	{
		return this.st.size();
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		15,
		102,
		127,
		11,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double dot(double[] darr)
	{
		double num = (double)0f;
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			int num2 = ((Integer)iterator.Current).intValue();
			num += darr[num2] * this.get(num2);
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		24,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double norm()
	{
		return java.lang.Math.sqrt(this.dot(this));
	}
	[LineNumberTable(new byte[]
	{
		30,
		108,
		127,
		30
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual SparseVector scale(double d)
	{
		SparseVector sparseVector = new SparseVector(this.N);
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			sparseVector.put(i, d * this.get(i));
		}
		return sparseVector;
	}
	[LineNumberTable(new byte[]
	{
		46,
		102,
		127,
		11,
		159,
		46
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string text = "";
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			text = new StringBuilder().append(text).append("(").append(i).append(", ").append(this.st.get(Integer.valueOf(i))).append(") ").toString();
		}
		return text;
	}
	[LineNumberTable(new byte[]
	{
		56,
		104,
		104,
		112,
		113,
		112,
		108,
		112,
		112,
		127,
		0,
		127,
		0,
		127,
		6,
		127,
		8
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SparseVector sparseVector = new SparseVector(10);
		SparseVector sparseVector2 = new SparseVector(10);
		sparseVector.put(3, 0.5);
		sparseVector.put(9, 0.75);
		sparseVector.put(6, 0.11);
		sparseVector.put(6, (double)0f);
		sparseVector2.put(3, 0.6);
		sparseVector2.put(4, 0.9);
		StdOut.println(new StringBuilder().append("a = ").append(sparseVector).toString());
		StdOut.println(new StringBuilder().append("b = ").append(sparseVector2).toString());
		StdOut.println(new StringBuilder().append("a dot b = ").append(sparseVector.dot(sparseVector2)).toString());
		StdOut.println(new StringBuilder().append("a + b   = ").append(sparseVector.plus(sparseVector2)).toString());
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Key::Ljava/lang/Comparable<TKey;>;Value:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TKey;>;")]
public class ST : java.lang.Object, Iterable, IEnumerable
{
	[Signature("Ljava/util/TreeMap<TKey;TValue;>;")]
	private TreeMap st;
	[LineNumberTable(new byte[]
	{
		3,
		104,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ST()
	{
		this.st = new TreeMap();
	}
	[LineNumberTable(new byte[]
	{
		53,
		115
	}), Signature("(TKey;)Z")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called contains() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		return this.st.containsKey(c);
	}
	[LineNumberTable(new byte[]
	{
		29,
		115,
		114,
		110
	}), Signature("(TKey;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(IComparable c, object obj)
	{
		if (c == null)
		{
			string arg_0D_0 = "called put() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		if (obj == null)
		{
			this.st.remove(c);
		}
		else
		{
			this.st.put(c, obj);
		}
	}
	[LineNumberTable(new byte[]
	{
		16,
		115
	}), Signature("(TKey;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called get() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		return this.st.get(c);
	}
	[LineNumberTable(130), Signature("()Ljava/lang/Iterable<TKey;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		return this.st.keySet();
	}
	[LineNumberTable(new byte[]
	{
		41,
		115,
		109
	}), Signature("(TKey;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called delete() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		this.st.remove(c);
	}
	[LineNumberTable(112)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public int Size
	{
		return this.st.size();
	}
	[LineNumberTable(120)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(143), Signature("()Ljava/util/Iterator<TKey;>;"), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return this.st.keySet().iterator();
	}
	[LineNumberTable(new byte[]
	{
		102,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable min()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "called min() with empty symbol table";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return (IComparable)this.st.firstKey();
	}
	[LineNumberTable(new byte[]
	{
		112,
		120
	}), Signature("()TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable max()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "called max() with empty symbol table";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return (IComparable)this.st.lastKey();
	}
	[LineNumberTable(new byte[]
	{
		124,
		115,
		114,
		127,
		9
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable ceiling(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called ceiling() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		IComparable comparable = (IComparable)this.st.ceilingKey(c);
		if (comparable == null)
		{
			string arg_47_0 = new StringBuilder().append("all keys are less than ").append(c).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_47_0);
		}
		return comparable;
	}
	[LineNumberTable(new byte[]
	{
		160,
		74,
		115,
		114,
		127,
		9
	}), Signature("(TKey;)TKey;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual IComparable floor(IComparable c)
	{
		if (c == null)
		{
			string arg_0D_0 = "called floor() with null key";
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException(arg_0D_0);
		}
		IComparable comparable = (IComparable)this.st.floorKey(c);
		if (comparable == null)
		{
			string arg_47_0 = new StringBuilder().append("all keys are greater than ").append(c).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_47_0);
		}
		return comparable;
	}
	[LineNumberTable(new byte[]
	{
		160,
		84,
		102,
		105,
		102,
		13,
		198,
		127,
		1,
		127,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		ST sT = new ST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			sT.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = sT.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(text).append(" ").append(sT.get(text)).toString());
		}
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TItem;>;")]
public class Stack : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("Stack", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("Stack.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.util.Iterator"
	}), InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TItem;>;"), SourceFile("Stack.java")]
	internal sealed class ListIterator : java.lang.Object, Iterator
	{
		[Signature("LStack$Node<TItem;>;")]
		private global::Stack.Node current;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal global::Stack this$0 = stack;
		[LineNumberTable(new byte[]
		{
			86,
			111,
			103
		}), Signature("(LStack$Node<TItem;>;)V")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ListIterator(global::Stack stack, global::Stack.Node node)
		{
			this.current = node;
		}
		public virtual bool hasNext()
		{
			return this.current != null;
		}
		[LineNumberTable(140)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void remove()
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new UnsupportedOperationException();
		}
		[LineNumberTable(new byte[]
		{
			93,
			115,
			108,
			113
		}), Signature("()TItem;")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual object next()
		{
			if (!this.hasNext())
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new NoSuchElementException();
			}
			object result = global::Stack.Node.access$100(this.current);
			this.current = global::Stack.Node.access$200(this.current);
			return result;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("<Item:Ljava/lang/Object;>Ljava/lang/Object;"), SourceFile("Stack.java")]
	internal sealed class Node : java.lang.Object
	{
		[Signature("TItem;")]
		private object item;
		[Signature("LStack$Node<TItem;>;")]
		private global::Stack.Node next;
		[LineNumberTable(47), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(global::Stack.1) : this()
		{
		}
		[LineNumberTable(47), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$102(global::Stack.Node node, object result)
		{
			node.item = result;
			return result;
		}
		[LineNumberTable(47), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static global::Stack.Node access$202(global::Stack.Node node, global::Stack.Node result)
		{
			node.next = result;
			return result;
		}
		[LineNumberTable(47), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$100(global::Stack.Node node)
		{
			return node.item;
		}
		[LineNumberTable(47), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static global::Stack.Node access$200(global::Stack.Node node)
		{
			return node.next;
		}
		[LineNumberTable(47)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node()
		{
		}
	}
	private int N;
	[Signature("LStack$Node<TItem;>;")]
	private global::Stack.Node first;
	[LineNumberTable(new byte[]
	{
		5,
		104,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Stack()
	{
		this.first = null;
		this.N = 0;
	}
	[LineNumberTable(new byte[]
	{
		31,
		103,
		108,
		109,
		109,
		110
	}), Signature("(TItem;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void push(object obj)
	{
		global::Stack.Node node = this.first;
		this.first = new global::Stack.Node(null);
		global::Stack.Node.access$102(this.first, obj);
		global::Stack.Node.access$202(this.first, node);
		this.N++;
	}
	[LineNumberTable(129), Signature("()Ljava/util/Iterator<TItem;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return new global::Stack.ListIterator(this, this.first);
	}
	[LineNumberTable(new byte[]
	{
		58,
		120
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public object Peek()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		return global::Stack.Node.access$100(this.first);
	}
	[LineNumberTable(new byte[]
	{
		44,
		120,
		108,
		113,
		110
	}), Signature("()TItem;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object pop()
	{
		if (IsEmpty)
		{
			string arg_12_0 = "Stack underflow";
			Throwable.__<suppressFillInStackTrace>();
			throw new NoSuchElementException(arg_12_0);
		}
		object result = global::Stack.Node.access$100(this.first);
		this.first = global::Stack.Node.access$200(this.first);
		this.N--;
		return result;
	}
	public int Size
	{
		return this.N;
	}
	public bool IsEmpty
	{
		return this.first == null;
	}
	[LineNumberTable(new byte[]
	{
		67,
		102,
		118,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		Iterator iterator = this.iterator();
		while (iterator.MoveNext())
		{
			object obj = iterator.Current;
			stringBuilder.append(new StringBuilder().append(obj).append(" ").toString());
		}
		return stringBuilder.toString();
	}
	[LineNumberTable(new byte[]
	{
		105,
		102,
		103,
		102,
		118,
		127,
		18,
		98,
		127,
		17
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		global::Stack stack = new global::Stack();
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (!java.lang.String.instancehelper_equals(text, "-"))
			{
				stack.push(text);
			}
			else if (!stack.IsEmpty)
			{
				StdOut.print(new StringBuilder().append((string)stack.pop()).append(" ").toString());
			}
		}
		StdOut.println(new StringBuilder().append("(").append(stack.size()).append(" left on stack)").toString());
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class StaticSETofInts : java.lang.Object
{
	private int[] a;
	[LineNumberTable(new byte[]
	{
		16,
		98,
		106,
		132,
		104,
		113,
		113,
		98,
		98
	})]
	public virtual int rank(int i)
	{
		int j = 0;
		int num = this.a.Length - 1;
		while (j <= num)
		{
			int num2 = j + (num - j) / 2;
			if (i < this.a[num2])
			{
				num = num2 - 1;
			}
			else
			{
				if (i <= this.a[num2])
				{
					return num2;
				}
				j = num2 + 1;
			}
		}
		return -1;
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		168,
		109,
		103,
		43,
		198,
		171,
		108,
		116,
		16,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public StaticSETofInts(int[] iarr)
	{
		this.a = new int[iarr.Length];
		for (int i = 0; i < iarr.Length; i++)
		{
			this.a[i] = iarr[i];
		}
		Arrays.sort(this.a);
		for (int i = 1; i < this.a.Length; i++)
		{
			if (this.a[i] == this.a[i - 1])
			{
				string arg_62_0 = "Argument arrays contains duplicate keys.";
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_62_0);
			}
		}
	}
	[LineNumberTable(55)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(int i)
	{
		return this.rank(i) != -1;
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class StdArrayIO : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		19,
		102,
		103,
		102,
		41,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] readDouble1D()
	{
		int num = StdIn.readInt();
		double[] array = new double[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = StdIn.readDouble();
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		31,
		99,
		102,
		102,
		59,
		166,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(double[] darr)
	{
		int num = darr.Length;
		StdOut.println(num);
		for (int i = 0; i < num; i++)
		{
			StdOut.printf("%9.5f ", new object[]
			{
				java.lang.Double.valueOf(darr[i])
			});
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		44,
		102,
		102,
		127,
		6,
		104,
		104,
		46,
		40,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[][] readDouble2D()
	{
		int num = StdIn.readInt();
		int num2 = StdIn.readInt();
		int arg_1A_0 = num;
		int arg_15_0 = num2;
		int[] array = new int[2];
		int num3 = arg_15_0;
		array[1] = num3;
		num3 = arg_1A_0;
		array[0] = num3;
		double[][] array2 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				array2[i][j] = StdIn.readDouble();
			}
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		59,
		99,
		101,
		127,
		6,
		102,
		102,
		61,
		166,
		229,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(double[][] darr)
	{
		int num = darr.Length;
		int num2 = darr[0].Length;
		StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				StdOut.printf("%9.5f ", new object[]
				{
					java.lang.Double.valueOf(darr[i][j])
				});
			}
			StdOut.println();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		92,
		102,
		102,
		127,
		6,
		104,
		104,
		45,
		40,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool[][] readBoolean2D()
	{
		int num = StdIn.readInt();
		int num2 = StdIn.readInt();
		int arg_1A_0 = num;
		int arg_15_0 = num2;
		int[] array = new int[2];
		int num3 = arg_15_0;
		array[1] = num3;
		num3 = arg_1A_0;
		array[0] = num3;
		bool[][] array2 = (bool[][])ByteCodeHelper.multianewarray(typeof(bool[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				array2[i][j] = StdIn.readBoolean();
			}
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		107,
		99,
		101,
		127,
		6,
		102,
		102,
		115,
		10,
		198,
		229,
		59,
		230,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(bool[][] barr)
	{
		int num = barr.Length;
		int num2 = barr[0].Length;
		StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				if (barr[i][j])
				{
					StdOut.print("1 ");
				}
				else
				{
					StdOut.print("0 ");
				}
			}
			StdOut.println();
		}
	}
	[LineNumberTable(63)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdArrayIO()
	{
	}
	[LineNumberTable(new byte[]
	{
		75,
		102,
		103,
		102,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] readInt1D()
	{
		int num = StdIn.readInt();
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = StdIn.readInt();
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		87,
		99,
		102,
		102,
		59,
		166,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(int[] iarr)
	{
		int num = iarr.Length;
		StdOut.println(num);
		for (int i = 0; i < num; i++)
		{
			StdOut.printf("%9d ", new object[]
			{
				Integer.valueOf(iarr[i])
			});
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		100,
		102,
		102,
		127,
		6,
		104,
		104,
		45,
		40,
		232,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[][] readInt2D()
	{
		int num = StdIn.readInt();
		int num2 = StdIn.readInt();
		int arg_1A_0 = num;
		int arg_15_0 = num2;
		int[] array = new int[2];
		int num3 = arg_15_0;
		array[1] = num3;
		num3 = arg_1A_0;
		array[0] = num3;
		int[][] array2 = (int[][])ByteCodeHelper.multianewarray(typeof(int[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				array2[i][j] = StdIn.readInt();
			}
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		115,
		99,
		101,
		127,
		6,
		102,
		102,
		61,
		166,
		229,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(int[][] iarr)
	{
		int num = iarr.Length;
		int num2 = iarr[0].Length;
		StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				StdOut.printf("%9d ", new object[]
				{
					Integer.valueOf(iarr[i][j])
				});
			}
			StdOut.println();
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		67,
		102,
		103,
		102,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool[] readBoolean1D()
	{
		int num = StdIn.readInt();
		bool[] array = new bool[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = StdIn.readBoolean();
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		160,
		79,
		99,
		102,
		102,
		113,
		10,
		198,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(bool[] barr)
	{
		int num = barr.Length;
		StdOut.println(num);
		for (int i = 0; i < num; i++)
		{
			if (barr[i])
			{
				StdOut.print("1 ");
			}
			else
			{
				StdOut.print("0 ");
			}
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		160,
		126,
		102,
		102,
		165,
		102,
		102,
		165,
		102,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double[] darr = StdArrayIO.readDouble1D();
		StdArrayIO.print(darr);
		StdOut.println();
		double[][] darr2 = StdArrayIO.readDouble2D();
		StdArrayIO.print(darr2);
		StdOut.println();
		bool[][] barr = StdArrayIO.readBoolean2D();
		StdArrayIO.print(barr);
		StdOut.println();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.applet;
using java.io;
using java.lang;
using java.net;
using javax.sound.sampled;
using System;
using System.Runtime.CompilerServices;
public sealed class StdAudio : java.lang.Object
{
	public const int SAMPLE_RATE = 44100;
	private const int BYTES_PER_SAMPLE = 2;
	private const int BITS_PER_SAMPLE = 16;
	private const double MAX_16_BIT = 32767.0;
	private const int SAMPLE_BUFFER_SIZE = 4096;
	private static SourceDataLine line;
	private static byte[] buffer;
	private static int bufferSize;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		46,
		120,
		176,
		115,
		117,
		183,
		109,
		119,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void play(double d)
	{
		if (d < -1.0)
		{
			d = -1.0;
		}
		if (d > (double)1f)
		{
			d = (double)1f;
		}
		int num = (int)((short)ByteCodeHelper.d2i(32767.0 * d));
		StdAudio.buffer[StdAudio.bufferSize++] = (byte)((sbyte)num);
		StdAudio.buffer[StdAudio.bufferSize++] = (byte)((sbyte)(num >> 8));
		if (StdAudio.bufferSize >= StdAudio.buffer.Length)
		{
			StdAudio.line.write(StdAudio.buffer, 0, StdAudio.buffer.Length);
			StdAudio.bufferSize = 0;
		}
	}
	[LineNumberTable(new byte[]
	{
		123,
		98,
		194,
		103,
		104,
		103,
		108,
		234,
		69,
		108,
		103,
		108,
		255,
		2,
		70,
		226,
		61,
		98,
		113,
		191,
		6
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static byte[] readByte(string text)
	{
		byte[] array;
		java.lang.Exception ex;
		try
		{
			File file = new File(text);
			if (file.exists())
			{
				AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
				array = new byte[audioInputStream.available()];
				audioInputStream.read(array);
			}
			else
			{
				URL resource = ClassLiteral<StdAudio>.Value.getResource(text);
				AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(resource);
				array = new byte[audioInputStream.available()];
				audioInputStream.read(array);
			}
		}
		catch (System.Exception arg_5C_0)
		{
			java.lang.Exception expr_61 = ByteCodeHelper.MapException<java.lang.Exception>(arg_5C_0, ByteCodeHelper.MapFlags.None);
			if (expr_61 == null)
			{
				throw;
			}
			ex = expr_61;
			goto IL_6C;
		}
		return array;
		IL_6C:
		java.lang.Exception @this = ex;
		System.@out.println(Throwable.instancehelper_getMessage(@this));
		string arg_A4_0 = new StringBuilder().append("Could not read ").append(text).toString();
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_A4_0);
	}
	[LineNumberTable(new byte[]
	{
		160,
		134,
		114,
		105,
		102,
		63,
		6,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static double[] note(double num, double num2, double num3)
	{
		int num4 = ByteCodeHelper.d2i(44100.0 * num2);
		double[] array = new double[num4 + 1];
		for (int i = 0; i <= num4; i++)
		{
			array[i] = num3 * java.lang.Math.sin(6.2831853071795862 * (double)i * num / 44100.0);
		}
		return array;
	}
	[LineNumberTable(new byte[]
	{
		66,
		103,
		40,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void play(double[] darr)
	{
		for (int i = 0; i < darr.Length; i++)
		{
			StdAudio.play(darr[i]);
		}
	}
	[LineNumberTable(new byte[]
	{
		35,
		106,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void close()
	{
		StdAudio.line.drain();
		StdAudio.line.stop();
	}
	[LineNumberTable(new byte[]
	{
		11,
		112,
		140,
		112,
		240,
		69,
		223,
		7,
		226,
		61,
		97,
		112,
		198,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void init()
	{
		java.lang.Exception ex;
		try
		{
			AudioFormat audioFormat = new AudioFormat(44100f, 16, 1, true, false);
			DataLine.Info info = new DataLine.Info(ClassLiteral<SourceDataLine>.Value, audioFormat);
			StdAudio.line = (SourceDataLine)AudioSystem.getLine(info);
			StdAudio.line.open(audioFormat, 8192);
			StdAudio.buffer = new byte[2730];
		}
		catch (System.Exception arg_50_0)
		{
			java.lang.Exception expr_55 = ByteCodeHelper.MapException<java.lang.Exception>(arg_50_0, ByteCodeHelper.MapFlags.None);
			if (expr_55 == null)
			{
				throw;
			}
			ex = expr_55;
			goto IL_5F;
		}
		goto IL_7B;
		IL_5F:
		java.lang.Exception @this = ex;
		System.@out.println(Throwable.instancehelper_getMessage(@this));
		System.exit(1);
		IL_7B:
		StdAudio.line.start();
	}
	[LineNumberTable(51)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdAudio()
	{
	}
	[LineNumberTable(new byte[]
	{
		76,
		103,
		99,
		105,
		104,
		63,
		0,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] read(string str)
	{
		byte[] array = StdAudio.readByte(str);
		int num = array.Length;
		double[] array2 = new double[num / 2];
		for (int i = 0; i < num / 2; i++)
		{
			array2[i] = (double)((short)(((int)array[2 * i + 1] << 8) + (int)array[2 * i])) / 32767.0;
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		92,
		130,
		103,
		159,
		7,
		137,
		127,
		19,
		104,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void play(string str)
	{
		URL uRL = null;
		MalformedURLException ex;
		try
		{
			File file = new File(str);
			if (file.canRead())
			{
				uRL = file.toURI().toURL();
			}
		}
		catch (MalformedURLException arg_22_0)
		{
			ex = ByteCodeHelper.MapException<MalformedURLException>(arg_22_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_2C;
		}
		goto IL_38;
		IL_2C:
		MalformedURLException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		IL_38:
		if (uRL == null)
		{
			string arg_64_0 = new StringBuilder().append("audio ").append(str).append(" not found").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_64_0);
		}
		AudioClip audioClip = Applet.newAudioClip(uRL);
		audioClip.play();
	}
	[LineNumberTable(new byte[]
	{
		108,
		130,
		103,
		159,
		7,
		137,
		127,
		19,
		104,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void loop(string str)
	{
		URL uRL = null;
		MalformedURLException ex;
		try
		{
			File file = new File(str);
			if (file.canRead())
			{
				uRL = file.toURI().toURL();
			}
		}
		catch (MalformedURLException arg_22_0)
		{
			ex = ByteCodeHelper.MapException<MalformedURLException>(arg_22_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_2C;
		}
		goto IL_38;
		IL_2C:
		MalformedURLException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		IL_38:
		if (uRL == null)
		{
			string arg_64_0 = new StringBuilder().append("audio ").append(str).append(" not found").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_64_0);
		}
		AudioClip audioClip = Applet.newAudioClip(uRL);
		audioClip.loop();
	}
	[LineNumberTable(new byte[]
	{
		160,
		96,
		112,
		106,
		103,
		116,
		105,
		235,
		61,
		230,
		72,
		104,
		109,
		122,
		149,
		122,
		181,
		255,
		29,
		70,
		226,
		61,
		98,
		108,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void save(string str, double[] darr)
	{
		AudioFormat format = new AudioFormat(44100f, 16, 1, true, false);
		byte[] array = new byte[2 * darr.Length];
		for (int i = 0; i < darr.Length; i++)
		{
			int num = (int)((short)ByteCodeHelper.d2i(darr[i] * 32767.0));
			array[2 * i + 0] = (byte)((sbyte)num);
			array[2 * i + 1] = (byte)((sbyte)(num >> 8));
		}
		java.lang.Exception ex;
		try
		{
			ByteArrayInputStream stream = new ByteArrayInputStream(array);
			AudioInputStream stream2 = new AudioInputStream(stream, format, (long)darr.Length);
			if (java.lang.String.instancehelper_endsWith(str, ".wav") || java.lang.String.instancehelper_endsWith(str, ".WAV"))
			{
				AudioSystem.write(stream2, AudioFileFormat.Type.WAVE, new File(str));
			}
			else
			{
				if (!java.lang.String.instancehelper_endsWith(str, ".au") && !java.lang.String.instancehelper_endsWith(str, ".AU"))
				{
					string arg_E1_0 = new StringBuilder().append("File format not supported: ").append(str).toString();
					Throwable.__<suppressFillInStackTrace>();
					throw new RuntimeException(arg_E1_0);
				}
				AudioSystem.write(stream2, AudioFileFormat.Type.AU, new File(str));
			}
		}
		catch (System.Exception arg_EA_0)
		{
			java.lang.Exception expr_EF = ByteCodeHelper.MapException<java.lang.Exception>(arg_EA_0, ByteCodeHelper.MapFlags.None);
			if (expr_EF == null)
			{
				throw;
			}
			ex = expr_EF;
			goto IL_FA;
		}
		return;
		IL_FA:
		java.lang.Exception x = ex;
		System.@out.println(x);
		System.exit(1);
	}
	[LineNumberTable(new byte[]
	{
		160,
		147,
		106,
		106,
		63,
		13,
		230,
		69,
		127,
		11,
		103,
		127,
		10,
		26,
		230,
		72,
		165,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double num = 440.0;
		for (int i = 0; i <= 44100; i++)
		{
			StdAudio.play(0.5 * java.lang.Math.sin(6.2831853071795862 * num * (double)i / 44100.0));
		}
		int[] array = new int[]
		{
			0,
			2,
			4,
			5,
			7,
			9,
			11,
			12
		};
		for (int j = 0; j < array.Length; j++)
		{
			double num2 = 440.0 * java.lang.Math.pow(2.0, (double)array[j] / 12.0);
			StdAudio.play(StdAudio.note(num2, (double)1f, 0.5));
		}
		StdAudio.close();
		System.exit(0);
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		230,
		71
	})]
	static StdAudio()
	{
		StdAudio.bufferSize = 0;
		StdAudio.init();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.awt;
using java.awt.@event;
using java.awt.geom;
using java.awt.image;
using java.io;
using java.lang;
using java.net;
using java.util;
using javax.imageio;
using javax.swing;
using System;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.awt.event.ActionListener",
	"java.awt.event.MouseListener",
	"java.awt.event.MouseMotionListener",
	"java.awt.event.KeyListener"
})]
public sealed class StdDraw : java.lang.Object, ActionListener, EventListener, MouseListener, MouseMotionListener, KeyListener
{
	internal static Color __<>BLACK;
	internal static Color __<>BLUE;
	internal static Color __<>CYAN;
	internal static Color __<>DARK_GRAY;
	internal static Color __<>GRAY;
	internal static Color __<>GREEN;
	internal static Color __<>LIGHT_GRAY;
	internal static Color __<>MAGENTA;
	internal static Color __<>ORANGE;
	internal static Color __<>PINK;
	internal static Color __<>RED;
	internal static Color __<>WHITE;
	internal static Color __<>YELLOW;
	internal static Color __<>BOOK_BLUE;
	internal static Color __<>BOOK_LIGHT_BLUE;
	internal static Color __<>BOOK_RED;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_PEN_COLOR;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_CLEAR_COLOR;
	private static Color penColor;
	private const int DEFAULT_SIZE = 512;
	private static int width;
	private static int height;
	private const double DEFAULT_PEN_RADIUS = 0.002;
	private static double penRadius;
	private static bool defer;
	private const double BORDER = 0.05;
	private const double DEFAULT_XMIN = 0.0;
	private const double DEFAULT_XMAX = 1.0;
	private const double DEFAULT_YMIN = 0.0;
	private const double DEFAULT_YMAX = 1.0;
	private static double xmin;
	private static double ymin;
	private static double xmax;
	private static double ymax;
	private static object mouseLock;
	private static object keyLock;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Font DEFAULT_FONT;
	private static Font font;
	private static BufferedImage offscreenImage;
	private static BufferedImage onscreenImage;
	private static Graphics2D offscreen;
	private static Graphics2D onscreen;
	private static StdDraw std;
	private static JFrame frame;
	private static bool mousePressed;
	private static double mouseX;
	private static double mouseY;
	[Signature("Ljava/util/LinkedList<Ljava/lang/Character;>;")]
	private static LinkedList keysTyped;
	[Signature("Ljava/util/TreeSet<Ljava/lang/Integer;>;")]
	private static TreeSet keysDown;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLACK
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>BLACK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLUE
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color CYAN
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>CYAN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color DARK_GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>DARK_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GREEN
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>GREEN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color LIGHT_GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>LIGHT_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color MAGENTA
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>MAGENTA;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color ORANGE
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>ORANGE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color PINK
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>PINK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color RED
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>RED;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color WHITE
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>WHITE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color YELLOW
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>YELLOW;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BOOK_BLUE
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>BOOK_BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BOOK_LIGHT_BLUE
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>BOOK_LIGHT_BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BOOK_RED
	{
		[HideFromJava]
		get
		{
			return StdDraw.__<>BOOK_RED;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(291)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clear()
	{
		StdDraw.clear(StdDraw.DEFAULT_CLEAR_COLOR);
	}
	[LineNumberTable(new byte[]
	{
		162,
		227,
		102,
		101,
		114,
		114,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show(int i)
	{
		StdDraw.defer = false;
		StdDraw.draw();
		try
		{
			Thread.sleep((long)i);
		}
		catch (InterruptedException arg_16_0)
		{
			goto IL_1A;
		}
		goto IL_2F;
		IL_1A:
		System.@out.println("Error sleeping");
		IL_2F:
		StdDraw.defer = true;
	}
	[LineNumberTable(new byte[]
	{
		160,
		130,
		103,
		108,
		116,
		116,
		111
	})]
	public static void setXscale(double d1, double d2)
	{
		double num = d2 - d1;
		lock (StdDraw.mouseLock)
		{
			StdDraw.xmin = d1 - 0.05 * num;
			StdDraw.xmax = d2 + 0.05 * num;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		143,
		103,
		108,
		116,
		116,
		111
	})]
	public static void setYscale(double d1, double d2)
	{
		double num = d2 - d1;
		lock (StdDraw.mouseLock)
		{
			StdDraw.ymin = d1 - 0.05 * num;
			StdDraw.ymax = d2 + 0.05 * num;
		}
	}
	[LineNumberTable(new byte[]
	{
		161,
		199,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void rectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		160,
		229,
		102,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenColor(Color c)
	{
		StdDraw.penColor = c;
		StdDraw.offscreen.setColor(StdDraw.penColor);
	}
	[LineNumberTable(new byte[]
	{
		161,
		79,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void filledCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		39,
		105,
		105,
		102,
		237,
		69,
		115,
		159,
		10,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void point(double d1, double d2)
	{
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.penRadius;
		float num4 = (float)(num3 * 512.0);
		if (num4 <= 1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.fill(new Ellipse2D.Double(num - (double)(num4 / 2f), num2 - (double)(num4 / 2f), (double)num4, (double)num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		20,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void line(double d1, double d2, double d3, double d4)
	{
		StdDraw.offscreen.draw(new Line2D.Double(StdDraw.scaleX(d1), StdDraw.scaleY(d2), StdDraw.scaleX(d3), StdDraw.scaleY(d4)));
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		112,
		120,
		102,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCanvasSize(int i1, int i2)
	{
		if (i1 < 1 || i2 < 1)
		{
			string arg_12_0 = "width and height must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_12_0);
		}
		StdDraw.width = i1;
		StdDraw.height = i2;
		StdDraw.init();
	}
	[LineNumberTable(new byte[]
	{
		160,
		204,
		121,
		104,
		110,
		137,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenRadius(double d)
	{
		if (d < (double)0f)
		{
			string arg_13_0 = "pen radius must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		StdDraw.penRadius = d;
		float num = (float)(d * 512.0);
		BasicStroke stroke = new BasicStroke(num, 1, 1);
		StdDraw.offscreen.setStroke(stroke);
	}
	[LineNumberTable(311)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenRadius()
	{
		StdDraw.setPenRadius(0.002);
	}
	[LineNumberTable(new byte[]
	{
		120,
		114,
		106,
		122,
		122,
		111,
		111,
		101,
		101,
		111,
		118,
		101,
		101,
		101,
		165,
		149,
		113,
		171,
		112,
		135,
		107,
		139,
		107,
		111,
		107,
		139,
		111,
		111,
		106,
		107,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void init()
	{
		if (StdDraw.frame != null)
		{
			StdDraw.frame.setVisible(false);
		}
		StdDraw.frame = new JFrame();
		BufferedImage.__<clinit>();
		StdDraw.offscreenImage = new BufferedImage(StdDraw.width, StdDraw.height, 2);
		BufferedImage.__<clinit>();
		StdDraw.onscreenImage = new BufferedImage(StdDraw.width, StdDraw.height, 2);
		StdDraw.offscreen = StdDraw.offscreenImage.createGraphics();
		StdDraw.onscreen = StdDraw.onscreenImage.createGraphics();
		StdDraw.setXscale();
		StdDraw.setYscale();
		StdDraw.offscreen.setColor(StdDraw.DEFAULT_CLEAR_COLOR);
		StdDraw.offscreen.fillRect(0, 0, StdDraw.width, StdDraw.height);
		StdDraw.setPenColor();
		StdDraw.setPenRadius();
		StdDraw.setFont();
		StdDraw.clear();
		RenderingHints.__<clinit>();
		RenderingHints renderingHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		renderingHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		StdDraw.offscreen.addRenderingHints(renderingHints);
		ImageIcon.__<clinit>();
		ImageIcon image = new ImageIcon(StdDraw.onscreenImage);
		JLabel jLabel = new JLabel(image);
		jLabel.addMouseListener(StdDraw.std);
		jLabel.addMouseMotionListener(StdDraw.std);
		StdDraw.frame.setContentPane(jLabel);
		StdDraw.frame.addKeyListener(StdDraw.std);
		StdDraw.frame.setResizable(false);
		StdDraw.frame.setDefaultCloseOperation(3);
		StdDraw.frame.setTitle("Standard Draw");
		StdDraw.frame.setJMenuBar(StdDraw.createMenuBar());
		StdDraw.frame.pack();
		StdDraw.frame.requestFocusInWindow();
		StdDraw.frame.setVisible(true);
	}
	[LineNumberTable(231)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setXscale()
	{
		StdDraw.setXscale((double)0f, (double)1f);
	}
	[LineNumberTable(236)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setYscale()
	{
		StdDraw.setYscale((double)0f, (double)1f);
	}
	[LineNumberTable(334)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenColor()
	{
		StdDraw.setPenColor(StdDraw.DEFAULT_PEN_COLOR);
	}
	[LineNumberTable(369)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setFont()
	{
		StdDraw.setFont(StdDraw.DEFAULT_FONT);
	}
	[LineNumberTable(new byte[]
	{
		160,
		98,
		102,
		107,
		104,
		107,
		107,
		151,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static JMenuBar createMenuBar()
	{
		JMenuBar jMenuBar = new JMenuBar();
		JMenu jMenu = new JMenu("File");
		jMenuBar.add(jMenu);
		JMenuItem jMenuItem = new JMenuItem(" Save...   ");
		jMenuItem.addActionListener(StdDraw.std);
		jMenuItem.setAccelerator(KeyStroke.getKeyStroke(83, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		jMenu.add(jMenuItem);
		return jMenuBar;
	}
	[LineNumberTable(new byte[]
	{
		160,
		183,
		107,
		118,
		111,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clear(Color c)
	{
		StdDraw.offscreen.setColor(c);
		StdDraw.offscreen.fillRect(0, 0, StdDraw.width, StdDraw.height);
		StdDraw.offscreen.setColor(StdDraw.penColor);
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		247,
		104,
		115,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void draw()
	{
		if (StdDraw.defer)
		{
			return;
		}
		StdDraw.onscreen.drawImage(StdDraw.offscreenImage, 0, 0, null);
		StdDraw.frame.repaint();
	}
	public static void setFont(Font f)
	{
		StdDraw.font = f;
	}
	private static double scaleX(double num)
	{
		return (double)StdDraw.width * (num - StdDraw.xmin) / (StdDraw.xmax - StdDraw.xmin);
	}
	private static double scaleY(double num)
	{
		return (double)StdDraw.height * (StdDraw.ymax - num) / (StdDraw.ymax - StdDraw.ymin);
	}
	[LineNumberTable(new byte[]
	{
		161,
		30,
		127,
		9
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void pixel(double num, double num2)
	{
		StdDraw.offscreen.fillRect((int)java.lang.Math.round(StdDraw.scaleX(num)), (int)java.lang.Math.round(StdDraw.scaleY(num2)), 1, 1);
	}
	[LineNumberTable(282)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static double factorX(double num)
	{
		return num * (double)StdDraw.width / java.lang.Math.abs(StdDraw.xmax - StdDraw.xmin);
	}
	[LineNumberTable(283)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static double factorY(double num)
	{
		return num * (double)StdDraw.height / java.lang.Math.abs(StdDraw.ymax - StdDraw.ymin);
	}
	[LineNumberTable(new byte[]
	{
		162,
		17,
		167,
		140,
		103,
		124,
		195,
		108,
		108,
		127,
		19,
		167
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Image getImage(string text)
	{
		ImageIcon imageIcon = new ImageIcon(text);
		if (imageIcon != null)
		{
			if (imageIcon.getImageLoadStatus() == 8)
			{
				goto IL_39;
			}
		}
		try
		{
			URL uRL = new URL(text);
			imageIcon = new ImageIcon(uRL);
		}
		catch (System.Exception arg_26_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_26_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		IL_39:
		if (imageIcon == null || imageIcon.getImageLoadStatus() != 8)
		{
			URL uRL = ClassLiteral<StdDraw>.Value.getResource(text);
			if (uRL == null)
			{
				string arg_7D_0 = new StringBuilder().append("image ").append(text).append(" not found").toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_7D_0);
			}
			imageIcon = new ImageIcon(uRL);
		}
		return imageIcon.getImage();
	}
	[LineNumberTable(new byte[]
	{
		162,
		152,
		111,
		107,
		105,
		105,
		104,
		104,
		127,
		1,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void text(double d1, double d2, string str)
	{
		StdDraw.offscreen.setFont(StdDraw.font);
		FontMetrics fontMetrics = StdDraw.offscreen.getFontMetrics();
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		StdDraw.offscreen.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		163,
		6,
		103,
		177,
		114,
		127,
		0,
		241,
		69,
		117,
		140,
		127,
		10,
		113,
		223,
		9,
		109,
		126,
		107,
		162,
		159,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void save(string str)
	{
		File output = new File(str);
		string text = java.lang.String.instancehelper_substring(str, java.lang.String.instancehelper_lastIndexOf(str, 46) + 1);
		if (java.lang.String.instancehelper_equals(java.lang.String.instancehelper_toLowerCase(text), "png"))
		{
			IOException ex;
			try
			{
				ImageIO.write(StdDraw.onscreenImage, text, output);
			}
			catch (IOException arg_3C_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_3C_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_46;
			}
			return;
			IL_46:
			IOException @this = ex;
			Throwable.instancehelper_printStackTrace(@this);
		}
		else if (java.lang.String.instancehelper_equals(java.lang.String.instancehelper_toLowerCase(text), "jpg"))
		{
			WritableRaster raster = StdDraw.onscreenImage.getRaster();
			WritableRaster raster2 = raster.createWritableChild(0, 0, StdDraw.width, StdDraw.height, 0, 0, new int[]
			{
				0,
				1,
				2
			});
			DirectColorModel directColorModel = (DirectColorModel)StdDraw.onscreenImage.getColorModel();
			DirectColorModel.__<clinit>();
			DirectColorModel cm = new DirectColorModel(directColorModel.getPixelSize(), directColorModel.getRedMask(), directColorModel.getGreenMask(), directColorModel.getBlueMask());
			BufferedImage im = new BufferedImage(cm, raster2, false, null);
			IOException ex2;
			try
			{
				ImageIO.write(im, text, output);
			}
			catch (IOException arg_F9_0)
			{
				ex2 = ByteCodeHelper.MapException<IOException>(arg_F9_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_104;
			}
			goto IL_113;
			IL_104:
			IOException this2 = ex2;
			Throwable.instancehelper_printStackTrace(this2);
			IL_113:;
		}
		else
		{
			System.@out.println(new StringBuilder().append("Invalid image file type: ").append(text).toString());
		}
	}
	private static double userX(double num)
	{
		return StdDraw.xmin + num * (StdDraw.xmax - StdDraw.xmin) / (double)StdDraw.width;
	}
	private static double userY(double num)
	{
		return StdDraw.ymax - num * (StdDraw.ymax - StdDraw.ymin) / (double)StdDraw.height;
	}
	[LineNumberTable(new byte[]
	{
		161,
		161,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void square(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		179,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void filledSquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		61,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void circle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		142,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		21,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void arc(double d1, double d2, double d3, double d4, double d5)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "arc radius must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		while (d5 < d4)
		{
			d5 += 360.0;
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.draw(new Arc2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4, d4, d5 - d4, 0));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		253,
		99,
		102,
		120,
		102,
		56,
		134,
		102,
		107,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void filledPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo((float)StdDraw.scaleX(darr1[0]), (float)StdDraw.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo((float)StdDraw.scaleX(darr1[i]), (float)StdDraw.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw.offscreen.fill(generalPath);
		StdDraw.draw();
	}
	[LineNumberTable(139)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdDraw()
	{
	}
	[LineNumberTable(new byte[]
	{
		100,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCanvasSize()
	{
		StdDraw.setCanvasSize(512, 512);
	}
	[LineNumberTable(new byte[]
	{
		160,
		156,
		103,
		108,
		116,
		116,
		116,
		116,
		111
	})]
	public static void setScale(double d1, double d2)
	{
		double num = d2 - d1;
		lock (StdDraw.mouseLock)
		{
			StdDraw.xmin = d1 - 0.05 * num;
			StdDraw.xmax = d2 + 0.05 * num;
			StdDraw.ymin = d1 - 0.05 * num;
			StdDraw.ymax = d2 + 0.05 * num;
		}
	}
	public static double getPenRadius()
	{
		return StdDraw.penRadius;
	}
	public static Color getPenColor()
	{
		return StdDraw.penColor;
	}
	[LineNumberTable(new byte[]
	{
		160,
		241,
		124,
		124,
		124,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenColor(int i1, int i2, int i3)
	{
		if (i1 < 0 || i1 >= 256)
		{
			string arg_16_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_16_0);
		}
		if (i2 < 0 || i2 >= 256)
		{
			string arg_32_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_32_0);
		}
		if (i3 < 0 || i3 >= 256)
		{
			string arg_4E_0 = "amount of red must be between 0 and 255";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_4E_0);
		}
		StdDraw.setPenColor(new Color(i1, i2, i3));
	}
	public static Font getFont()
	{
		return StdDraw.font;
	}
	[LineNumberTable(new byte[]
	{
		161,
		99,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void ellipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		119,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void filledEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		219,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		12,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void filledRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height must be nonnegative";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2C_0);
		}
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(2.0 * d3);
		double num4 = StdDraw.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		161,
		237,
		99,
		102,
		120,
		102,
		56,
		134,
		102,
		107,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void polygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo((float)StdDraw.scaleX(darr1[0]), (float)StdDraw.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo((float)StdDraw.scaleX(darr1[i]), (float)StdDraw.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw.offscreen.draw(generalPath);
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		45,
		103,
		105,
		105,
		104,
		105,
		159,
		25,
		127,
		23,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void picture(double d1, double d2, string str)
	{
		Image image = StdDraw.getImage(str);
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_5C_0);
		}
		StdDraw.offscreen.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		66,
		103,
		105,
		105,
		104,
		105,
		159,
		25,
		116,
		127,
		23,
		147,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void picture(double d1, double d2, string str, double d3)
	{
		Image image = StdDraw.getImage(str);
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_5C_0);
		}
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(-d3), num, num2);
		StdDraw.offscreen.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(d3), num, num2);
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		91,
		103,
		105,
		105,
		127,
		16,
		127,
		18,
		105,
		107,
		127,
		33,
		156,
		255,
		36,
		69,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void picture(double d1, double d2, string str, double d3, double d4)
	{
		Image image = StdDraw.getImage(str);
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		if (d3 < (double)0f)
		{
			string arg_42_0 = new StringBuilder().append("width is negative: ").append(d3).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_42_0);
		}
		if (d4 < (double)0f)
		{
			string arg_73_0 = new StringBuilder().append("height is negative: ").append(d4).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_73_0);
		}
		double num3 = StdDraw.factorX(d3);
		double num4 = StdDraw.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_C7_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_C7_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		else
		{
			StdDraw.offscreen.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		}
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		122,
		103,
		105,
		105,
		105,
		107,
		127,
		33,
		154,
		117,
		223,
		36,
		148,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void picture(double d1, double d2, string str, double d3, double d4, double d5)
	{
		Image image = StdDraw.getImage(str);
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		double num3 = StdDraw.factorX(d3);
		double num4 = StdDraw.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_67_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_67_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw.pixel(d1, d2);
		}
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(-d5), num, num2);
		StdDraw.offscreen.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(d5), num, num2);
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		171,
		105,
		105,
		116,
		106,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void text(double d1, double d2, string str, double d3)
	{
		double d4 = StdDraw.scaleX(d1);
		double d5 = StdDraw.scaleY(d2);
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(-d3), d4, d5);
		StdDraw.text(d1, d2, str);
		StdDraw.offscreen.rotate(java.lang.Math.toRadians(d3), d4, d5);
	}
	[LineNumberTable(new byte[]
	{
		162,
		186,
		111,
		107,
		105,
		105,
		103,
		114,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void textLeft(double d1, double d2, string str)
	{
		StdDraw.offscreen.setFont(StdDraw.font);
		FontMetrics fontMetrics = StdDraw.offscreen.getFontMetrics();
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		int descent = fontMetrics.getDescent();
		StdDraw.offscreen.drawString(str, (float)num, (float)(num2 + (double)descent));
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		202,
		111,
		107,
		105,
		105,
		104,
		104,
		118,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void textRight(double d1, double d2, string str)
	{
		StdDraw.offscreen.setFont(StdDraw.font);
		FontMetrics fontMetrics = StdDraw.offscreen.getFontMetrics();
		double num = StdDraw.scaleX(d1);
		double num2 = StdDraw.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		StdDraw.offscreen.drawString(str, (float)(num - (double)num3), (float)(num2 + (double)descent));
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		162,
		241,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show()
	{
		StdDraw.defer = false;
		StdDraw.draw();
	}
	[LineNumberTable(new byte[]
	{
		163,
		41,
		118,
		103,
		103,
		99,
		159,
		18
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void actionPerformed(ActionEvent ae)
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw.frame, "Use a .png or .jpg extension", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			StdDraw.save(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		59,
		108,
		107
	})]
	public static bool mousePressed()
	{
		int result;
		lock (StdDraw.mouseLock)
		{
			result = (StdDraw.mousePressed ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		69,
		108,
		107
	})]
	public static double mouseX()
	{
		double result;
		lock (StdDraw.mouseLock)
		{
			result = StdDraw.mouseX;
		}
		return result;
	}
	[LineNumberTable(new byte[]
	{
		163,
		79,
		108,
		107
	})]
	public static double mouseY()
	{
		double result;
		lock (StdDraw.mouseLock)
		{
			result = StdDraw.mouseY;
		}
		return result;
	}
	public virtual void mouseClicked(MouseEvent me)
	{
	}
	public virtual void mouseEntered(MouseEvent me)
	{
	}
	public virtual void mouseExited(MouseEvent me)
	{
	}
	[LineNumberTable(new byte[]
	{
		163,
		104,
		108,
		114,
		114,
		102,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mousePressed(MouseEvent me)
	{
		lock (StdDraw.mouseLock)
		{
			StdDraw.mouseX = StdDraw.userX((double)me.getX());
			StdDraw.mouseY = StdDraw.userY((double)me.getY());
			StdDraw.mousePressed = true;
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		115,
		108,
		102,
		111
	})]
	public virtual void mouseReleased(MouseEvent me)
	{
		lock (StdDraw.mouseLock)
		{
			StdDraw.mousePressed = false;
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		124,
		108,
		114,
		114,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseDragged(MouseEvent me)
	{
		lock (StdDraw.mouseLock)
		{
			StdDraw.mouseX = StdDraw.userX((double)me.getX());
			StdDraw.mouseY = StdDraw.userY((double)me.getY());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		134,
		108,
		114,
		114,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseMoved(MouseEvent me)
	{
		lock (StdDraw.mouseLock)
		{
			StdDraw.mouseX = StdDraw.userX((double)me.getX());
			StdDraw.mouseY = StdDraw.userY((double)me.getY());
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		150,
		108,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool hasNextKeyTyped()
	{
		int result;
		lock (StdDraw.keyLock)
		{
			result = (StdDraw.keysTyped.IsEmpty ? 0 : 1);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		163,
		108,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static char nextKeyTyped()
	{
		int result;
		lock (StdDraw.keyLock)
		{
			result = (int)((Character)StdDraw.keysTyped.removeLast()).charValue();
		}
		return (char)result;
	}
	[LineNumberTable(new byte[]
	{
		163,
		177,
		108,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool isKeyPressed(int i)
	{
		int result;
		lock (StdDraw.keyLock)
		{
			result = (StdDraw.keysDown.contains(Integer.valueOf(i)) ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		163,
		187,
		108,
		117,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyTyped(KeyEvent ke)
	{
		lock (StdDraw.keyLock)
		{
			StdDraw.keysTyped.addFirst(Character.valueOf(ke.getKeyChar()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		196,
		108,
		118,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyPressed(KeyEvent ke)
	{
		lock (StdDraw.keyLock)
		{
			StdDraw.keysDown.add(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		205,
		108,
		118,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyReleased(KeyEvent ke)
	{
		lock (StdDraw.keyLock)
		{
			StdDraw.keysDown.remove(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		217,
		127,
		1,
		127,
		1,
		159,
		1,
		106,
		110,
		191,
		19,
		101,
		106,
		127,
		24,
		127,
		24,
		167,
		106,
		124,
		106,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		StdDraw.square(0.2, 0.8, 0.1);
		StdDraw.filledSquare(0.8, 0.8, 0.2);
		StdDraw.circle(0.8, 0.2, 0.2);
		StdDraw.setPenColor(StdDraw.__<>BOOK_RED);
		StdDraw.setPenRadius(0.02);
		StdDraw.arc(0.8, 0.2, 0.1, 200.0, 45.0);
		StdDraw.setPenRadius();
		StdDraw.setPenColor(StdDraw.__<>BOOK_BLUE);
		double[] darr = new double[]
		{
			0.1,
			0.2,
			0.3,
			0.2
		};
		double[] darr2 = new double[]
		{
			0.2,
			0.3,
			0.2,
			0.1
		};
		StdDraw.filledPolygon(darr, darr2);
		StdDraw.setPenColor(StdDraw.__<>BLACK);
		StdDraw.text(0.2, 0.5, "black text");
		StdDraw.setPenColor(StdDraw.__<>WHITE);
		StdDraw.text(0.8, 0.8, "white text");
	}
	[LineNumberTable(new byte[]
	{
		0,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		234,
		70,
		115,
		246,
		70,
		179,
		106,
		234,
		71,
		106,
		234,
		73,
		230,
		75,
		106,
		170,
		242,
		74,
		234,
		70,
		102,
		107,
		171,
		170,
		234,
		72
	})]
	static StdDraw()
	{
		StdDraw.__<>BLACK = Color.BLACK;
		StdDraw.__<>BLUE = Color.BLUE;
		StdDraw.__<>CYAN = Color.CYAN;
		StdDraw.__<>DARK_GRAY = Color.DARK_GRAY;
		StdDraw.__<>GRAY = Color.GRAY;
		StdDraw.__<>GREEN = Color.GREEN;
		StdDraw.__<>LIGHT_GRAY = Color.LIGHT_GRAY;
		StdDraw.__<>MAGENTA = Color.MAGENTA;
		StdDraw.__<>ORANGE = Color.ORANGE;
		StdDraw.__<>PINK = Color.PINK;
		StdDraw.__<>RED = Color.RED;
		StdDraw.__<>WHITE = Color.WHITE;
		StdDraw.__<>YELLOW = Color.YELLOW;
		StdDraw.__<>BOOK_BLUE = new Color(9, 90, 166);
		StdDraw.__<>BOOK_LIGHT_BLUE = new Color(103, 198, 243);
		StdDraw.__<>BOOK_RED = new Color(150, 35, 31);
		StdDraw.DEFAULT_PEN_COLOR = StdDraw.__<>BLACK;
		StdDraw.DEFAULT_CLEAR_COLOR = StdDraw.__<>WHITE;
		StdDraw.width = 512;
		StdDraw.height = 512;
		StdDraw.defer = false;
		StdDraw.mouseLock = new java.lang.Object();
		StdDraw.keyLock = new java.lang.Object();
		StdDraw.DEFAULT_FONT = new Font("SansSerif", 0, 16);
		StdDraw.std = new StdDraw();
		StdDraw.mousePressed = false;
		StdDraw.mouseX = (double)0f;
		StdDraw.mouseY = (double)0f;
		StdDraw.keysTyped = new LinkedList();
		StdDraw.keysDown = new TreeSet();
		StdDraw.init();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.awt;
using java.awt.@event;
using java.awt.geom;
using java.awt.image;
using java.io;
using java.lang;
using java.net;
using java.text;
using java.util;
using javax.swing;
using javax.swing.@event;
using System;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.awt.event.MouseListener",
	"java.awt.event.MouseMotionListener",
	"java.awt.event.MouseWheelListener",
	"java.awt.event.KeyListener",
	"java.awt.event.ActionListener",
	"javax.swing.event.ChangeListener",
	"java.awt.event.ComponentListener",
	"java.awt.event.WindowFocusListener"
})]
public sealed class StdDraw3D : java.lang.Object, MouseListener, EventListener, MouseMotionListener, MouseWheelListener, KeyListener, ActionListener, ChangeListener, ComponentListener, WindowFocusListener
{
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Camera : StdDraw3D.Transformable
	{
		private object tg;
		private StdDraw3D.Shape pair;
		[LineNumberTable(new byte[]
		{
			155,
			173,
			177,
			108,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Camera(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Camera).TypeHandle, "javax.media.j3d.TransformGroup");
			object obj2 = null;
			base..ctor(obj, obj2);
			this.tg = obj;
		}
		[LineNumberTable(new byte[]
		{
			175,
			50,
			105,
			105,
			137,
			112,
			110,
			111,
			124,
			110,
			116
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotateFPS(double d1, double d2, double d3)
		{
			double d4 = java.lang.Math.toRadians(d1);
			double num = java.lang.Math.toRadians(d2);
			double d5 = java.lang.Math.toRadians(d3);
			StdDraw3D.Vector3D sddvd = StdDraw3D.Transformable.access$2300(this, new StdDraw3D.Vector3D(-num, d4, d5));
			StdDraw3D.Vector3D vector3D = base.getDirection().plus(sddvd);
			double num2 = vector3D.angle(StdDraw3D.access$1500());
			if (num2 > 90.0)
			{
				num2 = 180.0 - num2;
			}
			if (num2 < 5.0)
			{
				return;
			}
			base.setDirection(base.getDirection().plus(sddvd));
		}
		[LineNumberTable(new byte[]
		{
			175,
			26,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access$1900(this, sdds);
		}
		public virtual void pair(StdDraw3D.Shape sdds)
		{
			this.pair = sdds;
		}
		public virtual void unpair()
		{
			this.pair = null;
		}
		[LineNumberTable(3992)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			StdDraw3D.access$2000();
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
		[LineNumberTable(new byte[]
		{
			175,
			45,
			122
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotateFPS(StdDraw3D.Vector3D sddvd)
		{
			this.rotateFPS(sddvd.__<>x, sddvd.__<>y, sddvd.__<>z);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Camera(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Camera).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Camera).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		[LineNumberTable(3969), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static StdDraw3D.Shape access$200(StdDraw3D.Camera camera)
		{
			return camera.pair;
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Light : StdDraw3D.Transformable
	{
		internal object light;
		internal object bg;
		[LineNumberTable(4119), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Light(object obj, object obj2, object obj3, object obj4)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.Light");
			ByteCodeHelper.DynamicCast(obj4, typeof(StdDraw3D.Light).TypeHandle, "StdDraw3D$1");
			this..ctor(obj, obj2, obj3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
		[LineNumberTable(new byte[]
		{
			175,
			198,
			151,
			158,
			118,
			235,
			71,
			145
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void scalePower(double d)
		{
			if (ByteCodeHelper.DynamicInstanceOf(this.light, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.PointLight"))
			{
				double arg_34_0 = (double)1f / (0.999 * d + 0.001);
				ByteCodeHelper.DynamicCast(this.light, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.PointLight");
				throw new NoClassDefFoundError("javax.vecmath.Point3f");
			}
			System.err.println("Can only scale power for point lights!");
		}
		[LineNumberTable(new byte[]
		{
			155,
			135,
			127,
			20,
			108,
			103,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Light(object obj, object obj2, object obj3)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Light).TypeHandle, "javax.media.j3d.Light");
			object obj4 = null;
			base..ctor(obj2, obj4);
			this.light = obj3;
			this.bg = obj;
		}
		[LineNumberTable(4131)]
		public virtual void hide()
		{
			this.light;
			0;
			throw new NoClassDefFoundError("javax.media.j3d.Light");
		}
		[LineNumberTable(4135)]
		public virtual void unhide()
		{
			this.light;
			1;
			throw new NoClassDefFoundError("javax.media.j3d.Light");
		}
		[LineNumberTable(new byte[]
		{
			175,
			185,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access$1900(this, sdds);
		}
		[LineNumberTable(new byte[]
		{
			175,
			189,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void match(StdDraw3D.Camera sddc)
		{
			StdDraw3D.Transformable.access$1900(this, sddc);
		}
		[LineNumberTable(4147)]
		public virtual void setColor(Color c)
		{
			this.light;
			throw new NoClassDefFoundError("javax.vecmath.Color3f");
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			base.moveRelative(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
		[LineNumberTable(4119), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Shape : StdDraw3D.Transformable
	{
		private object bg;
		private object tg;
		[LineNumberTable(4025), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Shape(object obj, object obj2, object obj3)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D.Shape).TypeHandle, "StdDraw3D$1");
			this..ctor(obj, obj2);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateAxis(StdDraw3D.Vector3D sddvd, double d)
		{
			base.rotateAxis(sddvd, d);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$900(StdDraw3D.Shape shape)
		{
			return shape.bg;
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$1000(StdDraw3D.Shape shape)
		{
			return shape.tg;
		}
		[LineNumberTable(new byte[]
		{
			175,
			85,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void scale(double d)
		{
			object obj = StdDraw3D.Transformable.access$2400(this);
			obj;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(double d1, double d2, double d3)
		{
			base.move(d1, d2, d3);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(double d1, double d2, double d3)
		{
			base.rotate(d1, d2, d3);
		}
		[LineNumberTable(new byte[]
		{
			155,
			159,
			191,
			3,
			108,
			103,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Shape(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.BranchGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.TransformGroup");
			object obj3 = null;
			base..ctor(obj2, obj3);
			this.bg = obj;
			this.tg = obj2;
			obj2;
			17;
			throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
		}
		[LineNumberTable(4057)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void hide()
		{
			StdDraw3D.access$2600();
			this.bg;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
		[LineNumberTable(4083)]
		private void setColor(object obj, Color color)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.Group");
			int num = 0;
			num;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Group");
		}
		[LineNumberTable(new byte[]
		{
			175,
			121,
			113
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setColor(Color c)
		{
			this.setColor(this.tg, c);
		}
		[LineNumberTable(4100)]
		private void setColor(object obj, Color color)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Shape).TypeHandle, "javax.media.j3d.Appearance");
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Appearance");
		}
		[LineNumberTable(new byte[]
		{
			175,
			108,
			102
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void unhide()
		{
			this.hide();
			StdDraw3D.access$2600();
			this.bg;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
		[LineNumberTable(new byte[]
		{
			175,
			113,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void match(StdDraw3D.Shape sdds)
		{
			StdDraw3D.Transformable.access$1900(this, sdds);
		}
		[LineNumberTable(new byte[]
		{
			175,
			117,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void match(StdDraw3D.Camera sddc)
		{
			StdDraw3D.Transformable.access$1900(this, sddc);
		}
		[LineNumberTable(new byte[]
		{
			175,
			125,
			127,
			6
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setColor(Color c, int i)
		{
			Color.__<clinit>();
			this.setColor(new Color(c.getRed(), c.getGreen(), c.getBlue(), i));
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getDirection()
		{
			return base.getDirection();
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.setDirection(sddvd1, sddvd2);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setDirection(StdDraw3D.Vector3D sddvd)
		{
			base.setDirection(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
		{
			base.lookAt(sddvd1, sddvd2);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void lookAt(StdDraw3D.Vector3D sddvd)
		{
			base.lookAt(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getOrientation()
		{
			return base.getOrientation();
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(StdDraw3D.Vector3D sddvd)
		{
			base.setOrientation(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setOrientation(double d1, double d2, double d3)
		{
			base.setOrientation(d1, d2, d3);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(StdDraw3D.Vector3D sddvd)
		{
			base.rotateRelative(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotateRelative(double d1, double d2, double d3)
		{
			base.rotateRelative(d1, d2, d3);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void rotate(StdDraw3D.Vector3D sddvd)
		{
			base.rotate(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override StdDraw3D.Vector3D getPosition()
		{
			return base.getPosition();
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(StdDraw3D.Vector3D sddvd)
		{
			base.setPosition(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void setPosition(double d1, double d2, double d3)
		{
			base.setPosition(d1, d2, d3);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(StdDraw3D.Vector3D sddvd)
		{
			base.moveRelative(sddvd);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void moveRelative(double d1, double d2, double d3)
		{
			base.moveRelative(d1, d2, d3);
		}
		[LineNumberTable(4025), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void move(StdDraw3D.Vector3D sddvd)
		{
			base.move(sddvd);
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), SourceFile("StdDraw3D.java")]
	internal class Transformable : java.lang.Object
	{
		private object tg;
		[LineNumberTable(3623)]
		private void setTransform(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.Transform3D");
			this.tg;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
		}
		[LineNumberTable(3617)]
		private object getTransform()
		{
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			173,
			185,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private StdDraw3D.Vector3D relToAbs(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		[LineNumberTable(new byte[]
		{
			174,
			205,
			108,
			110
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void match(StdDraw3D.Transformable transformable)
		{
			this.setOrientation(transformable.getOrientation());
			this.setPosition(transformable.getPosition());
		}
		[LineNumberTable(new byte[]
		{
			156,
			7,
			81,
			104,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Transformable(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.TransformGroup");
			base..ctor();
			this.tg = obj;
		}
		[LineNumberTable(new byte[]
		{
			155,
			252,
			145,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void rotateQuat(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.vecmath.Quat4d");
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			155,
			248,
			81,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void setQuaternion(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.vecmath.Quat4d");
			object transform = this.getTransform();
			transform;
			obj;
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			173,
			198,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private StdDraw3D.Vector3D absToRel(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		[LineNumberTable(new byte[]
		{
			174,
			25,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void move(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Vector3f");
		}
		[LineNumberTable(new byte[]
		{
			174,
			40,
			127,
			8
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void moveRelative(StdDraw3D.Vector3D vector3D)
		{
			this.move(this.relToAbs(vector3D.times((double)1f, (double)1f, -1.0)));
		}
		[LineNumberTable(new byte[]
		{
			174,
			48,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setPosition(StdDraw3D.Vector3D vector3D)
		{
			object transform = this.getTransform();
			transform;
			StdDraw3D.access$1100(vector3D);
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			174,
			67,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotate(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			174,
			94,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotateRelative(StdDraw3D.Vector3D vector3D)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			174,
			117,
			118,
			143,
			135,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setOrientation(StdDraw3D.Vector3D vector3D)
		{
			if (java.lang.Math.abs(vector3D.__<>y) == 90.0)
			{
				System.err.println("Gimbal lock when the y-angle is vertical!");
			}
			this.getTransform();
			vector3D.times(0.017453292519943295);
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			174,
			168,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void lookAt(StdDraw3D.Vector3D vector3D, StdDraw3D.Vector3D vector3D2)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.media.j3d.Transform3D");
		}
		[LineNumberTable(new byte[]
		{
			174,
			196,
			109,
			106
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setDirection(StdDraw3D.Vector3D sddvd, StdDraw3D.Vector3D vector3D)
		{
			StdDraw3D.Vector3D vector3D2 = this.getPosition().plus(sddvd);
			this.lookAt(vector3D2, vector3D);
		}
		[LineNumberTable(new byte[]
		{
			174,
			56,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D getPosition()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Vector3d");
		}
		[LineNumberTable(new byte[]
		{
			174,
			134,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D getOrientation()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		[LineNumberTable(3654)]
		private void rotateQuat(double num, double num2, double num3, double num4)
		{
			this;
			throw new NoClassDefFoundError("javax.vecmath.Quat4d");
		}
		[LineNumberTable(3668)]
		private void setQuaternion(double num, double num2, double num3, double num4)
		{
			this;
			throw new NoClassDefFoundError("javax.vecmath.Quat4d");
		}
		[LineNumberTable(new byte[]
		{
			173,
			238,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private object getQuaternion()
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.Matrix3d");
		}
		[LineNumberTable(new byte[]
		{
			173,
			255,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void orientAxis(StdDraw3D.Vector3D vector3D, double num)
		{
			this.getTransform();
			throw new NoClassDefFoundError("javax.vecmath.AxisAngle4d");
		}
		[LineNumberTable(new byte[]
		{
			174,
			8,
			106,
			135,
			104
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotateAxis(StdDraw3D.Vector3D vector3D, double num)
		{
			if (num == (double)0f)
			{
				return;
			}
			this.getTransform();
			this.absToRel(vector3D);
			throw new NoClassDefFoundError("javax.vecmath.AxisAngle4d");
		}
		[LineNumberTable(new byte[]
		{
			174,
			21,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void move(double num, double num2, double num3)
		{
			this.move(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			36,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void moveRelative(double num, double num2, double num3)
		{
			this.moveRelative(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			44,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setPosition(double num, double num2, double num3)
		{
			this.setPosition(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			63,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotate(double num, double num2, double num3)
		{
			this.rotate(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			90,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void rotateRelative(double num, double num2, double num3)
		{
			this.rotateRelative(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			113,
			115
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setOrientation(double num, double num2, double num3)
		{
			this.setOrientation(new StdDraw3D.Vector3D(num, num2, num3));
		}
		[LineNumberTable(new byte[]
		{
			174,
			164,
			110
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void lookAt(StdDraw3D.Vector3D vector3D)
		{
			this.lookAt(vector3D, StdDraw3D.access$1500());
		}
		[LineNumberTable(new byte[]
		{
			174,
			192,
			110
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void setDirection(StdDraw3D.Vector3D vector3D)
		{
			this.setDirection(vector3D, StdDraw3D.access$1500());
		}
		[LineNumberTable(3899)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D getDirection()
		{
			return this.relToAbs(StdDraw3D.access$1600().times(-1.0)).direction();
		}
		[LineNumberTable(3608), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Transformable(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.TransformGroup");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Transformable).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void access$1900(StdDraw3D.Transformable transformable, StdDraw3D.Transformable transformable2)
		{
			transformable.match(transformable2);
		}
		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static StdDraw3D.Vector3D access$2300(StdDraw3D.Transformable transformable, StdDraw3D.Vector3D vector3D)
		{
			return transformable.relToAbs(vector3D);
		}
		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static object access$2400(StdDraw3D.Transformable transformable)
		{
			return transformable.getTransform();
		}
		[LineNumberTable(3608), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void access$2500(StdDraw3D.Transformable transformable, object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Transformable).TypeHandle, "javax.media.j3d.Transform3D");
			transformable.setTransform(obj);
		}
	}
	[InnerClass(null, Modifiers.Public | Modifiers.Static), SourceFile("StdDraw3D.java")]
	public class Vector3D : java.lang.Object
	{
		internal double __<>x;
		internal double __<>y;
		internal double __<>z;
		[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double x
		{
			[HideFromJava]
			get
			{
				return this.__<>x;
			}
			[HideFromJava]
			private set
			{
				this.__<>x = value;
			}
		}
		[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double y
		{
			[HideFromJava]
			get
			{
				return this.__<>y;
			}
			[HideFromJava]
			private set
			{
				this.__<>y = value;
			}
		}
		[Modifiers(Modifiers.Public | Modifiers.Final)]
		public double z
		{
			[HideFromJava]
			get
			{
				return this.__<>z;
			}
			[HideFromJava]
			private set
			{
				this.__<>z = value;
			}
		}
		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3f");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		[LineNumberTable(new byte[]
		{
			175,
			254,
			136,
			105,
			105,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Vector3D(double d1, double d2, double d3)
		{
			this.__<>x = d1;
			this.__<>y = d2;
			this.__<>z = d3;
		}
		[LineNumberTable(new byte[]
		{
			176,
			187,
			107,
			107,
			107,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D times(double d1, double d2, double d3)
		{
			double d4 = this.__<>x * d1;
			double d5 = this.__<>y * d2;
			double d6 = this.__<>z * d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3d");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		[LineNumberTable(4382)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D times(double d)
		{
			return this.times(d, d, d);
		}
		[LineNumberTable(new byte[]
		{
			176,
			125,
			111,
			111,
			111,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D plus(StdDraw3D.Vector3D sddvd)
		{
			double d = this.__<>x + sddvd.__<>x;
			double d2 = this.__<>y + sddvd.__<>y;
			double d3 = this.__<>z + sddvd.__<>z;
			return new StdDraw3D.Vector3D(d, d2, d3);
		}
		[LineNumberTable(new byte[]
		{
			176,
			203,
			125
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D direction()
		{
			if (this.mag() == (double)0f)
			{
				string arg_17_0 = "Zero-vector has no direction";
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_17_0);
			}
			return this.times((double)1f / this.mag());
		}
		[LineNumberTable(4310)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual double angle(StdDraw3D.Vector3D sddvd)
		{
			return java.lang.Math.toDegrees(java.lang.Math.acos(this.dot(sddvd) / (this.mag() * sddvd.mag())));
		}
		[LineNumberTable(4176), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Vector3D(object obj, object obj2)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3d");
			ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D.Vector3D).TypeHandle, "StdDraw3D$1");
			this..ctor(obj);
		}
		[LineNumberTable(4299)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual double mag()
		{
			return java.lang.Math.sqrt(this.dot(this));
		}
		[LineNumberTable(new byte[]
		{
			176,
			231,
			98,
			130
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D cross(StdDraw3D.Vector3D sddvd)
		{
			return new StdDraw3D.Vector3D(this.__<>y * sddvd.__<>z - this.__<>z * sddvd.__<>y, this.__<>z * sddvd.__<>x - this.__<>x * sddvd.__<>z, this.__<>x * sddvd.__<>y - this.__<>y * sddvd.__<>x);
		}
		[LineNumberTable(new byte[]
		{
			155,
			108,
			113,
			136
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3d");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Vector3d");
		}
		[LineNumberTable(new byte[]
		{
			155,
			106,
			145,
			136
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Vector3f");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Vector3f");
		}
		[LineNumberTable(new byte[]
		{
			155,
			104,
			177,
			136
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3d");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Point3d");
		}
		[LineNumberTable(4287)]
		public virtual double dot(StdDraw3D.Vector3D sddvd)
		{
			return this.__<>x * sddvd.__<>x + this.__<>y * sddvd.__<>y + this.__<>z * sddvd.__<>z;
		}
		[LineNumberTable(new byte[]
		{
			176,
			148,
			111,
			111,
			111,
			105
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D minus(StdDraw3D.Vector3D sddvd)
		{
			double d = this.__<>x - sddvd.__<>x;
			double d2 = this.__<>y - sddvd.__<>y;
			double d3 = this.__<>z - sddvd.__<>z;
			return new StdDraw3D.Vector3D(d, d2, d3);
		}
		[LineNumberTable(new byte[]
		{
			176,
			217,
			135
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D proj(StdDraw3D.Vector3D sddvd)
		{
			StdDraw3D.Vector3D vector3D = sddvd.direction();
			return vector3D.times(this.dot(vector3D));
		}
		[LineNumberTable(new byte[]
		{
			175,
			238,
			136,
			108,
			108,
			108
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Vector3D()
		{
			this.__<>x = (double)0f;
			this.__<>y = (double)0f;
			this.__<>z = (double)0f;
		}
		[LineNumberTable(new byte[]
		{
			176,
			12,
			136,
			101,
			112,
			106,
			106,
			106
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Vector3D(double[] darr)
		{
			if (darr.Length != 3)
			{
				string arg_17_0 = "Incorrect number of dimensions!";
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_17_0);
			}
			this.__<>x = darr[0];
			this.__<>y = darr[1];
			this.__<>z = darr[2];
		}
		[LineNumberTable(new byte[]
		{
			155,
			101,
			113,
			136
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Vector3D(object obj)
		{
			ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D.Vector3D).TypeHandle, "javax.vecmath.Point3f");
			base..ctor();
			this;
			obj;
			throw new NoClassDefFoundError("javax.vecmath.Point3f");
		}
		[LineNumberTable(4322)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual double distanceTo(StdDraw3D.Vector3D sddvd)
		{
			return this.minus(sddvd).mag();
		}
		[LineNumberTable(new byte[]
		{
			176,
			133,
			107,
			107,
			107
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D plus(double d1, double d2, double d3)
		{
			double d4 = this.__<>x + d1;
			double d5 = this.__<>y + d2;
			double d6 = this.__<>z + d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
		[LineNumberTable(new byte[]
		{
			176,
			156,
			107,
			107,
			107
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D minus(double d1, double d2, double d3)
		{
			double d4 = this.__<>x - d1;
			double d5 = this.__<>y - d2;
			double d6 = this.__<>z - d3;
			return new StdDraw3D.Vector3D(d4, d5, d6);
		}
		[LineNumberTable(4457)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual StdDraw3D.Vector3D reflect(StdDraw3D.Vector3D sddvd)
		{
			return this.proj(sddvd).times(2.0).minus(this);
		}
		[LineNumberTable(new byte[]
		{
			177,
			3,
			107
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string toString()
		{
			DecimalFormat decimalFormat = new DecimalFormat("0.000000");
			return new StringBuilder().append("( ").append(decimalFormat.format(this.__<>x)).append(", ").append(decimalFormat.format(this.__<>y)).append(", ").append(decimalFormat.format(this.__<>z)).append(" )").toString();
		}
		[LineNumberTable(new byte[]
		{
			177,
			14,
			127,
			2
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual void draw()
		{
			StdDraw3D.sphere(this.__<>x, this.__<>y, this.__<>z, 0.01);
		}
	}
	internal static Color __<>BLACK;
	internal static Color __<>BLUE;
	internal static Color __<>CYAN;
	internal static Color __<>DARK_GRAY;
	internal static Color __<>GRAY;
	internal static Color __<>GREEN;
	internal static Color __<>LIGHT_GRAY;
	internal static Color __<>MAGENTA;
	internal static Color __<>ORANGE;
	internal static Color __<>PINK;
	internal static Color __<>RED;
	internal static Color __<>WHITE;
	internal static Color __<>YELLOW;
	public const int ORBIT_MODE = 0;
	public const int FPS_MODE = 1;
	public const int AIRPLANE_MODE = 2;
	public const int LOOK_MODE = 3;
	public const int FIXED_MODE = 4;
	public const int IMMERSIVE_MODE = 5;
	private static JFrame frame;
	private static Panel canvasPanel;
	private static JMenuBar menuBar;
	private static JMenu fileMenu;
	private static JMenu cameraMenu;
	private static JMenu graphicsMenu;
	private static JMenuItem loadButton;
	private static JMenuItem saveButton;
	private static JMenuItem save3DButton;
	private static JMenuItem quitButton;
	private static JSpinner fovSpinner;
	private static JRadioButtonMenuItem orbitModeButton;
	private static JRadioButtonMenuItem fpsModeButton;
	private static JRadioButtonMenuItem airplaneModeButton;
	private static JRadioButtonMenuItem lookModeButton;
	private static JRadioButtonMenuItem fixedModeButton;
	private static JRadioButtonMenuItem perspectiveButton;
	private static JRadioButtonMenuItem parallelButton;
	private static JCheckBoxMenuItem antiAliasingButton;
	private static JSpinner numDivSpinner;
	private static JCheckBox infoCheckBox;
	private static object universe;
	private static object rootGroup;
	private static object lightGroup;
	private static object soundGroup;
	private static object fogGroup;
	private static object appearanceGroup;
	private static object onscreenGroup;
	private static object offscreenGroup;
	private static object orbit;
	private static object background;
	private static object bgGroup;
	private static object view;
	private static object canvas;
	private static StdDraw3D.Camera camera;
	private static BufferedImage offscreenImage;
	private static BufferedImage onscreenImage;
	private static BufferedImage infoImage;
	private static int width;
	private static int height;
	private static double aspectRatio;
	private static int cameraMode;
	private static object orbitCenter;
	private static double min;
	private static double max;
	private static double zoom;
	private static Color bgColor;
	private static Color penColor;
	private static float penRadius;
	private static Font font;
	private static bool clear3D;
	private static bool clearOverlay;
	private static bool infoDisplay;
	private static int numDivisions;
	private static bool mouse1;
	private static bool mouse2;
	private static bool mouse3;
	private static double mouseX;
	private static double mouseY;
	[Signature("Ljava/util/TreeSet<Ljava/lang/Integer;>;")]
	private static TreeSet keysDown;
	[Signature("Ljava/util/LinkedList<Ljava/lang/Character;>;")]
	private static LinkedList keysTyped;
	private static object mouseLock;
	private static object keyLock;
	private static bool initialized;
	private static bool fullscreen;
	private static bool immersive;
	private static bool showedOnce;
	private static bool renderedOnce;
	private const int DEFAULT_SIZE = 600;
	private const double DEFAULT_MIN = 0.0;
	private const double DEFAULT_MAX = 1.0;
	private const int DEFAULT_CAMERA_MODE = 0;
	private const double DEFAULT_FOV = 0.9;
	private const int DEFAULT_NUM_DIVISIONS = 100;
	private const double DEFAULT_FRONT_CLIP = 0.01;
	private const double DEFAULT_BACK_CLIP = 10.0;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Font DEFAULT_FONT;
	private const double DEFAULT_PEN_RADIUS = 0.002;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_PEN_COLOR;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Color DEFAULT_BGCOLOR;
	private const double TEXT3D_SHRINK_FACTOR = 0.005;
	private const double TEXT3D_DEPTH = 1.5;
	private const int PRIMFLAGS = 3;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static object INFINITE_BOUNDS;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D xAxis;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D yAxis;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static StdDraw3D.Vector3D zAxis;
	private static StdDraw3D std;
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLACK
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>BLACK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color BLUE
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>BLUE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color CYAN
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>CYAN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color DARK_GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>DARK_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color GREEN
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>GREEN;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color LIGHT_GRAY
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>LIGHT_GRAY;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color MAGENTA
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>MAGENTA;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color ORANGE
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>ORANGE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color PINK
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>PINK;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color RED
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>RED;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color WHITE
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>WHITE;
		}
	}
	[Modifiers(Modifiers.Public | Modifiers.Static | Modifiers.Final)]
	public static Color YELLOW
	{
		[HideFromJava]
		get
		{
			return StdDraw3D.__<>YELLOW;
		}
	}
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	internal static object access$1100(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3f(vector3D);
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access$1400()
	{
		return StdDraw3D.xAxis;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access$1500()
	{
		return StdDraw3D.yAxis;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Vector3D access$1600()
	{
		return StdDraw3D.zAxis;
	}
	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	internal static object access$1700(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3d(vector3D);
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access$2000()
	{
		return StdDraw3D.view;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$2100()
	{
		return StdDraw3D.zoom;
	}
	[LineNumberTable(56), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	internal static void access$2200(double num)
	{
		StdDraw3D.setScreenScale(num);
	}
	[LineNumberTable(1360)]
	private static void setScreenScale(double num)
	{
		num;
		StdDraw3D.view;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	[LineNumberTable(872)]
	private static object createVector3d(StdDraw3D.Vector3D vector3D)
	{
		throw new NoClassDefFoundError("javax.vecmath.Vector3d");
	}
	[LineNumberTable(882)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static object createVector3f(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createVector3f(vector3D.__<>x, vector3D.__<>y, vector3D.__<>z);
	}
	[LineNumberTable(867)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static BufferedImage createBufferedImage()
	{
		BufferedImage.__<clinit>();
		return new BufferedImage(StdDraw3D.width, StdDraw3D.height, 2);
	}
	[LineNumberTable(new byte[]
	{
		160,
		235,
		134,
		102,
		134,
		103,
		103,
		103,
		103,
		135
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void initializeCanvas()
	{
		Panel panel = new Panel();
		GridBagLayout layout = new GridBagLayout();
		GridBagConstraints gridBagConstraints = new GridBagConstraints();
		panel.setLayout(layout);
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 5;
		gridBagConstraints.gridheight = 5;
		throw new NoClassDefFoundError("com.sun.j3d.utils.universe.SimpleUniverse");
	}
	[LineNumberTable(new byte[]
	{
		161,
		59,
		138,
		111,
		144,
		111,
		111,
		155,
		144,
		111,
		111,
		155,
		144,
		111,
		111,
		219,
		138,
		111,
		111,
		155,
		144,
		111,
		144,
		107,
		107,
		107,
		108,
		138,
		134,
		143,
		107,
		107,
		112,
		111,
		187,
		143,
		107,
		112,
		111,
		187,
		143,
		107,
		112,
		111,
		187,
		143,
		107,
		112,
		111,
		187,
		143,
		107,
		112,
		111,
		187,
		106,
		107,
		107,
		107,
		108,
		138,
		127,
		11,
		107,
		103,
		111,
		108,
		117,
		106,
		117,
		141,
		103,
		111,
		143,
		143,
		143,
		143,
		112,
		112,
		141,
		108,
		108,
		139,
		207,
		108,
		108,
		108,
		109,
		138,
		144,
		140,
		103,
		111,
		108,
		116,
		106,
		117,
		109,
		141,
		143,
		106,
		108,
		108,
		108,
		109,
		138,
		111,
		107,
		143,
		144,
		111,
		107,
		111,
		120,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static JMenuBar createMenuBar()
	{
		StdDraw3D.menuBar = new JMenuBar();
		StdDraw3D.fileMenu = new JMenu("File");
		StdDraw3D.menuBar.add(StdDraw3D.fileMenu);
		StdDraw3D.loadButton = new JMenuItem(" Load 3D Model..  ");
		StdDraw3D.loadButton.addActionListener(StdDraw3D.std);
		StdDraw3D.loadButton.setAccelerator(KeyStroke.getKeyStroke(76, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.loadButton);
		StdDraw3D.saveButton = new JMenuItem(" Save Image...  ");
		StdDraw3D.saveButton.addActionListener(StdDraw3D.std);
		StdDraw3D.saveButton.setAccelerator(KeyStroke.getKeyStroke(83, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.saveButton);
		StdDraw3D.save3DButton = new JMenuItem(" Export 3D Scene...  ");
		StdDraw3D.save3DButton.addActionListener(StdDraw3D.std);
		StdDraw3D.save3DButton.setAccelerator(KeyStroke.getKeyStroke(69, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.addSeparator();
		StdDraw3D.quitButton = new JMenuItem(" Quit...   ");
		StdDraw3D.quitButton.addActionListener(StdDraw3D.std);
		StdDraw3D.quitButton.setAccelerator(KeyStroke.getKeyStroke(81, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fileMenu.add(StdDraw3D.quitButton);
		StdDraw3D.cameraMenu = new JMenu("Camera");
		StdDraw3D.menuBar.add(StdDraw3D.cameraMenu);
		JLabel jLabel = new JLabel("Camera Mode");
		jLabel.setAlignmentX(0.5f);
		jLabel.setForeground(StdDraw3D.__<>GRAY);
		StdDraw3D.cameraMenu.add(jLabel);
		StdDraw3D.cameraMenu.addSeparator();
		ButtonGroup buttonGroup = new ButtonGroup();
		StdDraw3D.orbitModeButton = new JRadioButtonMenuItem("Orbit Mode");
		StdDraw3D.orbitModeButton.setSelected(true);
		buttonGroup.add(StdDraw3D.orbitModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.orbitModeButton);
		StdDraw3D.orbitModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.orbitModeButton.setAccelerator(KeyStroke.getKeyStroke(49, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fpsModeButton = new JRadioButtonMenuItem("First-Person Mode");
		buttonGroup.add(StdDraw3D.fpsModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.fpsModeButton);
		StdDraw3D.fpsModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.fpsModeButton.setAccelerator(KeyStroke.getKeyStroke(50, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.airplaneModeButton = new JRadioButtonMenuItem("Airplane Mode");
		buttonGroup.add(StdDraw3D.airplaneModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.airplaneModeButton);
		StdDraw3D.airplaneModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.airplaneModeButton.setAccelerator(KeyStroke.getKeyStroke(51, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.lookModeButton = new JRadioButtonMenuItem("Look Mode");
		buttonGroup.add(StdDraw3D.lookModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.lookModeButton);
		StdDraw3D.lookModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.lookModeButton.setAccelerator(KeyStroke.getKeyStroke(52, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.fixedModeButton = new JRadioButtonMenuItem("Fixed Mode");
		buttonGroup.add(StdDraw3D.fixedModeButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.fixedModeButton);
		StdDraw3D.fixedModeButton.addActionListener(StdDraw3D.std);
		StdDraw3D.fixedModeButton.setAccelerator(KeyStroke.getKeyStroke(53, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		StdDraw3D.cameraMenu.addSeparator();
		JLabel jLabel2 = new JLabel("Projection Mode");
		jLabel2.setAlignmentX(0.5f);
		jLabel2.setForeground(StdDraw3D.__<>GRAY);
		StdDraw3D.cameraMenu.add(jLabel2);
		StdDraw3D.cameraMenu.addSeparator();
		SpinnerNumberModel model = new SpinnerNumberModel(0.9, 0.5, 3.0, 0.05);
		StdDraw3D.fovSpinner = new JSpinner(model);
		JPanel jPanel = new JPanel();
		jPanel.setLayout(new BoxLayout(jPanel, 0));
		JLabel comp = new JLabel("Field of View:");
		jPanel.add(Box.createRigidArea(new Dimension(30, 5)));
		jPanel.add(comp);
		jPanel.add(Box.createRigidArea(new Dimension(10, 5)));
		jPanel.add(StdDraw3D.fovSpinner);
		ButtonGroup buttonGroup2 = new ButtonGroup();
		StdDraw3D.perspectiveButton = new JRadioButtonMenuItem("Perspective Projection");
		StdDraw3D.parallelButton = new JRadioButtonMenuItem("Parallel Projection");
		StdDraw3D.fovSpinner.addChangeListener(StdDraw3D.std);
		StdDraw3D.perspectiveButton.addActionListener(StdDraw3D.std);
		StdDraw3D.parallelButton.addActionListener(StdDraw3D.std);
		StdDraw3D.cameraMenu.add(StdDraw3D.parallelButton);
		StdDraw3D.cameraMenu.add(StdDraw3D.perspectiveButton);
		StdDraw3D.cameraMenu.add(jPanel);
		buttonGroup2.add(StdDraw3D.parallelButton);
		buttonGroup2.add(StdDraw3D.perspectiveButton);
		StdDraw3D.perspectiveButton.setSelected(true);
		StdDraw3D.graphicsMenu = new JMenu("Graphics");
		JLabel jLabel3 = new JLabel("Polygon Count");
		jLabel3.setAlignmentX(0.5f);
		jLabel3.setForeground(StdDraw3D.__<>GRAY);
		StdDraw3D.graphicsMenu.add(jLabel3);
		StdDraw3D.graphicsMenu.addSeparator();
		SpinnerNumberModel model2 = new SpinnerNumberModel(100, 4, 4000, 5);
		StdDraw3D.numDivSpinner = new JSpinner(model2);
		JPanel jPanel2 = new JPanel();
		jPanel2.setLayout(new BoxLayout(jPanel2, 0));
		JLabel comp2 = new JLabel("Triangles:");
		jPanel2.add(Box.createRigidArea(new Dimension(5, 5)));
		jPanel2.add(comp2);
		jPanel2.add(Box.createRigidArea(new Dimension(15, 5)));
		jPanel2.add(StdDraw3D.numDivSpinner);
		StdDraw3D.graphicsMenu.add(jPanel2);
		StdDraw3D.numDivSpinner.addChangeListener(StdDraw3D.std);
		StdDraw3D.graphicsMenu.addSeparator();
		JLabel jLabel4 = new JLabel("Advanced Rendering");
		jLabel4.setAlignmentX(0.5f);
		jLabel4.setForeground(StdDraw3D.__<>GRAY);
		StdDraw3D.graphicsMenu.add(jLabel4);
		StdDraw3D.graphicsMenu.addSeparator();
		StdDraw3D.antiAliasingButton = new JCheckBoxMenuItem("Enable Anti-Aliasing");
		StdDraw3D.antiAliasingButton.setSelected(false);
		StdDraw3D.antiAliasingButton.addActionListener(StdDraw3D.std);
		StdDraw3D.graphicsMenu.add(StdDraw3D.antiAliasingButton);
		StdDraw3D.infoCheckBox = new JCheckBox("Show Info Display");
		StdDraw3D.infoCheckBox.setFocusable(false);
		StdDraw3D.infoCheckBox.addActionListener(StdDraw3D.std);
		StdDraw3D.menuBar.add(Box.createRigidArea(new Dimension(50, 5)));
		StdDraw3D.menuBar.add(StdDraw3D.infoCheckBox);
		return StdDraw3D.menuBar;
	}
	[LineNumberTable(681)]
	private static object createBranchGroup()
	{
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(new byte[]
	{
		166,
		230,
		101,
		127,
		7,
		127,
		7,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setDefaultLight()
	{
		StdDraw3D.clearLight();
		StdDraw3D.directionalLight(-4.0, 7.0, 12.0, StdDraw3D.__<>LIGHT_GRAY);
		StdDraw3D.directionalLight(4.0, -7.0, -12.0, StdDraw3D.__<>WHITE);
		StdDraw3D.ambientLight(new Color(0.1f, 0.1f, 0.1f));
	}
	[LineNumberTable(1164)]
	public static void setAntiAliasing(bool b)
	{
		StdDraw3D.view;
		b;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	[LineNumberTable(new byte[]
	{
		158,
		73,
		177,
		102
	})]
	private static void setOrbitCenter(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Point3d");
		StdDraw3D.orbitCenter = obj;
		StdDraw3D.orbit;
		StdDraw3D.orbitCenter;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	[LineNumberTable(new byte[]
	{
		164,
		179,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPerspectiveProjection()
	{
		StdDraw3D.setPerspectiveProjection(0.9);
	}
	[LineNumberTable(1286)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraMode()
	{
		StdDraw3D.setCameraMode(0);
	}
	public static void setPenColor()
	{
		StdDraw3D.penColor = StdDraw3D.DEFAULT_PEN_COLOR;
	}
	[LineNumberTable(1093)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenRadius()
	{
		StdDraw3D.setPenRadius(0.002);
	}
	public static void setFont()
	{
		StdDraw3D.font = StdDraw3D.DEFAULT_FONT;
	}
	[LineNumberTable(958)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setScale()
	{
		StdDraw3D.setScale((double)0f, (double)1f);
	}
	[LineNumberTable(new byte[]
	{
		158,
		116,
		98,
		102,
		107,
		121,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setInfoDisplay(bool b)
	{
		StdDraw3D.infoDisplay = b;
		StdDraw3D.infoCheckBox.setSelected(b);
		StdDraw3D.camera.move((double)0f, (double)0f, (double)0f);
		StdDraw3D.infoDisplay();
	}
	[LineNumberTable(new byte[]
	{
		166,
		67,
		109,
		134,
		245,
		73
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setBackground(Color c)
	{
		if (!c.equals(StdDraw3D.bgColor))
		{
			StdDraw3D.bgColor = c;
			StdDraw3D.rootGroup;
			StdDraw3D.bgGroup;
			throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
		}
	}
	[LineNumberTable(1331)]
	public static void setPerspectiveProjection(double d)
	{
		StdDraw3D.view;
		1;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	[LineNumberTable(new byte[]
	{
		166,
		33,
		118,
		103,
		135,
		99,
		191,
		16,
		117,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void saveAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Use a .png or .jpg extension.", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			StdDraw3D.save(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(83));
	}
	[LineNumberTable(new byte[]
	{
		166,
		21,
		118,
		103,
		127,
		2,
		135,
		117,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void loadAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Pick a .obj or .ply file to load.", 0);
		fileDialog.setVisible(true);
		string str = new StringBuilder().append(fileDialog.getDirectory()).append(fileDialog.getFile()).toString();
		StdDraw3D.model(str);
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(76));
	}
	[LineNumberTable(new byte[]
	{
		166,
		7,
		118,
		103,
		103,
		99,
		191,
		16,
		117,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void save3DAction()
	{
		FileDialog.__<clinit>();
		FileDialog fileDialog = new FileDialog(StdDraw3D.frame, "Save as a 3D file for loading later.", 1);
		fileDialog.setVisible(true);
		string file = fileDialog.getFile();
		if (file != null)
		{
			StdDraw3D.saveScene3D(new StringBuilder().append(fileDialog.getDirectory()).append(File.separator).append(fileDialog.getFile()).toString());
		}
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(69));
	}
	[LineNumberTable(new byte[]
	{
		166,
		48,
		117,
		144,
		117,
		114,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void quitAction()
	{
		WindowEvent.__<clinit>();
		WindowEvent theEvent = new WindowEvent(StdDraw3D.frame, 201);
		Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(theEvent);
		StdDraw3D.keysDown.remove(Integer.valueOf(157));
		StdDraw3D.keysDown.remove(Integer.valueOf(17));
		StdDraw3D.keysDown.remove(Integer.valueOf(81));
	}
	[LineNumberTable(new byte[]
	{
		164,
		104,
		134,
		103,
		241,
		71
	})]
	public static void setCameraMode(int i)
	{
		StdDraw3D.cameraMode = i;
		if (StdDraw3D.cameraMode == 0)
		{
			StdDraw3D.orbit;
			1;
			throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
		}
		StdDraw3D.orbit;
		0;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	[LineNumberTable(1351)]
	public static void setParallelProjection()
	{
		StdDraw3D.view;
		throw new NoClassDefFoundError("javax.media.j3d.View");
	}
	[LineNumberTable(744)]
	private static object createBlankAppearance()
	{
		throw new NoClassDefFoundError("javax.media.j3d.Appearance");
	}
	[LineNumberTable(new byte[]
	{
		162,
		104,
		122,
		97
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static object createTexture(string str)
	{
		try
		{
			throw new NoClassDefFoundError("com.sun.j3d.utils.image.TextureLoader");
		}
		catch (System.Exception arg_0C_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_0C_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		string arg_44_0 = new StringBuilder().append("Could not read from the file '").append(str).append("'").toString();
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_44_0);
	}
	[LineNumberTable(877)]
	private static object createVector3f(double num, double num2, double num3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Vector3f");
	}
	[LineNumberTable(892)]
	private static object createPoint3f(double num, double num2, double num3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	[LineNumberTable(new byte[]
	{
		158,
		162,
		98,
		134,
		120,
		102,
		134,
		115,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void setCanvasSize(int num, int num2, bool flag)
	{
		StdDraw3D.fullscreen = flag;
		if (num < 1 || num2 < 1)
		{
			string arg_1A_0 = "Dimensions must be positive integers!";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_1A_0);
		}
		StdDraw3D.width = num;
		StdDraw3D.height = num2;
		StdDraw3D.aspectRatio = (double)StdDraw3D.width / (double)StdDraw3D.height;
		StdDraw3D.initialize();
	}
	[LineNumberTable(new byte[]
	{
		160,
		138,
		135,
		106,
		106,
		138,
		133,
		114,
		106,
		107,
		111,
		107,
		111,
		112,
		111,
		111,
		143,
		138,
		106,
		106,
		106,
		106,
		106,
		138,
		106,
		138
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void initialize()
	{
		StdDraw3D.numDivisions = 100;
		StdDraw3D.onscreenImage = StdDraw3D.createBufferedImage();
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
		StdDraw3D.infoImage = StdDraw3D.createBufferedImage();
		StdDraw3D.initializeCanvas();
		if (StdDraw3D.frame != null)
		{
			StdDraw3D.frame.setVisible(false);
		}
		StdDraw3D.frame = new JFrame();
		StdDraw3D.frame.setVisible(false);
		StdDraw3D.frame.setResizable(StdDraw3D.fullscreen);
		StdDraw3D.frame.setDefaultCloseOperation(3);
		StdDraw3D.frame.setTitle("Standard Draw 3D");
		StdDraw3D.frame.add(StdDraw3D.canvasPanel);
		StdDraw3D.frame.setJMenuBar(StdDraw3D.createMenuBar());
		StdDraw3D.frame.addComponentListener(StdDraw3D.std);
		StdDraw3D.frame.addWindowFocusListener(StdDraw3D.std);
		StdDraw3D.frame.pack();
		StdDraw3D.rootGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.lightGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.bgGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.soundGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.fogGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.appearanceGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.onscreenGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.offscreenGroup = StdDraw3D.createBranchGroup();
		StdDraw3D.rootGroup;
		StdDraw3D.onscreenGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(new byte[]
	{
		163,
		86,
		104,
		104,
		123,
		173,
		159,
		11,
		145
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setScale(double d1, double d2)
	{
		StdDraw3D.min = d1;
		StdDraw3D.max = d2;
		StdDraw3D.zoom = (StdDraw3D.max - StdDraw3D.min) / 2.0;
		double num = StdDraw3D.min + StdDraw3D.zoom;
		StdDraw3D.camera.setPosition(num, num, StdDraw3D.zoom * (2.0 + java.lang.Math.sqrt(2.0)));
		double num2 = 0.5 * StdDraw3D.zoom;
		StdDraw3D.orbit;
		num2;
		throw new NoClassDefFoundError("com.sun.j3d.utils.behaviors.vp.OrbitBehavior");
	}
	public static void setPenColor(Color c)
	{
		StdDraw3D.penColor = c;
	}
	public static void setPenRadius(double d)
	{
		StdDraw3D.penRadius = (float)d * 500f;
	}
	[LineNumberTable(new byte[]
	{
		172,
		231,
		103,
		106,
		161,
		102,
		108,
		115,
		178,
		119,
		102,
		145,
		140,
		108,
		127,
		78,
		107,
		127,
		6,
		107,
		159,
		6,
		108,
		127,
		78,
		107,
		127,
		6,
		107,
		191,
		6,
		112,
		113,
		113,
		113,
		113,
		144,
		107,
		108,
		107,
		140,
		110,
		127,
		27,
		159,
		27,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void infoDisplay()
	{
		if (!StdDraw3D.infoDisplay)
		{
			StdDraw3D.infoImage = StdDraw3D.createBufferedImage();
			return;
		}
		BufferedImage bufferedImage = StdDraw3D.createBufferedImage();
		Graphics2D graphics2D = (Graphics2D)bufferedImage.getGraphics();
		graphics2D.setFont(new Font("Courier", 0, 11));
		graphics2D.setStroke(new BasicStroke(1f, 1, 1));
		double num = (StdDraw3D.min + StdDraw3D.max) / 2.0;
		double arg_65_0 = StdDraw3D.zoom;
		double num2 = StdDraw3D.zoom * 0.10000000149011612;
		DecimalFormat decimalFormat = new DecimalFormat(" 0.000;-0.000");
		StdDraw3D.Vector3D position = StdDraw3D.camera.getPosition();
		string str = new StringBuilder().append("(").append(decimalFormat.format(position.__<>x)).append(",").append(decimalFormat.format(position.__<>y)).append(",").append(decimalFormat.format(position.__<>z)).append(")").toString();
		graphics2D.setColor(StdDraw3D.__<>BLACK);
		graphics2D.drawString(new StringBuilder().append("Position: ").append(str).toString(), 21, 26);
		graphics2D.setColor(StdDraw3D.__<>LIGHT_GRAY);
		graphics2D.drawString(new StringBuilder().append("Position: ").append(str).toString(), 20, 25);
		StdDraw3D.Vector3D orientation = StdDraw3D.camera.getOrientation();
		string str2 = new StringBuilder().append("(").append(decimalFormat.format(orientation.__<>x)).append(",").append(decimalFormat.format(orientation.__<>y)).append(",").append(decimalFormat.format(orientation.__<>z)).append(")").toString();
		graphics2D.setColor(StdDraw3D.__<>BLACK);
		graphics2D.drawString(new StringBuilder().append("Rotation: ").append(str2).toString(), 21, 41);
		graphics2D.setColor(StdDraw3D.__<>LIGHT_GRAY);
		graphics2D.drawString(new StringBuilder().append("Rotation: ").append(str2).toString(), 20, 40);
		string str3;
		if (StdDraw3D.cameraMode == 0)
		{
			str3 = "Camera: ORBIT_MODE";
		}
		else if (StdDraw3D.cameraMode == 1)
		{
			str3 = "Camera: FPS_MODE";
		}
		else if (StdDraw3D.cameraMode == 2)
		{
			str3 = "Camera: AIRPLANE_MODE";
		}
		else if (StdDraw3D.cameraMode == 3)
		{
			str3 = "Camera: LOOK_MODE";
		}
		else
		{
			if (StdDraw3D.cameraMode != 4)
			{
				string arg_293_0 = "Unknown camera mode!";
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_293_0);
			}
			str3 = "Camera: FIXED_MODE";
		}
		graphics2D.setColor(StdDraw3D.__<>BLACK);
		graphics2D.drawString(str3, 21, 56);
		graphics2D.setColor(StdDraw3D.__<>LIGHT_GRAY);
		graphics2D.drawString(str3, 20, 55);
		double num3 = num2 / 4.0;
		graphics2D.draw(new Line2D.Double((double)StdDraw3D.scaleX(num3 + num), (double)StdDraw3D.scaleY((double)0f + num), (double)StdDraw3D.scaleX(-num3 + num), (double)StdDraw3D.scaleY((double)0f + num)));
		graphics2D.draw(new Line2D.Double((double)StdDraw3D.scaleX((double)0f + num), (double)StdDraw3D.scaleY(num3 + num), (double)StdDraw3D.scaleX((double)0f + num), (double)StdDraw3D.scaleY(-num3 + num)));
		StdDraw3D.infoImage = bufferedImage;
	}
	[LineNumberTable(new byte[]
	{
		164,
		243,
		108,
		107
	})]
	public static bool mouse1Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse1 ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		164,
		252,
		108,
		107
	})]
	public static bool mouse2Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse2 ? 1 : 0);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		165,
		5,
		108,
		107
	})]
	public static bool mouse3Pressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = (StdDraw3D.mouse3 ? 1 : 0);
		}
		return result != 0;
	}
	private static double unscaleX(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)1f / StdDraw3D.aspectRatio;
		}
		return (num * (2.0 * StdDraw3D.zoom) / (double)StdDraw3D.width + StdDraw3D.min) / num2;
	}
	private static double unscaleY(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = StdDraw3D.aspectRatio;
		}
		return (StdDraw3D.max - num * (2.0 * StdDraw3D.zoom) / (double)StdDraw3D.height) / num2;
	}
	[LineNumberTable(new byte[]
	{
		158,
		20,
		162,
		137,
		104,
		106,
		159,
		22,
		161,
		104,
		106,
		127,
		22,
		161,
		104,
		106,
		127,
		22,
		161,
		223,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void mouseMotionEvents(MouseEvent mouseEvent, double num, double num2, bool flag)
	{
		if (StdDraw3D.cameraMode == 4)
		{
			return;
		}
		if (StdDraw3D.cameraMode == 1)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateFPS((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 2)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateRelative((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 3)
		{
			if (flag || StdDraw3D.immersive)
			{
				StdDraw3D.camera.rotateFPS((StdDraw3D.mouseY - num2) / 4.0, (StdDraw3D.mouseX - num) / 4.0, (double)0f);
			}
			return;
		}
		if (StdDraw3D.cameraMode == 0 && flag && StdDraw3D.isKeyPressed(18))
		{
			StdDraw3D.view;
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		185,
		108,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool isKeyPressed(int i)
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (StdDraw3D.keysDown.contains(Integer.valueOf(i)) ? 1 : 0);
		}
		return result != 0;
	}
	public static int getCameraMode()
	{
		return StdDraw3D.cameraMode;
	}
	[LineNumberTable(new byte[]
	{
		173,
		86,
		199,
		255,
		24,
		69,
		103,
		143
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void saveScene3D(string str)
	{
		new File(str);
		IOException ex;
		object obj;
		try
		{
			try
			{
				throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.SceneGraphFileWriter");
			}
			catch (IOException arg_13_0)
			{
				ex = ByteCodeHelper.MapException<IOException>(arg_13_0, ByteCodeHelper.MapFlags.NoRemapping);
			}
		}
		catch (System.Exception arg_1C_0)
		{
			System.Exception expr_21 = ByteCodeHelper.MapException<System.Exception>(arg_1C_0, ByteCodeHelper.MapFlags.None);
			if (!ByteCodeHelper.DynamicInstanceOf(expr_21, typeof(StdDraw3D).TypeHandle, "com.sun.j3d.utils.scenegraph.io.UnsupportedUniverseException"))
			{
				throw;
			}
			obj = expr_21;
			goto IL_3B;
		}
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
		return;
		IL_3B:
		object obj2 = obj;
		obj2;
		throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.UnsupportedUniverseException");
	}
	[LineNumberTable(2985)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape model(string str)
	{
		return StdDraw3D.model(str, false);
	}
	[LineNumberTable(new byte[]
	{
		173,
		37,
		102,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void save(string str)
	{
		StdDraw3D.getCameraMode();
		StdDraw3D.setCameraMode(4);
		StdDraw3D.canvas;
		throw new NoClassDefFoundError("javax.media.j3d.Canvas3D");
	}
	[LineNumberTable(711)]
	private static object createBackground()
	{
		throw new NoClassDefFoundError("javax.media.j3d.Background");
	}
	[LineNumberTable(1814)]
	private static void playAmbientSound(string text, double num, bool flag)
	{
		throw new NoClassDefFoundError("javax.media.j3d.MediaContainer");
	}
	[LineNumberTable(1873)]
	public static void clearLight()
	{
		StdDraw3D.lightGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(1898)]
	public static StdDraw3D.Light directionalLight(double d1, double d2, double d3, Color c)
	{
		throw new NoClassDefFoundError("javax.media.j3d.DirectionalLight");
	}
	[LineNumberTable(1922)]
	public static StdDraw3D.Light ambientLight(Color c)
	{
		throw new NoClassDefFoundError("javax.vecmath.Color3f");
	}
	[LineNumberTable(696)]
	private static object createTransformGroup()
	{
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	[LineNumberTable(1952)]
	public static StdDraw3D.Light pointLight(double d1, double d2, double d3, Color c, double d4)
	{
		throw new NoClassDefFoundError("javax.media.j3d.PointLight");
	}
	[LineNumberTable(new byte[]
	{
		167,
		117,
		102,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clear3D()
	{
		StdDraw3D.clear3D = true;
		StdDraw3D.offscreenGroup = StdDraw3D.createBranchGroup();
	}
	[LineNumberTable(new byte[]
	{
		167,
		125,
		102,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clearOverlay()
	{
		StdDraw3D.clearOverlay = true;
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
	}
	[LineNumberTable(new byte[]
	{
		167,
		104,
		101,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clear()
	{
		StdDraw3D.clear3D();
		StdDraw3D.clearOverlay();
	}
	[LineNumberTable(new byte[]
	{
		165,
		233,
		133,
		138,
		107,
		116,
		127,
		18,
		127,
		19,
		127,
		9,
		127,
		8,
		127,
		8,
		159,
		9,
		107,
		116,
		127,
		18,
		127,
		19,
		127,
		9,
		127,
		8,
		127,
		24,
		159,
		27
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void moveEvents(int num)
	{
		StdDraw3D.infoDisplay();
		if (StdDraw3D.isKeyPressed(17))
		{
			return;
		}
		if (StdDraw3D.cameraMode == 1)
		{
			double num2 = 0.00015 * (double)num * StdDraw3D.zoom;
			if (StdDraw3D.isKeyPressed(87) || StdDraw3D.isKeyPressed(38))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(83) || StdDraw3D.isKeyPressed(40))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, -num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(65) || StdDraw3D.isKeyPressed(37))
			{
				StdDraw3D.camera.moveRelative(-num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(68) || StdDraw3D.isKeyPressed(39))
			{
				StdDraw3D.camera.moveRelative(num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(81) || StdDraw3D.isKeyPressed(33))
			{
				StdDraw3D.camera.moveRelative((double)0f, num2, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(69) || StdDraw3D.isKeyPressed(34))
			{
				StdDraw3D.camera.moveRelative((double)0f, -num2, (double)0f);
			}
		}
		if (StdDraw3D.cameraMode == 2)
		{
			double num2 = 0.00015 * (double)num * StdDraw3D.zoom;
			if (StdDraw3D.isKeyPressed(87) || StdDraw3D.isKeyPressed(38))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(83) || StdDraw3D.isKeyPressed(40))
			{
				StdDraw3D.camera.moveRelative((double)0f, (double)0f, -num2 * 3.0);
			}
			if (StdDraw3D.isKeyPressed(65) || StdDraw3D.isKeyPressed(37))
			{
				StdDraw3D.camera.moveRelative(-num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(68) || StdDraw3D.isKeyPressed(39))
			{
				StdDraw3D.camera.moveRelative(num2, (double)0f, (double)0f);
			}
			if (StdDraw3D.isKeyPressed(81) || StdDraw3D.isKeyPressed(33))
			{
				StdDraw3D.camera.rotateRelative((double)0f, (double)0f, num2 * 250.0 / StdDraw3D.zoom);
			}
			if (StdDraw3D.isKeyPressed(69) || StdDraw3D.isKeyPressed(34))
			{
				StdDraw3D.camera.rotateRelative((double)0f, (double)0f, -num2 * 250.0 / StdDraw3D.zoom);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		167,
		184,
		101,
		101,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show(int i)
	{
		StdDraw3D.renderOverlay();
		StdDraw3D.render3D();
		StdDraw3D.pause(i);
	}
	[LineNumberTable(new byte[]
	{
		167,
		201,
		103,
		102,
		140,
		112,
		144,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void renderOverlay()
	{
		if (StdDraw3D.clearOverlay)
		{
			StdDraw3D.clearOverlay = false;
			StdDraw3D.onscreenImage = StdDraw3D.offscreenImage;
		}
		else
		{
			Graphics2D graphics2D = (Graphics2D)StdDraw3D.onscreenImage.getGraphics();
			graphics2D.drawRenderedImage(StdDraw3D.offscreenImage, new AffineTransform());
		}
		StdDraw3D.offscreenImage = StdDraw3D.createBufferedImage();
	}
	[LineNumberTable(2130)]
	private static void render3D()
	{
		StdDraw3D.rootGroup;
		StdDraw3D.offscreenGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(new byte[]
	{
		167,
		136,
		98,
		131,
		100,
		102,
		106,
		120,
		146,
		166,
		102,
		100,
		120,
		242,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void pause(int i)
	{
		int j = i;
		int num = 15;
		while (j > num)
		{
			StdDraw3D.moveEvents(num);
			Toolkit.getDefaultToolkit().sync();
			try
			{
				Thread.currentThread();
				Thread.sleep((long)num);
			}
			catch (InterruptedException arg_2A_0)
			{
				goto IL_2E;
			}
			IL_43:
			j -= num;
			continue;
			goto IL_43;
			IL_2E:
			System.@out.println("Error sleeping");
			goto IL_43;
		}
		StdDraw3D.moveEvents(j);
		if (j == 0)
		{
			return;
		}
		try
		{
			Thread.currentThread();
			Thread.sleep((long)j);
		}
		catch (InterruptedException arg_64_0)
		{
			goto IL_68;
		}
		return;
		IL_68:
		System.@out.println("Error sleeping");
	}
	[LineNumberTable(new byte[]
	{
		167,
		196,
		101,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void showOverlay(int i)
	{
		StdDraw3D.renderOverlay();
		StdDraw3D.pause(i);
	}
	[LineNumberTable(new byte[]
	{
		167,
		218,
		101,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show3D(int i)
	{
		StdDraw3D.render3D();
		StdDraw3D.pause(i);
	}
	[LineNumberTable(new byte[]
	{
		168,
		21,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7, string str)
	{
		StdDraw3D.createVector3f((double)0f, (double)0f, d4);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	[LineNumberTable(new byte[]
	{
		162,
		135,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static object createAppearance(string text, bool flag)
	{
		StdDraw3D.createBlankAppearance();
		throw new NoClassDefFoundError("javax.media.j3d.PolygonAttributes");
	}
	[LineNumberTable(2478)]
	private static StdDraw3D.Shape primitive(object obj, double num, double num2, double num3, object obj2, object obj3)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "com.sun.j3d.utils.geometry.Primitive");
		ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Vector3d");
		ByteCodeHelper.DynamicCast(obj3, typeof(StdDraw3D).TypeHandle, "javax.vecmath.Vector3d");
		obj;
		64;
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Primitive");
	}
	[LineNumberTable(new byte[]
	{
		168,
		39,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireSphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		StdDraw3D.createVector3f((double)0f, (double)0f, d4);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	[LineNumberTable(2235)]
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, string str)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	[LineNumberTable(2252)]
	public static StdDraw3D.Shape wireEllipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	[LineNumberTable(2283)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, double d5, double d6, double d7, string str)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d4, d4, d5, d6, d7, str);
	}
	[LineNumberTable(new byte[]
	{
		168,
		175,
		137,
		142
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, d6);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Box");
	}
	[LineNumberTable(new byte[]
	{
		168,
		196,
		136,
		142
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireBox(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, d6);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Box");
	}
	[LineNumberTable(new byte[]
	{
		169,
		155,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape lines(double[] darr1, double[] darr2, double[] darr3)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.LineStripArray");
	}
	[LineNumberTable(new byte[]
	{
		168,
		233,
		105,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cylinder");
	}
	[LineNumberTable(new byte[]
	{
		168,
		251,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cylinder");
	}
	[LineNumberTable(new byte[]
	{
		169,
		29,
		105,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, string str)
	{
		StdDraw3D.createAppearance(str, true);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cone");
	}
	[LineNumberTable(new byte[]
	{
		169,
		47,
		104,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		StdDraw3D.createAppearance(null, false);
		StdDraw3D.createVector3f(d4, d5, (double)0f);
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Cone");
	}
	[LineNumberTable(new byte[]
	{
		169,
		108,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape points(double[] darr1, double[] darr2, double[] darr3)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.PointArray");
	}
	[LineNumberTable(new byte[]
	{
		170,
		150,
		99
	})]
	private static object constructPoint3f(double[] array, double[] array2, double[] array3)
	{
		int num = array.Length;
		num;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	[LineNumberTable(850)]
	private static object createShape3D(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Geometry");
		throw new NoClassDefFoundError("javax.media.j3d.Shape3D");
	}
	[LineNumberTable(3022)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape shape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = true;
		object arg_16_0 = null;
		bool flag = false;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	[LineNumberTable(3035)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape customShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = true;
		object arg_16_0 = null;
		bool flag = true;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	[LineNumberTable(2373)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(new byte[]
	{
		173,
		128,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape combine(params StdDraw3D.Shape[] sddsarr)
	{
		StdDraw3D.createBranchGroup();
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	[LineNumberTable(new byte[]
	{
		169,
		193,
		127,
		6,
		151,
		159,
		2,
		117,
		105,
		106,
		139
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape tube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		StdDraw3D.Vector3D vector3D = new StdDraw3D.Vector3D(d1 + d4, d2 + d5, d3 + d6).times(0.5);
		StdDraw3D.Vector3D vector3D2 = new StdDraw3D.Vector3D(d4 - d1, d5 - d2, d6 - d3);
		StdDraw3D.Shape shape = StdDraw3D.cylinder(vector3D.__<>x, vector3D.__<>y, vector3D.__<>z, d7, vector3D2.mag());
		StdDraw3D.Vector3D sddvd = new StdDraw3D.Vector3D((double)0f, (double)1f, (double)0f);
		StdDraw3D.Vector3D sddvd2 = vector3D2.cross(sddvd);
		double num = vector3D2.angle(sddvd);
		shape.rotateAxis(sddvd2, -num);
		return StdDraw3D.combine(new StdDraw3D.Shape[]
		{
			shape
		});
	}
	[LineNumberTable(2161)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(new byte[]
	{
		170,
		6,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape polygon(double[] array, double[] array2, double[] array3, bool flag)
	{
		StdDraw3D.constructPoint3f(array, array2, array3);
		throw new NoClassDefFoundError("javax.media.j3d.TriangleFanArray");
	}
	[LineNumberTable(3031)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape wireShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = false;
		object arg_16_0 = null;
		bool flag = false;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	[LineNumberTable(new byte[]
	{
		170,
		40,
		99
	})]
	private static StdDraw3D.Shape triangles(double[][] array, bool flag)
	{
		int num = array.Length;
		num * 3;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	[LineNumberTable(new byte[]
	{
		170,
		83,
		99
	})]
	private static StdDraw3D.Shape triangles(double[][] array, Color[] array2, bool flag)
	{
		int num = array.Length;
		num * 3;
		throw new NoClassDefFoundError("javax.vecmath.Point3f");
	}
	[LineNumberTable(new byte[]
	{
		170,
		129,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape text3D(double d1, double d2, double d3, string str, double d4, double d5, double d6)
	{
		new Line2D.Double((double)0f, (double)0f, 1.5, (double)0f);
		throw new NoClassDefFoundError("javax.media.j3d.FontExtrusion");
	}
	[LineNumberTable(new byte[]
	{
		156,
		148,
		191,
		7,
		108,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape shape(object obj, bool flag, object obj2, bool flag2)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		ByteCodeHelper.DynamicCast(obj2, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Transform3D");
		object obj3;
		if (flag2)
		{
			obj3 = StdDraw3D.createCustomAppearance(flag);
		}
		else
		{
			obj3 = StdDraw3D.createAppearance(null, flag);
		}
		obj;
		obj3;
		throw new NoClassDefFoundError("javax.media.j3d.Shape3D");
	}
	[LineNumberTable(new byte[]
	{
		163,
		19,
		102,
		176,
		103,
		104,
		104,
		104,
		197,
		136,
		105,
		105,
		115,
		104,
		150,
		97,
		127,
		15
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Scanner createScanner(string text)
	{
		string charsetName = "ISO-8859-1";
		Locale locale = new Locale("en", "US");
		Scanner result;
		try
		{
			File file = new File(text);
			Scanner scanner;
			if (!file.exists())
			{
				URL uRL = new URL(text);
				URLConnection uRLConnection = uRL.openConnection();
				InputStream inputStream = uRLConnection.getInputStream();
				Scanner.__<clinit>();
				scanner = new Scanner(new BufferedInputStream(inputStream), charsetName);
				scanner.useLocale(locale);
				result = scanner;
				return result;
			}
			scanner = new Scanner(file, charsetName);
			scanner.useLocale(locale);
			result = scanner;
		}
		catch (IOException arg_78_0)
		{
			goto IL_81;
		}
		return result;
		IL_81:
		System.err.println(new StringBuilder().append("Could not open ").append(text).append(".").toString());
		return null;
	}
	[LineNumberTable(2705)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape triangles(double[][] darr)
	{
		return StdDraw3D.triangles(darr, true);
	}
	[LineNumberTable(2989)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape model(string str, bool b)
	{
		return StdDraw3D.model(str, false, b);
	}
	[LineNumberTable(new byte[]
	{
		156,
		160,
		132,
		101,
		113,
		135,
		109,
		106,
		109,
		203
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape model(string text, bool flag, bool flag2)
	{
		if (text == null)
		{
			return null;
		}
		string @this = java.lang.String.instancehelper_substring(text, java.lang.String.instancehelper_lastIndexOf(text, 46) + 1);
		java.lang.String.instancehelper_toLowerCase(@this);
		if (java.lang.String.instancehelper_equals(@this, "ply"))
		{
			return StdDraw3D.drawPLY(text, flag);
		}
		if (java.lang.String.instancehelper_equals(@this, "obj"))
		{
			return StdDraw3D.drawOBJ(text, flag, flag2);
		}
		string arg_5A_0 = "Format not supported!";
		Throwable.__<suppressFillInStackTrace>();
		throw new RuntimeException(arg_5A_0);
	}
	[LineNumberTable(new byte[]
	{
		170,
		164,
		135,
		98,
		98,
		162,
		104,
		110,
		105,
		110,
		105,
		110,
		100,
		103,
		137,
		110,
		98,
		133,
		159,
		27,
		108,
		144,
		159,
		14,
		107,
		115,
		127,
		6,
		104,
		47,
		232,
		61,
		235,
		72,
		159,
		15,
		107,
		104,
		101,
		144,
		115,
		159,
		6,
		104,
		110,
		110,
		142,
		104,
		110,
		110,
		142,
		104,
		110,
		110,
		238,
		43,
		235,
		88
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape drawPLY(string text, bool flag)
	{
		Scanner scanner = StdDraw3D.createScanner(text);
		int num = -1;
		int num2 = -1;
		int num3 = -1;
		while (true)
		{
			string @this = scanner.next();
			if (java.lang.String.instancehelper_equals(@this, "vertex"))
			{
				num = scanner.nextInt();
			}
			else if (java.lang.String.instancehelper_equals(@this, "face"))
			{
				num2 = scanner.nextInt();
			}
			else if (java.lang.String.instancehelper_equals(@this, "property"))
			{
				num3++;
				scanner.next();
				scanner.next();
			}
			else if (java.lang.String.instancehelper_equals(@this, "end_header"))
			{
				break;
			}
		}
		System.@out.println(new StringBuilder().append(num).append(" ").append(num2).append(" ").append(num3).toString());
		if (num == -1 || num2 == -1 || num3 == -1)
		{
			string arg_CA_0 = "Cannot read format of .ply file!";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_CA_0);
		}
		int arg_E2_0 = num3;
		int arg_DA_0 = num;
		int[] array = new int[2];
		int num4 = arg_DA_0;
		array[1] = num4;
		num4 = arg_E2_0;
		array[0] = num4;
		double[][] array2 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int i = 0; i < num; i++)
		{
			bool expr_108 = i != 0;
			int expr_10F = 10000;
			if (expr_10F == -1 || (expr_108 ? 1 : 0) % expr_10F == 0)
			{
				System.@out.println(new StringBuilder().append("vertex ").append(i).toString());
			}
			for (int j = 0; j < num3; j++)
			{
				array2[j][i] = scanner.nextDouble();
			}
		}
		int arg_17D_0 = num2;
		int arg_175_0 = 9;
		array = new int[2];
		num4 = arg_175_0;
		array[1] = num4;
		num4 = arg_17D_0;
		array[0] = num4;
		double[][] array3 = (double[][])ByteCodeHelper.multianewarray(typeof(double[][]).TypeHandle, array);
		for (int j = 0; j < num2; j++)
		{
			int num5 = scanner.nextInt();
			if (num5 != 3)
			{
				string arg_1BA_0 = "Only triangular faces supported!";
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_1BA_0);
			}
			bool expr_1C0 = j != 0;
			int expr_1C7 = 10000;
			if (expr_1C7 == -1 || (expr_1C0 ? 1 : 0) % expr_1C7 == 0)
			{
				System.@out.println(new StringBuilder().append("face ").append(j).toString());
			}
			int num6 = scanner.nextInt();
			array3[j][0] = array2[0][num6];
			array3[j][1] = array2[1][num6];
			array3[j][2] = array2[2][num6];
			num6 = scanner.nextInt();
			array3[j][3] = array2[0][num6];
			array3[j][4] = array2[1][num6];
			array3[j][5] = array2[2][num6];
			num6 = scanner.nextInt();
			array3[j][6] = array2[0][num6];
			array3[j][7] = array2[1][num6];
			array3[j][8] = array2[2][num6];
		}
		return StdDraw3D.triangles(array3);
	}
	[LineNumberTable(new byte[]
	{
		156,
		179,
		98,
		98,
		133
	})]
	private static StdDraw3D.Shape drawOBJ(string text, bool flag, bool flag2)
	{
		if (flag2)
		{
		}
		throw new NoClassDefFoundError("com.sun.j3d.loaders.objectfile.ObjectFile");
	}
	[LineNumberTable(new byte[]
	{
		162,
		192,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static object createCustomAppearance(bool flag)
	{
		StdDraw3D.createBlankAppearance();
		throw new NoClassDefFoundError("javax.media.j3d.PolygonAttributes");
	}
	[LineNumberTable(new byte[]
	{
		172,
		217,
		108,
		107,
		107,
		109,
		167,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Graphics2D getGraphics2D(BufferedImage bufferedImage)
	{
		Graphics2D graphics2D = (Graphics2D)bufferedImage.getGraphics();
		graphics2D.setColor(StdDraw3D.penColor);
		graphics2D.setFont(StdDraw3D.font);
		BasicStroke stroke = new BasicStroke(StdDraw3D.penRadius, 1, 1);
		graphics2D.setStroke(stroke);
		graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		return graphics2D;
	}
	private static float scaleX(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)1f / StdDraw3D.aspectRatio;
		}
		return (float)((double)StdDraw3D.width * (num * num2 - StdDraw3D.min) / (2.0 * StdDraw3D.zoom));
	}
	private static float scaleY(double num)
	{
		double num2 = (double)1f;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = StdDraw3D.aspectRatio;
		}
		return (float)((double)StdDraw3D.height * (StdDraw3D.max - num * num2) / (2.0 * StdDraw3D.zoom));
	}
	[LineNumberTable(new byte[]
	{
		171,
		146,
		127,
		12
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPixel(double d1, double d2)
	{
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fillRect(java.lang.Math.round(StdDraw3D.scaleX(d1)), java.lang.Math.round(StdDraw3D.scaleY(d2)), 1, 1);
	}
	private static double factorX(double num)
	{
		double num2 = (double)StdDraw3D.width;
		if (StdDraw3D.width > StdDraw3D.height)
		{
			num2 = (double)StdDraw3D.height;
		}
		return num2 * (num / (2.0 * StdDraw3D.zoom));
	}
	private static double factorY(double num)
	{
		double num2 = (double)StdDraw3D.height;
		if (StdDraw3D.height > StdDraw3D.width)
		{
			num2 = (double)StdDraw3D.width;
		}
		return num2 * (num / (2.0 * StdDraw3D.zoom));
	}
	[LineNumberTable(new byte[]
	{
		172,
		195,
		167,
		140,
		103,
		124,
		195,
		108,
		108,
		127,
		19,
		167
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static Image getImage(string text)
	{
		ImageIcon imageIcon = new ImageIcon(text);
		if (imageIcon != null)
		{
			if (imageIcon.getImageLoadStatus() == 8)
			{
				goto IL_39;
			}
		}
		try
		{
			URL uRL = new URL(text);
			imageIcon = new ImageIcon(uRL);
		}
		catch (System.Exception arg_26_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_26_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
		}
		IL_39:
		if (imageIcon == null || imageIcon.getImageLoadStatus() != 8)
		{
			URL uRL = ClassLiteral<StdDraw3D>.Value.getResource(text);
			if (uRL == null)
			{
				string arg_7D_0 = new StringBuilder().append("image ").append(text).append(" not found").toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new RuntimeException(arg_7D_0);
			}
			imageIcon = new ImageIcon(uRL);
		}
		return imageIcon.getImage();
	}
	[LineNumberTable(new byte[]
	{
		174,
		227,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraPosition(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setPosition(sddvd);
	}
	[LineNumberTable(new byte[]
	{
		174,
		235,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraOrientation(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setOrientation(sddvd);
	}
	[LineNumberTable(new byte[]
	{
		174,
		243,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraDirection(StdDraw3D.Vector3D sddvd)
	{
		StdDraw3D.camera.setDirection(sddvd);
	}
	[LineNumberTable(new byte[]
	{
		171,
		239,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlaySquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		163,
		182,
		127,
		5
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenColor(Color c, int i)
	{
		Color.__<clinit>();
		StdDraw3D.setPenColor(new Color(c.getRed(), c.getGreen(), c.getBlue(), i));
	}
	[LineNumberTable(new byte[]
	{
		171,
		170,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		172,
		64,
		107,
		103,
		105,
		105,
		105,
		104,
		127,
		0
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayText(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
	}
	public static void setFont(Font f)
	{
		StdDraw3D.font = f;
	}
	[LineNumberTable(2794)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape text3D(double d1, double d2, double d3, string str)
	{
		return StdDraw3D.text3D(d1, d2, d3, str, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(234)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdDraw3D()
	{
	}
	[LineNumberTable(new byte[]
	{
		163,
		58,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCanvasSize(int i1, int i2)
	{
		StdDraw3D.setCanvasSize(i1, i2, false);
	}
	[LineNumberTable(new byte[]
	{
		161,
		225,
		135,
		104,
		121,
		104,
		121,
		141
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void stateChanged(ChangeEvent ce)
	{
		object source = ce.getSource();
		if (source == StdDraw3D.numDivSpinner)
		{
			StdDraw3D.numDivisions = ((Integer)StdDraw3D.numDivSpinner.getValue()).intValue();
		}
		if (source == StdDraw3D.fovSpinner)
		{
			StdDraw3D.setPerspectiveProjection(((java.lang.Double)StdDraw3D.fovSpinner.getValue()).doubleValue());
			StdDraw3D.perspectiveButton.setSelected(true);
		}
	}
	[LineNumberTable(new byte[]
	{
		161,
		240,
		135,
		104,
		106,
		104,
		106,
		104,
		106,
		104,
		106,
		104,
		107,
		104,
		107,
		104,
		107,
		104,
		107,
		104,
		107,
		104,
		123,
		104,
		103,
		104,
		113,
		104,
		113
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void actionPerformed(ActionEvent ae)
	{
		object source = ae.getSource();
		if (source == StdDraw3D.saveButton)
		{
			StdDraw3D.saveAction();
		}
		else if (source == StdDraw3D.loadButton)
		{
			StdDraw3D.loadAction();
		}
		else if (source == StdDraw3D.save3DButton)
		{
			StdDraw3D.save3DAction();
		}
		else if (source == StdDraw3D.quitButton)
		{
			StdDraw3D.quitAction();
		}
		else if (source == StdDraw3D.orbitModeButton)
		{
			StdDraw3D.setCameraMode(0);
		}
		else if (source == StdDraw3D.fpsModeButton)
		{
			StdDraw3D.setCameraMode(1);
		}
		else if (source == StdDraw3D.airplaneModeButton)
		{
			StdDraw3D.setCameraMode(2);
		}
		else if (source == StdDraw3D.lookModeButton)
		{
			StdDraw3D.setCameraMode(3);
		}
		else if (source == StdDraw3D.fixedModeButton)
		{
			StdDraw3D.setCameraMode(4);
		}
		else if (source == StdDraw3D.perspectiveButton)
		{
			StdDraw3D.setPerspectiveProjection(((java.lang.Double)StdDraw3D.fovSpinner.getValue()).doubleValue());
		}
		else if (source == StdDraw3D.parallelButton)
		{
			StdDraw3D.setParallelProjection();
		}
		else if (source == StdDraw3D.antiAliasingButton)
		{
			StdDraw3D.setAntiAliasing(StdDraw3D.antiAliasingButton.isSelected());
		}
		else if (source == StdDraw3D.infoCheckBox)
		{
			StdDraw3D.setInfoDisplay(StdDraw3D.infoCheckBox.isSelected());
		}
	}
	[LineNumberTable(644), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void componentHidden(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(650), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void componentMoved(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(656), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void componentShown(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(662), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void componentResized(ComponentEvent ce)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(668), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void windowGainedFocus(WindowEvent we)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(674), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void windowLostFocus(WindowEvent we)
	{
		StdDraw3D.keysDown = new TreeSet();
	}
	[LineNumberTable(887)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static object createPoint3f(StdDraw3D.Vector3D vector3D)
	{
		return StdDraw3D.createPoint3f(vector3D.__<>x, vector3D.__<>y, vector3D.__<>z);
	}
	[LineNumberTable(new byte[]
	{
		163,
		198,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setPenColor(int i1, int i2, int i3)
	{
		StdDraw3D.penColor = new Color(i1, i2, i3);
	}
	public static Color getPenColor()
	{
		return StdDraw3D.penColor;
	}
	public static float getPenRadius()
	{
		return StdDraw3D.penRadius / 500f;
	}
	public static Font getFont()
	{
		return StdDraw3D.font;
	}
	[LineNumberTable(new byte[]
	{
		164,
		3,
		107,
		107,
		112,
		240,
		69,
		127,
		1,
		159,
		1,
		119,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void fullscreen()
	{
		StdDraw3D.frame.setResizable(true);
		StdDraw3D.frame.setExtendedState(6);
		int num = StdDraw3D.frame.getSize().width;
		int num2 = StdDraw3D.frame.getSize().height;
		int num3 = StdDraw3D.frame.getInsets().top + StdDraw3D.frame.getInsets().bottom;
		int num4 = StdDraw3D.frame.getInsets().left + StdDraw3D.frame.getInsets().right;
		StdDraw3D.setCanvasSize(num - num4, num2 - num3 - StdDraw3D.menuBar.getHeight(), true);
		StdDraw3D.frame.setExtendedState(6);
	}
	[LineNumberTable(1172)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool getAntiAliasing()
	{
		return StdDraw3D.antiAliasingButton.isSelected();
	}
	public static void setNumDivisions(int i)
	{
		StdDraw3D.numDivisions = i;
	}
	public static int getNumDivisions()
	{
		return StdDraw3D.numDivisions;
	}
	[LineNumberTable(1292)]
	public static void setOrbitCenter(double d1, double d2, double d3)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3d");
	}
	[LineNumberTable(1299)]
	public static void setOrbitCenter(StdDraw3D.Vector3D sddvd)
	{
		throw new NoClassDefFoundError("javax.vecmath.Point3d");
	}
	[LineNumberTable(1308)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Vector3D getOrbitCenter()
	{
		object arg_08_0 = StdDraw3D.orbitCenter;
		object obj = null;
		return new StdDraw3D.Vector3D(arg_08_0, obj);
	}
	[LineNumberTable(new byte[]
	{
		164,
		234,
		108,
		127,
		0
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool mousePressed()
	{
		int result;
		lock (StdDraw3D.mouseLock)
		{
			result = ((!StdDraw3D.mouse1Pressed() && !StdDraw3D.mouse2Pressed() && !StdDraw3D.mouse3Pressed()) ? 0 : 1);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		165,
		16,
		108,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double mouseX()
	{
		double result;
		lock (StdDraw3D.mouseLock)
		{
			result = StdDraw3D.unscaleX(StdDraw3D.mouseX);
		}
		return result;
	}
	[LineNumberTable(new byte[]
	{
		165,
		26,
		108,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double mouseY()
	{
		double result;
		lock (StdDraw3D.mouseLock)
		{
			result = StdDraw3D.unscaleY(StdDraw3D.mouseY);
		}
		return result;
	}
	[Obsolete]
	public virtual void mouseClicked(MouseEvent me)
	{
	}
	[Obsolete]
	public virtual void mouseEntered(MouseEvent me)
	{
	}
	[Obsolete]
	public virtual void mouseExited(MouseEvent me)
	{
	}
	[LineNumberTable(new byte[]
	{
		165,
		57,
		108,
		109,
		109,
		111,
		111,
		143,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mousePressed(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseX = (double)me.getX();
			StdDraw3D.mouseY = (double)me.getY();
			if (me.getButton() == 1)
			{
				StdDraw3D.mouse1 = true;
			}
			if (me.getButton() == 2)
			{
				StdDraw3D.mouse2 = true;
			}
			if (me.getButton() == 3)
			{
				StdDraw3D.mouse3 = true;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		72,
		108,
		111,
		111,
		111,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseReleased(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			if (me.getButton() == 1)
			{
				StdDraw3D.mouse1 = false;
			}
			if (me.getButton() == 2)
			{
				StdDraw3D.mouse2 = false;
			}
			if (me.getButton() == 3)
			{
				StdDraw3D.mouse3 = false;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		84,
		140,
		117,
		109,
		109,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseDragged(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseMotionEvents(me, (double)me.getX(), (double)me.getY(), true);
			StdDraw3D.mouseX = (double)me.getX();
			StdDraw3D.mouseY = (double)me.getY();
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		97,
		172,
		117,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseMoved(MouseEvent me)
	{
		lock (StdDraw3D.mouseLock)
		{
			StdDraw3D.mouseMotionEvents(me, (double)me.getX(), (double)me.getY(), false);
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		110,
		136,
		185
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void mouseWheelMoved(MouseWheelEvent mwe)
	{
		double arg_07_0 = (double)mwe.getWheelRotation();
		if (StdDraw3D.cameraMode == 0)
		{
			StdDraw3D.view;
			throw new NoClassDefFoundError("javax.media.j3d.View");
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		158,
		108,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool hasNextKeyTyped()
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (StdDraw3D.keysTyped.IsEmpty ? 0 : 1);
		}
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		165,
		169,
		108,
		122
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static char nextKeyTyped()
	{
		int result;
		lock (StdDraw3D.keyLock)
		{
			result = (int)((Character)StdDraw3D.keysTyped.removeLast()).charValue();
		}
		return (char)result;
	}
	[LineNumberTable(new byte[]
	{
		165,
		195,
		140,
		103,
		144,
		124,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyTyped(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			int keyChar = (int)ke.getKeyChar();
			StdDraw3D.keysTyped.addFirst(Character.valueOf((char)keyChar));
			if (keyChar == 96)
			{
				int expr_2E = StdDraw3D.getCameraMode() + 1;
				int expr_30 = 5;
				StdDraw3D.setCameraMode((expr_30 != -1) ? (expr_2E % expr_30) : 0);
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		209,
		108,
		150,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyPressed(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			StdDraw3D.keysDown.add(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(new byte[]
	{
		165,
		220,
		108,
		150,
		111
	}), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void keyReleased(KeyEvent ke)
	{
		lock (StdDraw3D.keyLock)
		{
			StdDraw3D.keysDown.remove(Integer.valueOf(ke.getKeyCode()));
		}
	}
	[LineNumberTable(1738)]
	public static void setBackground(string str)
	{
		StdDraw3D.rootGroup;
		StdDraw3D.bgGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(1768)]
	public static void setBackgroundSphere(string str)
	{
		throw new NoClassDefFoundError("com.sun.j3d.utils.geometry.Sphere");
	}
	[LineNumberTable(1801)]
	public static void clearSound()
	{
		StdDraw3D.soundGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(new byte[]
	{
		166,
		155,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void playAmbientSound(string str)
	{
		StdDraw3D.playAmbientSound(str, (double)1f, false);
	}
	[LineNumberTable(new byte[]
	{
		157,
		202,
		98,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void playAmbientSound(string str, bool b)
	{
		StdDraw3D.playAmbientSound(str, (double)1f, b);
	}
	[LineNumberTable(1855)]
	public static void clearFog()
	{
		StdDraw3D.fogGroup;
		throw new NoClassDefFoundError("javax.media.j3d.BranchGroup");
	}
	[LineNumberTable(1859)]
	public static void addFog(Color c, double d1, double d2)
	{
		throw new NoClassDefFoundError("javax.media.j3d.LinearFog");
	}
	[LineNumberTable(1890)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Light directionalLight(StdDraw3D.Vector3D sddvd, Color c)
	{
		return StdDraw3D.directionalLight(sddvd.__<>x, sddvd.__<>y, sddvd.__<>z, c);
	}
	[LineNumberTable(1939)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Light pointLight(StdDraw3D.Vector3D sddvd, Color c)
	{
		return StdDraw3D.pointLight(sddvd.__<>x, sddvd.__<>y, sddvd.__<>z, c, (double)1f);
	}
	[LineNumberTable(1943)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Light pointLight(double d1, double d2, double d3, Color c)
	{
		return StdDraw3D.pointLight(d1, d2, d3, c, (double)1f);
	}
	[LineNumberTable(1947)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Light pointLight(StdDraw3D.Vector3D sddvd, Color c, double d)
	{
		return StdDraw3D.pointLight(sddvd.__<>x, sddvd.__<>y, sddvd.__<>z, c, d);
	}
	[LineNumberTable(1982)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Color randomColor()
	{
		Color.__<clinit>();
		return new Color(new java.util.Random().nextInt());
	}
	[LineNumberTable(1989)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static Color randomRainbowColor()
	{
		return Color.getHSBColor((float)java.lang.Math.random(), 1f, 1f);
	}
	[LineNumberTable(new byte[]
	{
		167,
		91,
		123,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Vector3D randomDirection()
	{
		double a = java.lang.Math.random() * 3.1415926535897931 * 2.0;
		double a2 = java.lang.Math.random() * 3.1415926535897931;
		return new StdDraw3D.Vector3D(java.lang.Math.cos(a) * java.lang.Math.sin(a2), java.lang.Math.sin(a) * java.lang.Math.sin(a2), java.lang.Math.cos(a2));
	}
	[LineNumberTable(new byte[]
	{
		167,
		109,
		102,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void clear(Color c)
	{
		StdDraw3D.setBackground(c);
		StdDraw3D.clear();
	}
	[LineNumberTable(new byte[]
	{
		167,
		168,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void finished()
	{
		StdDraw3D.show(1000000000);
	}
	[LineNumberTable(2080)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show()
	{
		StdDraw3D.show(0);
	}
	[LineNumberTable(2095)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void showOverlay()
	{
		StdDraw3D.showOverlay(0);
	}
	[LineNumberTable(2117)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void show3D()
	{
		StdDraw3D.show3D(0);
	}
	[LineNumberTable(2168)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, d5, d6, d7, null);
	}
	[LineNumberTable(2175)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape sphere(double d1, double d2, double d3, double d4, string str)
	{
		return StdDraw3D.sphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2193)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireSphere(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.wireSphere(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(2213)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(2220)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, d7, d8, d9, null);
	}
	[LineNumberTable(2227)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape ellipsoid(double d1, double d2, double d3, double d4, double d5, double d6, string str)
	{
		return StdDraw3D.ellipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2244)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireEllipsoid(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.wireEllipsoid(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(2262)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(2269)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, d5, d6, d7, null);
	}
	[LineNumberTable(2276)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cube(double d1, double d2, double d3, double d4, string str)
	{
		return StdDraw3D.cube(d1, d2, d3, d4, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2291)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCube(double d1, double d2, double d3, double d4, double d5, double d6, double d7)
	{
		return StdDraw3D.wireBox(d1, d2, d3, d4, d4, d4, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(new byte[]
	{
		168,
		137,
		159,
		160,
		64,
		159,
		160,
		64,
		191,
		160,
		64
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCube(double d1, double d2, double d3, double d4)
	{
		double[] darr = new double[]
		{
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 + d4,
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 + d4,
			d1 + d4,
			d1 + d4,
			d1 - d4,
			d1 - d4,
			d1 - d4,
			d1 - d4
		};
		double[] darr2 = new double[]
		{
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4,
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4,
			d2 - d4,
			d2 - d4,
			d2 - d4,
			d2 - d4,
			d2 + d4,
			d2 + d4
		};
		double[] darr3 = new double[]
		{
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 + d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 - d4,
			d3 + d4,
			d3 + d4,
			d3 - d4,
			d3 - d4,
			d3 + d4
		};
		return StdDraw3D.lines(darr, darr2, darr3);
	}
	[LineNumberTable(2315)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(2322)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, d7, d8, d9, null);
	}
	[LineNumberTable(2329)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape box(double d1, double d2, double d3, double d4, double d5, double d6, string str)
	{
		return StdDraw3D.box(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2350)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireBox(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.wireBox(d1, d2, d3, d4, d5, d6, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(2380)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, d6, d7, d8, null);
	}
	[LineNumberTable(2387)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cylinder(double d1, double d2, double d3, double d4, double d5, string str)
	{
		return StdDraw3D.cylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2405)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCylinder(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.wireCylinder(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(2425)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, null);
	}
	[LineNumberTable(2432)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, d6, d7, d8, null);
	}
	[LineNumberTable(2439)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape cone(double d1, double d2, double d3, double d4, double d5, string str)
	{
		return StdDraw3D.cone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f, str);
	}
	[LineNumberTable(2457)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireCone(double d1, double d2, double d3, double d4, double d5)
	{
		return StdDraw3D.wireCone(d1, d2, d3, d4, d5, (double)0f, (double)0f, (double)0f);
	}
	[LineNumberTable(2516)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape point(double d1, double d2, double d3)
	{
		return StdDraw3D.points(new double[]
		{
			d1
		}, new double[]
		{
			d2
		}, new double[]
		{
			d3
		});
	}
	[LineNumberTable(new byte[]
	{
		169,
		125,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape points(double[] darr1, double[] darr2, double[] darr3, Color[] carr)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.PointArray");
	}
	[LineNumberTable(2563)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape line(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		return StdDraw3D.lines(new double[]
		{
			d1,
			d4
		}, new double[]
		{
			d2,
			d5
		}, new double[]
		{
			d3,
			d6
		});
	}
	[LineNumberTable(new byte[]
	{
		169,
		174,
		137
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape lines(double[] darr1, double[] darr2, double[] darr3, Color[] carr)
	{
		StdDraw3D.constructPoint3f(darr1, darr2, darr3);
		throw new NoClassDefFoundError("javax.media.j3d.LineStripArray");
	}
	[LineNumberTable(new byte[]
	{
		169,
		211,
		140,
		105,
		127,
		3,
		30,
		230,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape tubes(double[] darr1, double[] darr2, double[] darr3, double d)
	{
		StdDraw3D.Shape[] array = new StdDraw3D.Shape[(darr1.Length - 1) * 2];
		for (int i = 0; i < darr1.Length - 1; i++)
		{
			array[i] = StdDraw3D.tube(darr1[i], darr2[i], darr3[i], darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
			array[i + darr1.Length - 1] = StdDraw3D.sphere(darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
		}
		return StdDraw3D.combine(array);
	}
	[LineNumberTable(new byte[]
	{
		169,
		227,
		140,
		108,
		105,
		127,
		3,
		254,
		61,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape tubes(double[] darr1, double[] darr2, double[] darr3, double d, Color[] carr)
	{
		StdDraw3D.Shape[] array = new StdDraw3D.Shape[(darr1.Length - 1) * 2];
		for (int i = 0; i < darr1.Length - 1; i++)
		{
			StdDraw3D.setPenColor(carr[i]);
			array[i] = StdDraw3D.tube(darr1[i], darr2[i], darr3[i], darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
			array[i + darr1.Length - 1] = StdDraw3D.sphere(darr1[i + 1], darr2[i + 1], darr3[i + 1], d);
		}
		return StdDraw3D.combine(array);
	}
	[LineNumberTable(2663)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape polygon(double[] darr1, double[] darr2, double[] darr3)
	{
		return StdDraw3D.polygon(darr1, darr2, darr3, true);
	}
	[LineNumberTable(2670)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wirePolygon(double[] darr1, double[] darr2, double[] darr3)
	{
		return StdDraw3D.polygon(darr1, darr2, darr3, false);
	}
	[LineNumberTable(2709)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireTriangles(double[][] darr)
	{
		return StdDraw3D.triangles(darr, false);
	}
	[LineNumberTable(2744)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape triangles(double[][] darr, Color[] carr)
	{
		return StdDraw3D.triangles(darr, carr, true);
	}
	[LineNumberTable(2753)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape wireTriangles(double[][] darr, Color[] carr)
	{
		return StdDraw3D.triangles(darr, carr, false);
	}
	[LineNumberTable(2905)]
	private static StdDraw3D.Shape drawLWS(string text)
	{
		throw new NoClassDefFoundError("com.sun.j3d.loaders.lw3d.Lw3dLoader");
	}
	[LineNumberTable(2993)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape coloredModel(string str)
	{
		return StdDraw3D.model(str, true, true);
	}
	[LineNumberTable(2997)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape coloredModel(string str, bool b)
	{
		return StdDraw3D.model(str, true, b);
	}
	[LineNumberTable(3039)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static StdDraw3D.Shape customWireShape(object obj)
	{
		ByteCodeHelper.DynamicCast(obj, typeof(StdDraw3D).TypeHandle, "javax.media.j3d.Shape3D");
		bool arg_17_0 = false;
		object arg_16_0 = null;
		bool flag = true;
		object obj2 = arg_16_0;
		bool flag2 = arg_17_0;
		return StdDraw3D.shape(obj, flag2, obj2, flag);
	}
	[LineNumberTable(new byte[]
	{
		171,
		153,
		102,
		115,
		127,
		31
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPoint(double d1, double d2)
	{
		float num = StdDraw3D.penRadius;
		if (num <= 1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double((double)(StdDraw3D.scaleX(d1) - num / 2f), (double)(StdDraw3D.scaleY(d2) - num / 2f), (double)num, (double)num));
		}
	}
	[LineNumberTable(new byte[]
	{
		171,
		162,
		127,
		23
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayLine(double d1, double d2, double d3, double d4)
	{
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Line2D.Double((double)StdDraw3D.scaleX(d1), (double)StdDraw3D.scaleY(d2), (double)StdDraw3D.scaleX(d3), (double)StdDraw3D.scaleY(d4)));
	}
	[LineNumberTable(new byte[]
	{
		171,
		184,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayFilledCircle(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "circle radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		171,
		197,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		171,
		211,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayFilledEllipse(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "ellipse semimajor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "ellipse semiminor axis can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Ellipse2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		171,
		225,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		28
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayArc(double d1, double d2, double d3, double d4, double d5)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "arc radius can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		while (d5 < d4)
		{
			d5 += 360.0;
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Arc2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4, d4, d5 - d4, 0));
		}
	}
	[LineNumberTable(new byte[]
	{
		171,
		252,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayFilledSquare(double d1, double d2, double d3)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "square side length can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d3);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		172,
		9,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		172,
		23,
		121,
		121,
		105,
		105,
		115,
		115,
		123,
		127,
		19
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayFilledRectangle(double d1, double d2, double d3, double d4)
	{
		if (d3 < (double)0f)
		{
			string arg_13_0 = "half width can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_13_0);
		}
		if (d4 < (double)0f)
		{
			string arg_2C_0 = "half height can't be negative";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_2C_0);
		}
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(2.0 * d3);
		double num4 = StdDraw3D.factorY(2.0 * d4);
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(new Rectangle2D.Double(num - num3 / 2.0, num2 - num4 / 2.0, num3, num4));
		}
	}
	[LineNumberTable(new byte[]
	{
		172,
		37,
		99,
		102,
		118,
		102,
		54,
		134,
		102,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo(StdDraw3D.scaleX(darr1[0]), StdDraw3D.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo(StdDraw3D.scaleX(darr1[i]), StdDraw3D.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).draw(generalPath);
	}
	[LineNumberTable(new byte[]
	{
		172,
		50,
		99,
		102,
		118,
		102,
		54,
		134,
		102,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayFilledPolygon(double[] darr1, double[] darr2)
	{
		int num = darr1.Length;
		GeneralPath generalPath = new GeneralPath();
		generalPath.moveTo(StdDraw3D.scaleX(darr1[0]), StdDraw3D.scaleY(darr2[0]));
		for (int i = 0; i < num; i++)
		{
			generalPath.lineTo(StdDraw3D.scaleX(darr1[i]), StdDraw3D.scaleY(darr2[i]));
		}
		generalPath.closePath();
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).fill(generalPath);
	}
	[LineNumberTable(new byte[]
	{
		172,
		78,
		107,
		103,
		105,
		105,
		105,
		104,
		112,
		125,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayText(double d1, double d2, string str, double d3)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.rotate(java.lang.Math.toRadians(-d3), num, num2);
		graphics2D.drawString(str, (float)(num - (double)num3 / 2.0), (float)(num2 + (double)descent));
		graphics2D.rotate(java.lang.Math.toRadians(d3), num, num2);
	}
	[LineNumberTable(new byte[]
	{
		172,
		93,
		107,
		103,
		105,
		105,
		104,
		104,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayTextLeft(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)num, (float)(num2 + (double)descent));
	}
	[LineNumberTable(new byte[]
	{
		172,
		106,
		107,
		103,
		105,
		105,
		105,
		104,
		117
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayTextRight(double d1, double d2, string str)
	{
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		FontMetrics fontMetrics = graphics2D.getFontMetrics();
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = fontMetrics.stringWidth(str);
		int descent = fontMetrics.getDescent();
		graphics2D.drawString(str, (float)(num - (double)num3), (float)(num2 + (double)descent));
	}
	[LineNumberTable(new byte[]
	{
		172,
		119,
		103,
		105,
		105,
		104,
		105,
		127,
		25,
		127,
		28
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPicture(double d1, double d2, string str)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_5C_0);
		}
		StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
	}
	[LineNumberTable(new byte[]
	{
		172,
		133,
		103,
		105,
		105,
		104,
		105,
		159,
		25,
		108,
		113,
		127,
		20,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPicture(double d1, double d2, string str, double d3)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		int num3 = image.getWidth(null);
		int num4 = image.getHeight(null);
		if (num3 < 0 || num4 < 0)
		{
			string arg_5C_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_5C_0);
		}
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		graphics2D.rotate(java.lang.Math.toRadians(-d3), num, num2);
		graphics2D.drawImage(image, (int)java.lang.Math.round(num - (double)num3 / 2.0), (int)java.lang.Math.round(num2 - (double)num4 / 2.0), null);
		graphics2D.rotate(java.lang.Math.toRadians(d3), num, num2);
	}
	[LineNumberTable(new byte[]
	{
		172,
		150,
		103,
		105,
		105,
		127,
		16,
		127,
		18,
		105,
		107,
		127,
		33,
		156,
		255,
		41,
		69
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPicture(double d1, double d2, string str, double d3, double d4)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		if (d3 < (double)0f)
		{
			string arg_42_0 = new StringBuilder().append("width is negative: ").append(d3).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_42_0);
		}
		if (d4 < (double)0f)
		{
			string arg_73_0 = new StringBuilder().append("height is negative: ").append(d4).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_73_0);
		}
		double num3 = StdDraw3D.factorX(d3);
		double num4 = StdDraw3D.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_C7_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_C7_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		else
		{
			StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage).drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		}
	}
	[LineNumberTable(new byte[]
	{
		172,
		172,
		103,
		105,
		105,
		105,
		107,
		127,
		33,
		154,
		108,
		114,
		223,
		33,
		115
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void overlayPicture(double d1, double d2, string str, double d3, double d4, double d5)
	{
		Image image = StdDraw3D.getImage(str);
		double num = (double)StdDraw3D.scaleX(d1);
		double num2 = (double)StdDraw3D.scaleY(d2);
		double num3 = StdDraw3D.factorX(d3);
		double num4 = StdDraw3D.factorY(d4);
		if (num3 < (double)0f || num4 < (double)0f)
		{
			string arg_67_0 = new StringBuilder().append("image ").append(str).append(" is corrupt").toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_67_0);
		}
		if (num3 <= (double)1f && num4 <= (double)1f)
		{
			StdDraw3D.overlayPixel(d1, d2);
		}
		Graphics2D graphics2D = StdDraw3D.getGraphics2D(StdDraw3D.offscreenImage);
		graphics2D.rotate(java.lang.Math.toRadians(-d5), num, num2);
		graphics2D.drawImage(image, (int)java.lang.Math.round(num - num3 / 2.0), (int)java.lang.Math.round(num2 - num4 / 2.0), (int)java.lang.Math.round(num3), (int)java.lang.Math.round(num4), null);
		graphics2D.rotate(java.lang.Math.toRadians(d5), num, num2);
	}
	[LineNumberTable(new byte[]
	{
		173,
		102,
		167,
		254,
		76
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void loadScene3D(string str)
	{
		new File(str);
		IOException ex;
		try
		{
			throw new NoClassDefFoundError("com.sun.j3d.utils.scenegraph.io.SceneGraphFileReader");
		}
		catch (IOException arg_13_0)
		{
			ex = ByteCodeHelper.MapException<IOException>(arg_13_0, ByteCodeHelper.MapFlags.NoRemapping);
		}
		IOException @this = ex;
		Throwable.instancehelper_printStackTrace(@this);
	}
	[LineNumberTable(new byte[]
	{
		173,
		152,
		103,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Shape copy(StdDraw3D.Shape sdds)
	{
		object obj = StdDraw3D.Shape.access$1000(sdds);
		StdDraw3D.Shape.access$900(sdds);
		obj;
		throw new NoClassDefFoundError("javax.media.j3d.TransformGroup");
	}
	[LineNumberTable(3909)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Vector3D getCameraPosition()
	{
		return StdDraw3D.camera.getPosition();
	}
	[LineNumberTable(3913)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Vector3D getCameraOrientation()
	{
		return StdDraw3D.camera.getOrientation();
	}
	[LineNumberTable(3917)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static StdDraw3D.Vector3D getCameraDirection()
	{
		return StdDraw3D.camera.getDirection();
	}
	[LineNumberTable(new byte[]
	{
		174,
		223,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraPosition(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraPosition(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	[LineNumberTable(new byte[]
	{
		174,
		231,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraOrientation(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraOrientation(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	[LineNumberTable(new byte[]
	{
		174,
		239,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCameraDirection(double d1, double d2, double d3)
	{
		StdDraw3D.setCameraDirection(new StdDraw3D.Vector3D(d1, d2, d3));
	}
	[LineNumberTable(new byte[]
	{
		174,
		247,
		112,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCamera(double d1, double d2, double d3, double d4, double d5, double d6)
	{
		StdDraw3D.camera.setPosition(d1, d2, d3);
		StdDraw3D.camera.setOrientation(d4, d5, d6);
	}
	[LineNumberTable(new byte[]
	{
		174,
		252,
		107,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setCamera(StdDraw3D.Vector3D sddvd1, StdDraw3D.Vector3D sddvd2)
	{
		StdDraw3D.camera.setPosition(sddvd1);
		StdDraw3D.camera.setOrientation(sddvd2);
	}
	public static StdDraw3D.Camera camera()
	{
		return StdDraw3D.camera;
	}
	[LineNumberTable(new byte[]
	{
		177,
		38,
		179,
		166,
		106,
		184,
		110,
		111,
		120,
		111,
		184,
		106,
		120,
		184,
		106,
		114,
		122,
		111,
		125,
		240,
		69,
		185
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		StdDraw3D.setScale(-1.0, (double)1f);
		StdDraw3D.setInfoDisplay(false);
		StdDraw3D.setPenColor(StdDraw3D.__<>WHITE);
		StdDraw3D.overlaySquare((double)0f, (double)0f, 0.98);
		StdDraw3D.setPenRadius(0.06);
		StdDraw3D.setPenColor(StdDraw3D.__<>RED, 220);
		StdDraw3D.overlayCircle((double)0f, (double)0f, 0.8);
		StdDraw3D.setPenColor(StdDraw3D.__<>RED, 220);
		StdDraw3D.overlayCircle((double)0f, (double)0f, 0.6);
		StdDraw3D.setPenColor(StdDraw3D.__<>WHITE);
		StdDraw3D.overlayText((double)0f, 0.91, "Standard Draw 3D - Test Program");
		StdDraw3D.overlayText((double)0f, -0.95, "You should see rotating text. Drag the mouse to orbit.");
		StdDraw3D.setPenColor(StdDraw3D.__<>YELLOW);
		StdDraw3D.setFont(new Font("Arial", 1, 16));
		StdDraw3D.Shape shape = StdDraw3D.text3D((double)0f, (double)0f, (double)0f, "StdDraw3D");
		shape.scale(3.5);
		shape.move(-0.7, -0.1, (double)0f);
		shape = StdDraw3D.combine(new StdDraw3D.Shape[]
		{
			shape
		});
		while (true)
		{
			shape.rotate((double)0f, 1.2, (double)0f);
			StdDraw3D.show(20);
		}
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static StdDraw3D.Camera access$100()
	{
		return StdDraw3D.camera;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static BufferedImage access$300()
	{
		return StdDraw3D.onscreenImage;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static bool access$400()
	{
		return StdDraw3D.infoDisplay;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static BufferedImage access$500()
	{
		return StdDraw3D.infoImage;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access$2600()
	{
		return StdDraw3D.offscreenGroup;
	}
	[Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static object access$2700()
	{
		return StdDraw3D.onscreenGroup;
	}
	[LineNumberTable(new byte[]
	{
		19,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		106,
		234,
		160,
		84,
		106,
		170,
		106,
		170,
		102,
		102,
		166,
		102,
		230,
		88,
		146,
		170,
		234,
		75
	})]
	static StdDraw3D()
	{
		StdDraw3D.__<>BLACK = Color.BLACK;
		StdDraw3D.__<>BLUE = Color.BLUE;
		StdDraw3D.__<>CYAN = Color.CYAN;
		StdDraw3D.__<>DARK_GRAY = Color.DARK_GRAY;
		StdDraw3D.__<>GRAY = Color.GRAY;
		StdDraw3D.__<>GREEN = Color.GREEN;
		StdDraw3D.__<>LIGHT_GRAY = Color.LIGHT_GRAY;
		StdDraw3D.__<>MAGENTA = Color.MAGENTA;
		StdDraw3D.__<>ORANGE = Color.ORANGE;
		StdDraw3D.__<>PINK = Color.PINK;
		StdDraw3D.__<>RED = Color.RED;
		StdDraw3D.__<>WHITE = Color.WHITE;
		StdDraw3D.__<>YELLOW = Color.YELLOW;
		StdDraw3D.keysDown = new TreeSet();
		StdDraw3D.keysTyped = new LinkedList();
		StdDraw3D.mouseLock = new java.lang.Object();
		StdDraw3D.keyLock = new java.lang.Object();
		StdDraw3D.initialized = false;
		StdDraw3D.fullscreen = false;
		StdDraw3D.immersive = false;
		StdDraw3D.showedOnce = true;
		StdDraw3D.renderedOnce = false;
		StdDraw3D.DEFAULT_FONT = new Font("Arial", 0, 16);
		StdDraw3D.DEFAULT_PEN_COLOR = StdDraw3D.__<>WHITE;
		StdDraw3D.DEFAULT_BGCOLOR = StdDraw3D.__<>BLACK;
		throw new NoClassDefFoundError("javax.media.j3d.BoundingSphere");
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.util;
using java.util.regex;
using System;
using System.Runtime.CompilerServices;
public sealed class StdIn : java.lang.Object
{
	private static Scanner scanner;
	private const string charsetName = "UTF-8";
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Locale usLocale;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern WHITESPACE_PATTERN;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern EMPTY_PATTERN;
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Pattern EVERYTHING_PATTERN;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(139)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int readInt()
	{
		return StdIn.scanner.nextInt();
	}
	[LineNumberTable(132)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string readString()
	{
		return StdIn.scanner.next();
	}
	[LineNumberTable(146)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double readDouble()
	{
		return StdIn.scanner.nextDouble();
	}
	[LineNumberTable(66)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool IsEmpty
	{
		return !StdIn.scanner.hasNext();
	}
	[LineNumberTable(new byte[]
	{
		68,
		108,
		134,
		149,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string readAll()
	{
		if (!StdIn.scanner.hasNextLine())
		{
			return "";
		}
		string result = StdIn.scanner.useDelimiter(StdIn.EVERYTHING_PATTERN).next();
		StdIn.scanner.useDelimiter(StdIn.WHITESPACE_PATTERN);
		return result;
	}
	[LineNumberTable(new byte[]
	{
		46,
		127,
		1,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string readLine()
	{
		string result;
		try
		{
			result = StdIn.scanner.nextLine();
		}
		catch (System.Exception arg_10_0)
		{
			if (ByteCodeHelper.MapException<java.lang.Exception>(arg_10_0, ByteCodeHelper.MapFlags.Unused) == null)
			{
				throw;
			}
			goto IL_1D;
		}
		return result;
		IL_1D:
		result = null;
		return result;
	}
	[LineNumberTable(75)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool hasNextLine()
	{
		return StdIn.scanner.hasNextLine();
	}
	[LineNumberTable(new byte[]
	{
		160,
		82,
		127,
		1,
		111,
		98,
		106,
		107,
		42,
		136
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string[] readAllStrings()
	{
		Pattern arg_1A_0 = StdIn.WHITESPACE_PATTERN;
		object _<ref> = StdIn.readAll();
		CharSequence input;
		input.__<ref> = _<ref>;
		string[] array = arg_1A_0.split(input);
		if (array.Length == 0 || java.lang.String.instancehelper_length(array[0]) > 0)
		{
			return array;
		}
		string[] array2 = new string[array.Length - 1];
		for (int i = 0; i < array.Length - 1; i++)
		{
			array2[i] = array[i + 1];
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		68,
		102,
		111,
		111,
		111,
		111
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool readBoolean()
	{
		string @this = StdIn.readString();
		if (java.lang.String.instancehelper_equalsIgnoreCase(@this, "true"))
		{
			return true;
		}
		if (java.lang.String.instancehelper_equalsIgnoreCase(@this, "false"))
		{
			return false;
		}
		if (java.lang.String.instancehelper_equals(@this, "1"))
		{
			return true;
		}
		if (java.lang.String.instancehelper_equals(@this, "0"))
		{
			return false;
		}
		Throwable.__<suppressFillInStackTrace>();
		throw new InputMismatchException();
	}
	[LineNumberTable(new byte[]
	{
		160,
		125,
		102,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void setScanner(Scanner scanner)
	{
		StdIn.scanner = scanner;
		StdIn.scanner.useLocale(StdIn.usLocale);
	}
	[LineNumberTable(new byte[]
	{
		160,
		95,
		102,
		104,
		103,
		43,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] readAllInts()
	{
		string[] array = StdIn.readAllStrings();
		int[] array2 = new int[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = Integer.parseInt(array[i]);
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		106,
		102,
		104,
		103,
		44,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] readAllDoubles()
	{
		string[] array = StdIn.readAllStrings();
		double[] array2 = new double[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = java.lang.Double.parseDouble(array[i]);
		}
		return array2;
	}
	[LineNumberTable(new byte[]
	{
		160,
		120,
		159,
		6
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void resync()
	{
		Scanner.__<clinit>();
		BufferedInputStream.__<clinit>();
		StdIn.setScanner(new Scanner(new BufferedInputStream(System.@in), "UTF-8"));
	}
	[LineNumberTable(28)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdIn()
	{
	}
	[LineNumberTable(new byte[]
	{
		34,
		112,
		107,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool hasNextChar()
	{
		StdIn.scanner.useDelimiter(StdIn.EMPTY_PATTERN);
		int result = StdIn.scanner.hasNext() ? 1 : 0;
		StdIn.scanner.useDelimiter(StdIn.WHITESPACE_PATTERN);
		return result != 0;
	}
	[LineNumberTable(new byte[]
	{
		55,
		112,
		139,
		127,
		1,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static char readChar()
	{
		StdIn.scanner.useDelimiter(StdIn.EMPTY_PATTERN);
		string @this = StdIn.scanner.next();
		if (!StdIn.$assertionsDisabled && java.lang.String.instancehelper_length(@this) != 1)
		{
			object arg_35_0 = "Internal (Std)In.readChar() error! Please contact the authors.";
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError(arg_35_0);
		}
		StdIn.scanner.useDelimiter(StdIn.WHITESPACE_PATTERN);
		return java.lang.String.instancehelper_charAt(@this, 0);
	}
	[LineNumberTable(153)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static float readFloat()
	{
		return StdIn.scanner.nextFloat();
	}
	[LineNumberTable(160)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static long readLong()
	{
		return StdIn.scanner.nextLong();
	}
	[LineNumberTable(167)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static short readShort()
	{
		return StdIn.scanner.nextShort();
	}
	[LineNumberTable(174)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static byte readByte()
	{
		return (byte)((sbyte)StdIn.scanner.nextByte());
	}
	[LineNumberTable(253), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int[] readInts()
	{
		return StdIn.readAllInts();
	}
	[LineNumberTable(261), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double[] readDoubles()
	{
		return StdIn.readAllDoubles();
	}
	[LineNumberTable(269), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static string[] readStrings()
	{
		return StdIn.readAllStrings();
	}
	[LineNumberTable(new byte[]
	{
		160,
		164,
		111,
		102,
		127,
		5,
		138,
		111,
		102,
		127,
		5,
		138,
		111,
		102,
		127,
		5,
		138,
		111,
		103,
		127,
		5,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		System.@out.println("Type a string: ");
		string str = StdIn.readString();
		System.@out.println(new StringBuilder().append("Your string was: ").append(str).toString());
		System.@out.println();
		System.@out.println("Type an int: ");
		int i = StdIn.readInt();
		System.@out.println(new StringBuilder().append("Your int was: ").append(i).toString());
		System.@out.println();
		System.@out.println("Type a bool: ");
		int b = StdIn.readBoolean() ? 1 : 0;
		System.@out.println(new StringBuilder().append("Your bool was: ").append(b != 0).toString());
		System.@out.println();
		System.@out.println("Type a double: ");
		double d = StdIn.readDouble();
		System.@out.println(new StringBuilder().append("Your double was: ").append(d).toString());
		System.@out.println();
	}
	[LineNumberTable(new byte[]
	{
		159,
		167,
		245,
		77,
		244,
		69,
		207,
		239,
		69,
		239,
		160,
		193,
		103
	})]
	static StdIn()
	{
		StdIn.$assertionsDisabled = !ClassLiteral<StdIn>.Value.desiredAssertionStatus();
		StdIn.usLocale = new Locale("en", "US");
		StdIn.WHITESPACE_PATTERN = Pattern.compile("\\p{javaWhitespace}+");
		StdIn.EMPTY_PATTERN = Pattern.compile("");
		StdIn.EVERYTHING_PATTERN = Pattern.compile("\\A");
		StdIn.resync();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.lang.reflect;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class StdInTest : java.lang.Object
{
	private sealed class __<CallerID> : CallerID
	{
		internal __<CallerID>()
		{
		}
	}
	public static bool testStdIn;
	public static Method resyncMethod;
	public static int testCount = 0;
	private static CallerID __<callerID>;
	[LineNumberTable(new byte[]
	{
		159,
		159,
		107,
		108,
		108,
		100,
		127,
		8,
		101,
		127,
		3,
		101,
		127,
		22,
		130,
		107,
		102,
		127,
		0,
		51,
		136,
		159,
		13,
		109,
		107,
		103,
		104,
		62,
		136,
		147
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static object escape(object obj)
	{
		if (obj is Character)
		{
			int num = (int)((Character)obj).charValue();
			int num2 = java.lang.String.instancehelper_indexOf("\b\t\n\f\r\"'\\", num);
			if (num2 >= 0)
			{
				return new StringBuilder().append("\\").append(java.lang.String.instancehelper_charAt("btnfr\"'\\", num2)).toString();
			}
			if (num < 32)
			{
				return new StringBuilder().append("\\").append(Integer.toOctalString(num)).toString();
			}
			if (num > 126)
			{
				return new StringBuilder().append("\\u").append(java.lang.String.format("%04X", new object[]
				{
					Integer.valueOf(num)
				})).toString();
			}
			return obj;
		}
		else
		{
			if (obj is string)
			{
				StringBuilder stringBuilder = new StringBuilder();
				char[] array = java.lang.String.instancehelper_toCharArray((string)obj);
				int i = array.Length;
				for (int j = 0; j < i; j++)
				{
					int c = (int)array[j];
					stringBuilder.append(StdInTest.escape(Character.valueOf((char)c)));
				}
				return new StringBuilder().append("\"").append(stringBuilder.toString()).append("\"").toString();
			}
			if (java.lang.Object.instancehelper_getClass(obj).isArray())
			{
				StringBuilder stringBuilder = new StringBuilder("[");
				int num2 = java.lang.reflect.Array.getLength(obj);
				for (int i = 0; i < num2; i++)
				{
					stringBuilder.append(" ").append(StdInTest.escape(java.lang.reflect.Array.get(obj, i)));
				}
				return stringBuilder.append("]").toString();
			}
			return obj;
		}
	}
	[LineNumberTable(new byte[]
	{
		159,
		124,
		98,
		98,
		134,
		223,
		8,
		2,
		97,
		241,
		70,
		255,
		26,
		71,
		226,
		59,
		98,
		146,
		98,
		210,
		145,
		99,
		123,
		107,
		166,
		231,
		69,
		99,
		155,
		122,
		255,
		41,
		87,
		229,
		43,
		98,
		103,
		110,
		223,
		39,
		98,
		103,
		110,
		223,
		39,
		98,
		103,
		110,
		115,
		255,
		39,
		69,
		113,
		110,
		159,
		31,
		133,
		104,
		105,
		105,
		102,
		159,
		66,
		108,
		121,
		31,
		75,
		235,
		70,
		98,
		107,
		223,
		51,
		230,
		1,
		235,
		160,
		65
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test(string str, object[][] objarr, bool b)
	{
		In @in = null;
		if (b)
		{
			UnsupportedEncodingException ex;
			try
			{
				System.setIn(new ByteArrayInputStream(java.lang.String.instancehelper_getBytes(str, "UTF-8")));
			}
			catch (UnsupportedEncodingException arg_24_0)
			{
				ex = ByteCodeHelper.MapException<UnsupportedEncodingException>(arg_24_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_2E;
			}
			IllegalAccessException ex2;
			InvocationTargetException ex3;
			try
			{
				try
				{
					StdInTest.resyncMethod.invoke(null, new object[0], StdInTest.__<GetCallerID>());
				}
				catch (IllegalAccessException arg_61_0)
				{
					ex2 = ByteCodeHelper.MapException<IllegalAccessException>(arg_61_0, ByteCodeHelper.MapFlags.NoRemapping);
					goto IL_76;
				}
			}
			catch (InvocationTargetException arg_6B_0)
			{
				ex3 = ByteCodeHelper.MapException<InvocationTargetException>(arg_6B_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_7A;
			}
			goto IL_B9;
			IL_76:
			IllegalAccessException @this = ex2;
			string arg_8E_0 = Throwable.instancehelper_toString(@this);
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_8E_0);
			IL_7A:
			InvocationTargetException this2 = ex3;
			string arg_A2_0 = Throwable.instancehelper_toString(this2);
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_A2_0);
			IL_2E:
			UnsupportedEncodingException this3 = ex;
			string arg_3F_0 = Throwable.instancehelper_toString(this3);
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_3F_0);
		}
		In.__<clinit>();
		@in = new In(new Scanner(str));
		IL_B9:
		int num = 0;
		int num2 = objarr.Length;
		int i = 0;
		while (i < num2)
		{
			object[] array = objarr[i];
			string text = (string)array[0];
			object obj = array[1];
			string text2 = "Failed input %s\nStep %d (%s)\n";
			object obj2;
			NoSuchMethodException ex4;
			IllegalAccessException ex5;
			InvocationTargetException ex6;
			try
			{
				try
				{
					try
					{
						Method method;
						if (b)
						{
							method = ClassLiteral<StdIn>.Value.getMethod(text, new Class[0], StdInTest.__<GetCallerID>());
						}
						else
						{
							method = java.lang.Object.instancehelper_getClass(@in).getMethod(text, new Class[0], StdInTest.__<GetCallerID>());
						}
						obj2 = method.invoke(@in, new object[0], StdInTest.__<GetCallerID>());
					}
					catch (NoSuchMethodException arg_141_0)
					{
						ex4 = ByteCodeHelper.MapException<NoSuchMethodException>(arg_141_0, ByteCodeHelper.MapFlags.NoRemapping);
						goto IL_160;
					}
				}
				catch (IllegalAccessException arg_14B_0)
				{
					ex5 = ByteCodeHelper.MapException<IllegalAccessException>(arg_14B_0, ByteCodeHelper.MapFlags.NoRemapping);
					goto IL_164;
				}
			}
			catch (InvocationTargetException arg_155_0)
			{
				ex6 = ByteCodeHelper.MapException<InvocationTargetException>(arg_155_0, ByteCodeHelper.MapFlags.NoRemapping);
				goto IL_168;
			}
			if (java.lang.Object.instancehelper_getClass(obj).isArray())
			{
				if (java.lang.Object.instancehelper_getClass(obj2).isArray())
				{
					object obj3 = obj2;
					object obj4 = obj;
					int length = java.lang.reflect.Array.getLength(obj3);
					int length2 = java.lang.reflect.Array.getLength(obj4);
					if (length2 != length)
					{
						StdOut.printf(new StringBuilder().append(text2).append("Expected %d, got %d items:\n%s\n").toString(), new object[]
						{
							StdInTest.escape(str),
							Integer.valueOf(num),
							text,
							Integer.valueOf(length2),
							Integer.valueOf(length),
							StdInTest.escape(obj3)
						});
					}
					else
					{
						for (int j = 0; j < length; j++)
						{
							if (!java.lang.Object.instancehelper_equals(java.lang.reflect.Array.get(obj3, j), java.lang.reflect.Array.get(obj4, j)))
							{
								StdOut.printf(new StringBuilder().append(text2).append("\nExpected [%d]=%s, got %s\n").toString(), new object[]
								{
									StdInTest.escape(str),
									Integer.valueOf(num),
									text,
									Integer.valueOf(j),
									StdInTest.escape(java.lang.reflect.Array.get(obj4, j)),
									StdInTest.escape(java.lang.reflect.Array.get(obj3, j))
								});
							}
						}
					}
					goto IL_47A;
				}
				StdOut.printf(new StringBuilder().append(text2).append("Expected array, got %s\n").toString(), new object[]
				{
					str,
					Integer.valueOf(num),
					text,
					obj2
				});
			}
			else
			{
				if (!java.lang.Object.instancehelper_equals(obj2, obj))
				{
					StdOut.printf(new StringBuilder().append(text2).append("Expected %s, got %s\n").toString(), new object[]
					{
						StdInTest.escape(str),
						Integer.valueOf(num),
						text,
						StdInTest.escape(obj),
						StdInTest.escape(obj2)
					});
					goto IL_47A;
				}
				goto IL_47A;
			}
			IL_480:
			i++;
			continue;
			IL_47A:
			num++;
			goto IL_480;
			IL_160:
			NoSuchMethodException this4 = ex4;
			StringWriter stringWriter = new StringWriter();
			Throwable.instancehelper_printStackTrace(this4, new PrintWriter(stringWriter));
			string arg_1CB_0 = new StringBuilder().append(java.lang.String.format(text2, new object[]
			{
				str,
				Integer.valueOf(num),
				text
			})).append(stringWriter.toString()).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_1CB_0);
			IL_164:
			IllegalAccessException this5 = ex5;
			stringWriter = new StringWriter();
			Throwable.instancehelper_printStackTrace(this5, new PrintWriter(stringWriter));
			string arg_228_0 = new StringBuilder().append(java.lang.String.format(text2, new object[]
			{
				str,
				Integer.valueOf(num),
				text
			})).append(stringWriter.toString()).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_228_0);
			IL_168:
			InvocationTargetException ex7 = ex6;
			stringWriter = new StringWriter();
			Throwable.instancehelper_printStackTrace(ex7, new PrintWriter(stringWriter));
			Throwable.instancehelper_printStackTrace(ex7.getCause(), new PrintWriter(stringWriter));
			string arg_298_0 = new StringBuilder().append(java.lang.String.format(text2, new object[]
			{
				str,
				Integer.valueOf(num),
				text
			})).append(stringWriter.toString()).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_298_0);
		}
	}
	[LineNumberTable(new byte[]
	{
		0,
		223,
		11,
		2,
		97,
		130
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool canResync()
	{
		try
		{
			StdInTest.resyncMethod = ClassLiteral<StdIn>.Value.getMethod("resync", new Class[0], StdInTest.__<GetCallerID>());
		}
		catch (NoSuchMethodException arg_23_0)
		{
			return false;
		}
		return true;
	}
	[LineNumberTable(new byte[]
	{
		16,
		104,
		103,
		104,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void test(string str, object[][] objarr)
	{
		StdInTest.test(str, objarr, false);
		if (StdInTest.testStdIn)
		{
			StdInTest.test(str, objarr, true);
		}
		StdInTest.testCount++;
	}
	[LineNumberTable(13)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public StdInTest()
	{
	}
	[LineNumberTable(new byte[]
	{
		116,
		138,
		103,
		140,
		138,
		255,
		160,
		135,
		70,
		255,
		88,
		69,
		223,
		63,
		255,
		88,
		69,
		223,
		37,
		223,
		37,
		255,
		112,
		69,
		255,
		61,
		69,
		102,
		127,
		9,
		111,
		106,
		112,
		109,
		111,
		112,
		248,
		58,
		235,
		72,
		108,
		255,
		160,
		153,
		70,
		223,
		31,
		255,
		160,
		77,
		70,
		255,
		117,
		76,
		223,
		51,
		255,
		85,
		71,
		255,
		160,
		75,
		69,
		255,
		160,
		75,
		69,
		255,
		160,
		75,
		69,
		255,
		160,
		75,
		69,
		223,
		62,
		223,
		47,
		255,
		63,
		69,
		255,
		88,
		69,
		255,
		160,
		75,
		70,
		255,
		101,
		71,
		255,
		99,
		71,
		255,
		59,
		69,
		223,
		35,
		255,
		160,
		71,
		70,
		223,
		60,
		127,
		0
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		StdInTest.testStdIn = StdInTest.canResync();
		if (StdInTest.testStdIn)
		{
			StdOut.println("Note: any errors appear duplicated since tests run 2x.");
		}
		else
		{
			StdOut.println("Note: StdIn.resync is private, only In will be tested.");
		}
		StdInTest.test("this is a test", new object[][]
		{
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"this",
					"is",
					"a",
					"test"
				}
			},
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\n\n\n", new object[][]
		{
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readAll",
				"\n\n\n"
			}
		});
		StdInTest.test("", new object[][]
		{
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\t\t  \t\t", new object[][]
		{
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readAll",
				"\t\t  \t\t"
			}
		});
		StdInTest.test("readLine consumes newline\nyeah!", new object[][]
		{
			new object[]
			{
				"readLine",
				"readLine consumes newline"
			},
			new object[]
			{
				"readChar",
				Character.valueOf('y')
			}
		});
		StdInTest.test("readString doesn't consume spaces", new object[][]
		{
			new object[]
			{
				"readString",
				"readString"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			}
		});
		StdInTest.test("\n\nblank lines test", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				"blank lines test"
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("   \n  \t \n  correct  \n\t\n\t .trim replacement \n\t", new object[][]
		{
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"correct",
					".trim",
					"replacement"
				}
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			}
		});
		StringBuilder stringBuilder = new StringBuilder();
		int arg_3E4_0 = 2000;
		int arg_3DF_0 = 2;
		int[] array = new int[2];
		int num = arg_3DF_0;
		array[1] = num;
		num = arg_3E4_0;
		array[0] = num;
		object[][] array2 = (object[][])ByteCodeHelper.multianewarray(typeof(object[][]).TypeHandle, array);
		for (int i = 0; i < 1000; i++)
		{
			stringBuilder.append((char)i);
			stringBuilder.append((char)(i + 8000));
			array2[2 * i][0] = "readChar";
			array2[2 * i + 1][0] = "readChar";
			array2[2 * i][1] = Character.valueOf((char)i);
			array2[2 * i + 1][1] = Character.valueOf((char)(i + 8000));
		}
		StdInTest.test(stringBuilder.toString(), array2);
		StdInTest.test(" this \n and \that \n ", new object[][]
		{
			new object[]
			{
				"readString",
				"this"
			},
			new object[]
			{
				"readString",
				"and"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			},
			new object[]
			{
				"readString",
				"hat"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			},
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"readLine",
				" "
			}
		});
		StdInTest.test(" 1 2 3 \n\t 4 5 ", new object[][]
		{
			new object[]
			{
				"readAllInts",
				new int[]
				{
					1,
					2,
					3,
					4,
					5
				}
			}
		});
		StdInTest.test(" 0 1 False true falsE True ", new object[][]
		{
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"readBoolean",
				java.lang.Boolean.valueOf(true)
			}
		});
		StdInTest.test(" \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u205f\u3000", new object[][]
		{
			new object[]
			{
				"readString",
				"\u00a0"
			},
			new object[]
			{
				"readString",
				"\u2007"
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"isEmpty",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readChar",
				Character.valueOf('\u2008')
			}
		});
		StdInTest.test("a\u2028b\u2029c\u001fd\ve\u0085f", new object[][]
		{
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"a",
					"b",
					"c",
					"d",
					"e\u0085f"
				}
			}
		});
		StdInTest.test("a\u2028b\u2029c\u001fd\ve\u0085f", new object[][]
		{
			new object[]
			{
				"readLine",
				"a"
			},
			new object[]
			{
				"readLine",
				"b"
			},
			new object[]
			{
				"readLine",
				"c\u001fd\ve"
			},
			new object[]
			{
				"readLine",
				"f"
			}
		});
		StdInTest.test("\u2028\u2029", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\n\n", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\r\n\r\n", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\n\r", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("\r\n", new object[][]
		{
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextChar",
				java.lang.Boolean.valueOf(false)
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test("3E4 \t -0.5 \n \t +4", new object[][]
		{
			new object[]
			{
				"readAllDoubles",
				new double[]
				{
					30000.0,
					-0.5,
					4.0
				}
			}
		});
		StdInTest.test(" whitespace ", new object[][]
		{
			new object[]
			{
				"readString",
				"whitespace"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test(" whitespace \n", new object[][]
		{
			new object[]
			{
				"readString",
				"whitespace"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test(" whitespace \n ", new object[][]
		{
			new object[]
			{
				"readString",
				"whitespace"
			},
			new object[]
			{
				"readChar",
				Character.valueOf(' ')
			},
			new object[]
			{
				"readLine",
				""
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(true)
			},
			new object[]
			{
				"readLine",
				" "
			},
			new object[]
			{
				"hasNextLine",
				java.lang.Boolean.valueOf(false)
			}
		});
		StdInTest.test(" 34 -12983   3.25\n\t foo!", new object[][]
		{
			new object[]
			{
				"readByte",
				java.lang.Byte.valueOf(34)
			},
			new object[]
			{
				"readShort",
				Short.valueOf(-12983)
			},
			new object[]
			{
				"readDouble",
				java.lang.Double.valueOf(3.25)
			},
			new object[]
			{
				"readAll",
				"\n\t foo!"
			}
		});
		StdInTest.test("30000000000  3.5 3e4, foo   \t\t ya", new object[][]
		{
			new object[]
			{
				"readLong",
				Long.valueOf(30000000000L)
			},
			new object[]
			{
				"readFloat",
				Float.valueOf(3.5f)
			},
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"3e4,",
					"foo",
					"ya"
				}
			}
		});
		StdInTest.test(" \u0001 foo \u0001 foo \u0001 foo", new object[][]
		{
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"\u0001",
					"foo",
					"\u0001",
					"foo",
					"\u0001",
					"foo"
				}
			}
		});
		StdInTest.test(" \u2005 foo \u2005 foo \u2005 foo", new object[][]
		{
			new object[]
			{
				"readAllStrings",
				new string[]
				{
					"foo",
					"foo",
					"foo"
				}
			}
		});
		StdInTest.test(" \u0001 foo \u0001 foo \u0001 foo", new object[][]
		{
			new object[]
			{
				"readString",
				"\u0001"
			},
			new object[]
			{
				"readString",
				"foo"
			},
			new object[]
			{
				"readString",
				"\u0001"
			},
			new object[]
			{
				"readString",
				"foo"
			},
			new object[]
			{
				"readString",
				"\u0001"
			},
			new object[]
			{
				"readString",
				"foo"
			}
		});
		StdInTest.test(" \u2005 foo \u2005 foo \u2005 foo", new object[][]
		{
			new object[]
			{
				"readString",
				"foo"
			},
			new object[]
			{
				"readString",
				"foo"
			},
			new object[]
			{
				"readString",
				"foo"
			}
		});
		StdOut.printf("Ran %d tests.\n", new object[]
		{
			Integer.valueOf(StdInTest.testCount)
		});
	}
	private static CallerID __<GetCallerID>()
	{
		if (StdInTest.__<callerID> == null)
		{
			StdInTest.__<callerID> = new StdInTest.__<CallerID>();
		}
		return StdInTest.__<callerID>;
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.io;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public sealed class StdOut : java.lang.Object
{
	private const string charsetName = "UTF-8";
	[Modifiers(Modifiers.Private | Modifiers.Static | Modifiers.Final)]
	private static Locale US_LOCALE;
	private static PrintWriter @out;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		160,
		94,
		114,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void printf(string str, params object[] objarr)
	{
		StdOut.@out.printf(StdOut.US_LOCALE, str, objarr);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		85,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(object obj)
	{
		StdOut.@out.print(obj);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		8,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println()
	{
		StdOut.@out.println();
	}
	[LineNumberTable(new byte[]
	{
		15,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(object obj)
	{
		StdOut.@out.println(obj);
	}
	[LineNumberTable(new byte[]
	{
		125,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(int i)
	{
		StdOut.@out.print(i);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		50,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(int i)
	{
		StdOut.@out.println(i);
	}
	[LineNumberTable(new byte[]
	{
		159,
		124,
		66,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(bool b)
	{
		StdOut.@out.println(b);
	}
	[LineNumberTable(new byte[]
	{
		36,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(double d)
	{
		StdOut.@out.println(d);
	}
	[LineNumberTable(44)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdOut()
	{
	}
	[LineNumberTable(new byte[]
	{
		1,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void close()
	{
		StdOut.@out.close();
	}
	[LineNumberTable(new byte[]
	{
		159,
		123,
		162,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(char ch)
	{
		StdOut.@out.println(ch);
	}
	[LineNumberTable(new byte[]
	{
		43,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(float f)
	{
		StdOut.@out.println(f);
	}
	[LineNumberTable(new byte[]
	{
		57,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(long l)
	{
		StdOut.@out.println(l);
	}
	[LineNumberTable(new byte[]
	{
		159,
		114,
		130,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(short s)
	{
		StdOut.@out.println((int)s);
	}
	[LineNumberTable(new byte[]
	{
		159,
		112,
		99,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void println(byte b)
	{
		int x = (int)((sbyte)b);
		StdOut.@out.println(x);
	}
	[LineNumberTable(new byte[]
	{
		78,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print()
	{
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		107,
		162,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(bool b)
	{
		StdOut.@out.print(b);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		105,
		162,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(char ch)
	{
		StdOut.@out.print(ch);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		109,
		108,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(double d)
	{
		StdOut.@out.print(d);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		117,
		108,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(float f)
	{
		StdOut.@out.print(f);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		69,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(long l)
	{
		StdOut.@out.print(l);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		95,
		162,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(short s)
	{
		StdOut.@out.print((int)s);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		159,
		93,
		163,
		107,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void print(byte b)
	{
		int i = (int)((sbyte)b);
		StdOut.@out.print(i);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		103,
		110,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void printf(Locale l, string str, params object[] objarr)
	{
		StdOut.@out.printf(l, str, objarr);
		StdOut.@out.flush();
	}
	[LineNumberTable(new byte[]
	{
		160,
		111,
		106,
		103,
		102,
		127,
		4
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		StdOut.println("Test");
		StdOut.println(17);
		StdOut.println(true);
		StdOut.printf("%.6f\n", new object[]
		{
			java.lang.Double.valueOf(0.14285714285714285)
		});
	}
	[LineNumberTable(new byte[]
	{
		159,
		172,
		244,
		72,
		159,
		13,
		110
	})]
	static StdOut()
	{
		StdOut.US_LOCALE = new Locale("en", "US");
		UnsupportedEncodingException ex;
		try
		{
			StdOut.@out = new PrintWriter(new OutputStreamWriter(System.@out, "UTF-8"), true);
		}
		catch (UnsupportedEncodingException arg_33_0)
		{
			ex = ByteCodeHelper.MapException<UnsupportedEncodingException>(arg_33_0, ByteCodeHelper.MapFlags.NoRemapping);
			goto IL_3D;
		}
		return;
		IL_3D:
		UnsupportedEncodingException x = ex;
		System.@out.println(x);
	}
}

using IKVM.Attributes;
using IKVM.Runtime;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public sealed class StdRandom : java.lang.Object
{
	private static java.util.Random random;
	private static long seed;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		160,
		179,
		99,
		102,
		107,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(int[] iarr)
	{
		int num = iarr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i + StdRandom.uniform(num - i);
			int num3 = iarr[i];
			iarr[i] = iarr[num2];
			iarr[num2] = num3;
		}
	}
	[LineNumberTable(new byte[]
	{
		51,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int uniform(int i)
	{
		if (i <= 0)
		{
			string arg_0E_0 = "Parameter N must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_0E_0);
		}
		return StdRandom.random.nextInt(i);
	}
	[LineNumberTable(new byte[]
	{
		93,
		114,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool bernoulli(double d)
	{
		if (d < (double)0f || d > (double)1f)
		{
			string arg_1C_0 = "Probability must be between 0.0 and 1.0";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		return StdRandom.uniform() < d;
	}
	[LineNumberTable(new byte[]
	{
		74,
		116,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int uniform(int i1, int i2)
	{
		if (i2 <= i1)
		{
			string arg_0E_0 = "Invalid range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_0E_0);
		}
		if ((long)i2 - (long)i1 >= (long)((ulong)2147483647))
		{
			string arg_2B_0 = "Invalid range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_2B_0);
		}
		return i1 + StdRandom.uniform(i2 - i1);
	}
	[LineNumberTable(93)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double uniform()
	{
		return StdRandom.random.nextDouble();
	}
	[LineNumberTable(new byte[]
	{
		84,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double uniform(double d1, double d2)
	{
		if (d2 <= d1)
		{
			string arg_10_0 = "Invalid range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_10_0);
		}
		return d1 + StdRandom.uniform() * (d2 - d1);
	}
	[LineNumberTable(new byte[]
	{
		160,
		153,
		99,
		102,
		107,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(object[] objarr)
	{
		int num = objarr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i + StdRandom.uniform(num - i);
			object obj = objarr[i];
			objarr[i] = objarr[num2];
			objarr[num2] = obj;
		}
	}
	[LineNumberTable(new byte[]
	{
		112,
		117,
		117,
		105,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double gaussian()
	{
		double num;
		double num3;
		do
		{
			num = StdRandom.uniform(-1.0, (double)1f);
			double num2 = StdRandom.uniform(-1.0, (double)1f);
			num3 = num * num + num2 * num2;
		}
		while (num3 >= (double)1f || num3 == (double)0f);
		return num * java.lang.Math.sqrt(-2.0 * java.lang.Math.log(num3) / num3);
	}
	[LineNumberTable(new byte[]
	{
		28,
		102,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void setSeed(long l)
	{
		StdRandom.seed = l;
		java.util.Random.__<clinit>();
		StdRandom.random = new java.util.Random(StdRandom.seed);
	}
	public static long getSeed()
	{
		return StdRandom.seed;
	}
	[LineNumberTable(176)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double gaussian(double d1, double d2)
	{
		return d1 + d2 * StdRandom.gaussian();
	}
	[LineNumberTable(new byte[]
	{
		160,
		118,
		106,
		102,
		103,
		127,
		34,
		7,
		198,
		116,
		255,
		6,
		69,
		103,
		102,
		105,
		104,
		7,
		200
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int discrete(double[] darr)
	{
		double num = 1E-14;
		double num2 = (double)0f;
		for (int i = 0; i < darr.Length; i++)
		{
			if (darr[i] < (double)0f)
			{
				string arg_52_0 = new StringBuilder().append("array entry ").append(i).append(" is negative: ").append(darr[i]).toString();
				Throwable.__<suppressFillInStackTrace>();
				throw new IllegalArgumentException(arg_52_0);
			}
			num2 += darr[i];
		}
		if (num2 > (double)1f + num || num2 < (double)1f - num)
		{
			string arg_98_0 = new StringBuilder().append("sum of array entries not equal to one: ").append(num2).toString();
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_98_0);
		}
		int j;
		while (true)
		{
			double num3 = StdRandom.uniform();
			num2 = (double)0f;
			for (j = 0; j < darr.Length; j++)
			{
				num2 += darr[j];
				if (num2 > num3)
				{
					return j;
				}
			}
		}
		return j;
	}
	[LineNumberTable(72)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdRandom()
	{
	}
	[LineNumberTable(115), Obsolete]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double random()
	{
		return StdRandom.uniform();
	}
	[LineNumberTable(152)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static bool bernoulli()
	{
		return StdRandom.bernoulli(0.5);
	}
	[LineNumberTable(new byte[]
	{
		160,
		70,
		114,
		144
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int geometric(double d)
	{
		if (d < (double)0f || d > (double)1f)
		{
			string arg_1C_0 = "Probability must be between 0.0 and 1.0";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1C_0);
		}
		return ByteCodeHelper.d2i(java.lang.Math.ceil(java.lang.Math.log(StdRandom.uniform()) / java.lang.Math.log((double)1f - d)));
	}
	[LineNumberTable(new byte[]
	{
		160,
		81,
		105,
		176,
		98,
		102,
		138,
		100,
		105,
		100
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int poisson(double d)
	{
		if (d <= (double)0f)
		{
			string arg_13_0 = "Parameter lambda must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		int num = 0;
		double num2 = (double)1f;
		double num3 = java.lang.Math.exp(-d);
		do
		{
			num++;
			num2 *= StdRandom.uniform();
		}
		while (num2 >= num3);
		return num - 1;
	}
	[LineNumberTable(new byte[]
	{
		160,
		100,
		105,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double pareto(double d)
	{
		if (d <= (double)0f)
		{
			string arg_13_0 = "Shape parameter alpha must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		return java.lang.Math.pow((double)1f - StdRandom.uniform(), -1.0 / d) - (double)1f;
	}
	[LineNumberTable(223)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double cauchy()
	{
		return java.lang.Math.tan(3.1415926535897931 * (StdRandom.uniform() - 0.5));
	}
	[LineNumberTable(new byte[]
	{
		160,
		144,
		105,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double exp(double d)
	{
		if (d <= (double)0f)
		{
			string arg_13_0 = "Rate lambda must be positive";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_13_0);
		}
		return -java.lang.Math.log((double)1f - StdRandom.uniform()) / d;
	}
	[LineNumberTable(new byte[]
	{
		160,
		166,
		99,
		102,
		107,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(double[] darr)
	{
		int num = darr.Length;
		for (int i = 0; i < num; i++)
		{
			int num2 = i + StdRandom.uniform(num - i);
			double num3 = darr[i];
			darr[i] = darr[num2];
			darr[num2] = num3;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		193,
		109,
		144,
		102,
		109,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(object[] objarr, int i1, int i2)
	{
		if (i1 < 0 || i1 > i2 || i2 >= objarr.Length)
		{
			string arg_17_0 = "Illegal subarray range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		for (int j = i1; j <= i2; j++)
		{
			int num = j + StdRandom.uniform(i2 - j + 1);
			object obj = objarr[j];
			objarr[j] = objarr[num];
			objarr[num] = obj;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		208,
		109,
		144,
		102,
		109,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(double[] darr, int i1, int i2)
	{
		if (i1 < 0 || i1 > i2 || i2 >= darr.Length)
		{
			string arg_17_0 = "Illegal subarray range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		for (int j = i1; j <= i2; j++)
		{
			int num = j + StdRandom.uniform(i2 - j + 1);
			double num2 = darr[j];
			darr[j] = darr[num];
			darr[num] = num2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		223,
		109,
		144,
		102,
		109,
		100,
		102,
		228,
		60,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void shuffle(int[] iarr, int i1, int i2)
	{
		if (i1 < 0 || i1 > i2 || i2 >= iarr.Length)
		{
			string arg_17_0 = "Illegal subarray range";
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException(arg_17_0);
		}
		for (int j = i1; j <= i2; j++)
		{
			int num = j + StdRandom.uniform(i2 - j + 1);
			int num2 = iarr[j];
			iarr[j] = iarr[num];
			iarr[num] = num2;
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		238,
		105,
		114,
		159,
		24,
		127,
		4,
		105,
		127,
		0,
		127,
		16,
		127,
		7,
		127,
		16,
		126,
		229,
		58,
		233,
		73,
		112,
		120,
		63,
		1,
		136,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		if (strarr.Length == 2)
		{
			StdRandom.setSeed(Long.parseLong(strarr[1]));
		}
		double[] darr = new double[]
		{
			0.5,
			0.3,
			0.1,
			0.1
		};
		StdOut.println(new StringBuilder().append("seed = ").append(StdRandom.getSeed()).toString());
		for (int i = 0; i < num; i++)
		{
			StdOut.printf("%2d ", new object[]
			{
				Integer.valueOf(StdRandom.uniform(100))
			});
			StdOut.printf("%8.5f ", new object[]
			{
				java.lang.Double.valueOf(StdRandom.uniform(10.0, 99.0))
			});
			StdOut.printf("%5b ", new object[]
			{
				java.lang.Boolean.valueOf(StdRandom.bernoulli(0.5))
			});
			StdOut.printf("%7.5f ", new object[]
			{
				java.lang.Double.valueOf(StdRandom.gaussian(9.0, 0.2))
			});
			StdOut.printf("%2d ", new object[]
			{
				Integer.valueOf(StdRandom.discrete(darr))
			});
			StdOut.println();
		}
		string[] array = java.lang.String.instancehelper_split("A B C D E F G", " ");
		string[] array2 = array;
		int num2 = array2.Length;
		for (int j = 0; j < num2; j++)
		{
			string str = array2[j];
			StdOut.print(new StringBuilder().append(str).append(" ").toString());
		}
		StdOut.println();
	}
	[LineNumberTable(new byte[]
	{
		17,
		106,
		116
	})]
	static StdRandom()
	{
		StdRandom.seed = System.currentTimeMillis();
		java.util.Random.__<clinit>();
		StdRandom.random = new java.util.Random(StdRandom.seed);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public sealed class StdStats : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		160,
		144,
		102,
		103,
		39,
		166
	})]
	public static double sum(double[] darr)
	{
		double num = (double)0f;
		for (int i = 0; i < darr.Length; i++)
		{
			num += darr[i];
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		155,
		109,
		112,
		102,
		102,
		39,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double sum(double[] darr, int i1, int i2)
	{
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_17_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_17_0);
		}
		double num = (double)0f;
		for (int j = i1; j <= i2; j++)
		{
			num += darr[j];
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		68,
		110,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double mean(double[] darr)
	{
		if (darr.Length == 0)
		{
			return double.NaN;
		}
		double num = StdStats.sum(darr);
		return num / (double)darr.Length;
	}
	[LineNumberTable(new byte[]
	{
		77,
		102,
		109,
		112,
		109,
		106
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double mean(double[] darr, int i1, int i2)
	{
		int num = i2 - i1 + 1;
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_1D_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_1D_0);
		}
		if (num == 0)
		{
			return double.NaN;
		}
		double num2 = StdStats.sum(darr, i1, i2);
		return num2 / (double)num;
	}
	[LineNumberTable(new byte[]
	{
		89,
		110,
		102,
		103,
		40,
		166
	})]
	public static double mean(int[] iarr)
	{
		if (iarr.Length == 0)
		{
			return double.NaN;
		}
		double num = (double)0f;
		for (int i = 0; i < iarr.Length; i++)
		{
			num += (double)iarr[i];
		}
		return num / (double)iarr.Length;
	}
	[LineNumberTable(new byte[]
	{
		101,
		110,
		104,
		102,
		103,
		47,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double var(double[] darr)
	{
		if (darr.Length == 0)
		{
			return double.NaN;
		}
		double num = StdStats.mean(darr);
		double num2 = (double)0f;
		for (int i = 0; i < darr.Length; i++)
		{
			num2 += (darr[i] - num) * (darr[i] - num);
		}
		return num2 / (double)(darr.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		114,
		102,
		109,
		112,
		109,
		106,
		102,
		102,
		47,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double var(double[] darr, int i1, int i2)
	{
		int num = i2 - i1 + 1;
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_1D_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_1D_0);
		}
		if (num == 0)
		{
			return double.NaN;
		}
		double num2 = StdStats.mean(darr, i1, i2);
		double num3 = (double)0f;
		for (int j = i1; j <= i2; j++)
		{
			num3 += (darr[j] - num2) * (darr[j] - num2);
		}
		return num3 / (double)(num - 1);
	}
	[LineNumberTable(new byte[]
	{
		160,
		66,
		110,
		104,
		102,
		103,
		49,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double var(int[] iarr)
	{
		if (iarr.Length == 0)
		{
			return double.NaN;
		}
		double num = StdStats.mean(iarr);
		double num2 = (double)0f;
		for (int i = 0; i < iarr.Length; i++)
		{
			num2 += ((double)iarr[i] - num) * ((double)iarr[i] - num);
		}
		return num2 / (double)(iarr.Length - 1);
	}
	[LineNumberTable(new byte[]
	{
		160,
		79,
		110,
		104,
		102,
		103,
		47,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double varp(double[] darr)
	{
		if (darr.Length == 0)
		{
			return double.NaN;
		}
		double num = StdStats.mean(darr);
		double num2 = (double)0f;
		for (int i = 0; i < darr.Length; i++)
		{
			num2 += (darr[i] - num) * (darr[i] - num);
		}
		return num2 / (double)darr.Length;
	}
	[LineNumberTable(new byte[]
	{
		160,
		92,
		102,
		109,
		112,
		109,
		106,
		102,
		102,
		47,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double varp(double[] darr, int i1, int i2)
	{
		int num = i2 - i1 + 1;
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_1D_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_1D_0);
		}
		if (num == 0)
		{
			return double.NaN;
		}
		double num2 = StdStats.mean(darr, i1, i2);
		double num3 = (double)0f;
		for (int j = i1; j <= i2; j++)
		{
			num3 += (darr[j] - num2) * (darr[j] - num2);
		}
		return num3 / (double)num;
	}
	[LineNumberTable(new byte[]
	{
		33,
		106,
		103,
		42,
		166
	})]
	public static double min(double[] darr)
	{
		double num = double.PositiveInfinity;
		for (int i = 0; i < darr.Length; i++)
		{
			if (darr[i] < num)
			{
				num = darr[i];
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		106,
		103,
		42,
		166
	})]
	public static double max(double[] darr)
	{
		double num = double.NegativeInfinity;
		for (int i = 0; i < darr.Length; i++)
		{
			if (darr[i] > num)
			{
				num = darr[i];
			}
		}
		return num;
	}
	[LineNumberTable(223)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double stddev(double[] darr)
	{
		return java.lang.Math.sqrt(StdStats.var(darr));
	}
	[LineNumberTable(42)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private StdStats()
	{
	}
	[LineNumberTable(new byte[]
	{
		9,
		109,
		112,
		106,
		102,
		42,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double max(double[] darr, int i1, int i2)
	{
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_17_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_17_0);
		}
		double num = double.NegativeInfinity;
		for (int j = i1; j <= i2; j++)
		{
			if (darr[j] > num)
			{
				num = darr[j];
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		22,
		102,
		103,
		42,
		166
	})]
	public static int max(int[] iarr)
	{
		int num = -2147483648;
		for (int i = 0; i < iarr.Length; i++)
		{
			if (iarr[i] > num)
			{
				num = iarr[i];
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		44,
		109,
		112,
		106,
		102,
		42,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double min(double[] darr, int i1, int i2)
	{
		if (i1 < 0 || i2 >= darr.Length || i1 > i2)
		{
			string arg_17_0 = "Subarray indices out of bounds";
			Throwable.__<suppressFillInStackTrace>();
			throw new RuntimeException(arg_17_0);
		}
		double num = double.PositiveInfinity;
		for (int j = i1; j <= i2; j++)
		{
			if (darr[j] < num)
			{
				num = darr[j];
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		57,
		102,
		103,
		42,
		166
	})]
	public static int min(int[] iarr)
	{
		int num = 2147483647;
		for (int i = 0; i < iarr.Length; i++)
		{
			if (iarr[i] < num)
			{
				num = iarr[i];
			}
		}
		return num;
	}
	[LineNumberTable(230)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double stddev(double[] darr, int i1, int i2)
	{
		return java.lang.Math.sqrt(StdStats.var(darr, i1, i2));
	}
	[LineNumberTable(237)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double stddev(int[] iarr)
	{
		return java.lang.Math.sqrt(StdStats.var(iarr));
	}
	[LineNumberTable(244)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double stddevp(double[] darr)
	{
		return java.lang.Math.sqrt(StdStats.varp(darr));
	}
	[LineNumberTable(251)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static double stddevp(double[] darr, int i1, int i2)
	{
		return java.lang.Math.sqrt(StdStats.varp(darr, i1, i2));
	}
	[LineNumberTable(new byte[]
	{
		160,
		168,
		98,
		103,
		38,
		166
	})]
	public static int sum(int[] iarr)
	{
		int num = 0;
		for (int i = 0; i < iarr.Length; i++)
		{
			num += iarr[i];
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		160,
		179,
		99,
		110,
		119,
		102,
		42,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void plotPoints(double[] darr)
	{
		int num = darr.Length;
		StdDraw.setXscale((double)0f, (double)(num - 1));
		StdDraw.setPenRadius((double)1f / (3.0 * (double)num));
		for (int i = 0; i < num; i++)
		{
			StdDraw.point((double)i, darr[i]);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		191,
		99,
		110,
		101,
		102,
		51,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void plotLines(double[] darr)
	{
		int num = darr.Length;
		StdDraw.setXscale((double)0f, (double)(num - 1));
		StdDraw.setPenRadius();
		for (int i = 1; i < num; i++)
		{
			StdDraw.line((double)(i - 1), darr[i - 1], (double)i, darr[i]);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		203,
		99,
		110,
		102,
		63,
		11,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void plotBars(double[] darr)
	{
		int num = darr.Length;
		StdDraw.setXscale((double)0f, (double)(num - 1));
		for (int i = 0; i < num; i++)
		{
			StdDraw.filledRectangle((double)i, darr[i] / 2.0, 0.25, darr[i] / 2.0);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		216,
		102,
		126,
		126,
		126,
		127,
		1
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double[] darr = StdArrayIO.readDouble1D();
		StdOut.printf("       min %7.3f\n", new object[]
		{
			java.lang.Double.valueOf(StdStats.min(darr))
		});
		StdOut.printf("      mean %7.3f\n", new object[]
		{
			java.lang.Double.valueOf(StdStats.mean(darr))
		});
		StdOut.printf("       max %7.3f\n", new object[]
		{
			java.lang.Double.valueOf(StdStats.max(darr))
		});
		StdOut.printf("   std dev %7.3f\n", new object[]
		{
			java.lang.Double.valueOf(StdStats.stddev(darr))
		});
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Stopwatch : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private long start;
	[LineNumberTable(new byte[]
	{
		159,
		168,
		104,
		107
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Stopwatch()
	{
		this.start = System.currentTimeMillis();
	}
	[LineNumberTable(new byte[]
	{
		159,
		177,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double elapsedTime()
	{
		long num = System.currentTimeMillis();
		return (double)(num - this.start) / 1000.0;
	}
}

using IKVM.Attributes;
using java.lang;
using java.lang.management;
using System;
using System.Runtime.CompilerServices;
public class StopwatchCPU : java.lang.Object
{
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private ThreadMXBean threadTimer;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private long start;
	private const double NANOSECONDS_PER_SECOND = 1000000000.0;
	[LineNumberTable(new byte[]
	{
		159,
		172,
		104,
		107,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public StopwatchCPU()
	{
		this.threadTimer = ManagementFactory.getThreadMXBean();
		this.start = this.threadTimer.getCurrentThreadCpuTime();
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		108
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double elapsedTime()
	{
		long currentThreadCpuTime = this.threadTimer.getCurrentThreadCpuTime();
		return (double)(currentThreadCpuTime - this.start) / 1000000000.0;
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class SuffixArray : java.lang.Object
{
	[EnclosingMethod("SuffixArray", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("SuffixArray.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[Implements(new string[]
	{
		"java.lang.Comparable"
	}), InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LSuffixArray$Suffix;>;"), SourceFile("SuffixArray.java")]
	internal sealed class Suffix : java.lang.Object, Comparable
	{
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private string text;
		[Modifiers(Modifiers.Private | Modifiers.Final)]
		private int index;
		[LineNumberTable(70), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Suffix(string text, int num, SuffixArray.1) : this(text, num)
		{
		}
		[LineNumberTable(70), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static int access$100(SuffixArray.Suffix suffix)
		{
			return suffix.index;
		}
		[LineNumberTable(70), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int access$200(SuffixArray.Suffix suffix)
		{
			return suffix.length();
		}
		[LineNumberTable(70), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static char access$300(SuffixArray.Suffix suffix, int num)
		{
			return suffix.charAt(num);
		}
		[LineNumberTable(96)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string toString()
		{
			return java.lang.String.instancehelper_substring(this.text, this.index);
		}
		[LineNumberTable(82)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private char charAt(int num)
		{
			return java.lang.String.instancehelper_charAt(this.text, this.index + num);
		}
		[LineNumberTable(79)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int length()
		{
			return java.lang.String.instancehelper_length(this.text) - this.index;
		}
		[LineNumberTable(new byte[]
		{
			24,
			104,
			103,
			103
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Suffix(string text, int num)
		{
			this.text = text;
			this.index = num;
		}
		[LineNumberTable(new byte[]
		{
			36,
			102,
			114,
			102,
			114,
			18,
			198
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(SuffixArray.Suffix suffix)
		{
			if (this == suffix)
			{
				return 0;
			}
			int num = java.lang.Math.min(this.length(), suffix.length());
			for (int i = 0; i < num; i++)
			{
				if (this.charAt(i) < suffix.charAt(i))
				{
					return -1;
				}
				if (this.charAt(i) > suffix.charAt(i))
				{
					return 1;
				}
			}
			return this.length() - suffix.length();
		}
		[LineNumberTable(70), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compareTo(object obj)
		{
			return this.compareTo((SuffixArray.Suffix)obj);
		}
		[HideFromJava]
		int IComparable.Object;)IcompareTo(object obj)
		{
			return this.compareTo(obj);
		}
	}
	private SuffixArray.Suffix[] suffixes;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		12,
		104,
		103,
		108,
		102,
		48,
		134,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SuffixArray(string str)
	{
		int num = java.lang.String.instancehelper_length(str);
		this.suffixes = new SuffixArray.Suffix[num];
		for (int i = 0; i < num; i++)
		{
			this.suffixes[i] = new SuffixArray.Suffix(str, i, null);
		}
		Arrays.sort(this.suffixes);
	}
	[LineNumberTable(new byte[]
	{
		113,
		108,
		100,
		104,
		111,
		106,
		106,
		98,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int rank(string str)
	{
		int i = 0;
		int num = this.suffixes.Length - 1;
		while (i <= num)
		{
			int num2 = i + (num - i) / 2;
			int num3 = SuffixArray.compare(str, this.suffixes[num2]);
			if (num3 < 0)
			{
				num = num2 - 1;
			}
			else
			{
				if (num3 <= 0)
				{
					return num2;
				}
				i = num2 + 1;
			}
		}
		return i;
	}
	[LineNumberTable(new byte[]
	{
		67,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int index(int i)
	{
		if (i < 0 || i >= this.suffixes.Length)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return SuffixArray.Suffix.access$100(this.suffixes[i]);
	}
	[LineNumberTable(new byte[]
	{
		81,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int lcp(int i)
	{
		if (i < 1 || i >= this.suffixes.Length)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return SuffixArray.lcp(this.suffixes[i], this.suffixes[i - 1]);
	}
	[LineNumberTable(105)]
	public virtual int length()
	{
		return this.suffixes.Length;
	}
	[LineNumberTable(new byte[]
	{
		87,
		114,
		102,
		50,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int lcp(SuffixArray.Suffix suffix, SuffixArray.Suffix suffix2)
	{
		int num = java.lang.Math.min(SuffixArray.Suffix.access$200(suffix), SuffixArray.Suffix.access$200(suffix2));
		for (int i = 0; i < num; i++)
		{
			if (SuffixArray.Suffix.access$300(suffix, i) != SuffixArray.Suffix.access$300(suffix2, i))
			{
				return i;
			}
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		126,
		114,
		102,
		114,
		18,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private static int compare(string @this, SuffixArray.Suffix suffix)
	{
		int num = java.lang.Math.min(java.lang.String.instancehelper_length(@this), SuffixArray.Suffix.access$200(suffix));
		for (int i = 0; i < num; i++)
		{
			if (java.lang.String.instancehelper_charAt(@this, i) < SuffixArray.Suffix.access$300(suffix, i))
			{
				return -1;
			}
			if (java.lang.String.instancehelper_charAt(@this, i) > SuffixArray.Suffix.access$300(suffix, i))
			{
				return 1;
			}
		}
		return java.lang.String.instancehelper_length(@this) - SuffixArray.Suffix.access$200(suffix);
	}
	[LineNumberTable(new byte[]
	{
		101,
		121
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string select(int i)
	{
		if (i < 0 || i >= this.suffixes.Length)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.suffixes[i].toString();
	}
	[LineNumberTable(new byte[]
	{
		160,
		74,
		122,
		199,
		106,
		138,
		110,
		104,
		127,
		28,
		127,
		8,
		111,
		99,
		191,
		28,
		105,
		255,
		28,
		54,
		233,
		77
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = java.lang.String.instancehelper_trim(java.lang.String.instancehelper_replaceAll(StdIn.readAll(), "\\s+", " "));
		SuffixArray suffixArray = new SuffixArray(text);
		StdOut.println("  i ind lcp rnk select");
		StdOut.println("---------------------------");
		for (int i = 0; i < java.lang.String.instancehelper_length(text); i++)
		{
			int num = suffixArray.index(i);
			string text2 = new StringBuilder().append("\"").append(java.lang.String.instancehelper_substring(text, num, java.lang.Math.min(num + 50, java.lang.String.instancehelper_length(text)))).append("\"").toString();
			if (!SuffixArray.$assertionsDisabled && !java.lang.String.instancehelper_equals(java.lang.String.instancehelper_substring(text, num), suffixArray.select(i)))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			int i2 = suffixArray.rank(java.lang.String.instancehelper_substring(text, num));
			if (i == 0)
			{
				StdOut.printf("%3d %3d %3s %3d %s\n", new object[]
				{
					Integer.valueOf(i),
					Integer.valueOf(num),
					"-",
					Integer.valueOf(i2),
					text2
				});
			}
			else
			{
				int i3 = suffixArray.lcp(i);
				StdOut.printf("%3d %3d %3d %3d %s\n", new object[]
				{
					Integer.valueOf(i),
					Integer.valueOf(num),
					Integer.valueOf(i3),
					Integer.valueOf(i2),
					text2
				});
			}
		}
	}
	[LineNumberTable(55)]
	static SuffixArray()
	{
		SuffixArray.$assertionsDisabled = !ClassLiteral<SuffixArray>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class SuffixArrayX : java.lang.Object
{
	private const int CUTOFF = 5;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private char[] text;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int[] index;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private int N;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		28,
		102,
		107,
		161,
		100,
		114,
		100,
		103,
		115,
		119,
		115,
		100,
		165,
		107,
		111,
		109
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void sort(int num, int num2, int num3)
	{
		if (num2 <= num + 5)
		{
			this.insertion(num, num2, num3);
			return;
		}
		int num4 = num;
		int num5 = num2;
		int num6 = (int)this.text[this.index[num] + num3];
		int i = num + 1;
		while (i <= num5)
		{
			int num7 = (int)this.text[this.index[i] + num3];
			if (num7 < num6)
			{
				int arg_56_1 = num4;
				num4++;
				int arg_56_2 = i;
				i++;
				this.exch(arg_56_1, arg_56_2);
			}
			else if (num7 > num6)
			{
				int arg_69_1 = i;
				int arg_69_2 = num5;
				num5 += -1;
				this.exch(arg_69_1, arg_69_2);
			}
			else
			{
				i++;
			}
		}
		this.sort(num, num4 - 1, num3);
		if (num6 > 0)
		{
			this.sort(num4, num5, num3 + 1);
		}
		this.sort(num5 + 1, num2, num3);
	}
	[LineNumberTable(new byte[]
	{
		51,
		102,
		127,
		2,
		42,
		38,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void insertion(int num, int num2, int num3)
	{
		for (int i = num; i <= num2; i++)
		{
			int num4 = i;
			while (num4 > num && this.less(this.index[num4], this.index[num4 - 1], num3))
			{
				this.exch(num4, num4 - 1);
				num4 += -1;
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		72,
		105,
		112,
		105
	})]
	private void exch(int num, int num2)
	{
		int num3 = this.index[num];
		this.index[num] = this.index[num2];
		this.index[num2] = num3;
	}
	[LineNumberTable(new byte[]
	{
		58,
		102,
		101,
		101,
		114,
		116,
		116,
		101,
		135
	})]
	private bool less(int num, int num2, int num3)
	{
		if (num == num2)
		{
			return false;
		}
		num += num3;
		num2 += num3;
		while (num < this.N && num2 < this.N)
		{
			if (this.text[num] < this.text[num2])
			{
				return true;
			}
			if (this.text[num] > this.text[num2])
			{
				return false;
			}
			num++;
			num2++;
		}
		return num > num2;
	}
	[LineNumberTable(new byte[]
	{
		113,
		98,
		114,
		116,
		101,
		101,
		134
	})]
	private int lcp(int num, int num2)
	{
		int num3 = 0;
		while (num < this.N && num2 < this.N)
		{
			if (this.text[num] != this.text[num2])
			{
				return num3;
			}
			num++;
			num2++;
			num3++;
		}
		return num3;
	}
	[LineNumberTable(new byte[]
	{
		160,
		91,
		103,
		98,
		109,
		127,
		3,
		101,
		166,
		107,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int compare(string this2, int num)
	{
		int num2 = java.lang.String.instancehelper_length(this2);
		int num3 = 0;
		while (num < this.N && num3 < num2)
		{
			if (java.lang.String.instancehelper_charAt(this2, num3) != this.text[num])
			{
				return (int)(java.lang.String.instancehelper_charAt(this2, num3) - this.text[num]);
			}
			num++;
			num3++;
		}
		if (num < this.N)
		{
			return -1;
		}
		if (num3 < num2)
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(new byte[]
	{
		11,
		104,
		108,
		120,
		108,
		113,
		107,
		41,
		230,
		69,
		114
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SuffixArrayX(string str)
	{
		this.N = java.lang.String.instancehelper_length(str);
		str = new StringBuilder().append(str).append('\0').toString();
		this.text = java.lang.String.instancehelper_toCharArray(str);
		this.index = new int[this.N];
		for (int i = 0; i < this.N; i++)
		{
			this.index[i] = i;
		}
		this.sort(0, this.N - 1, 0);
	}
	[LineNumberTable(new byte[]
	{
		94,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int index(int i)
	{
		if (i < 0 || i >= this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.index[i];
	}
	[LineNumberTable(new byte[]
	{
		160,
		78,
		107,
		100,
		104,
		112,
		106,
		106,
		98,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int rank(string str)
	{
		int i = 0;
		int num = this.N - 1;
		while (i <= num)
		{
			int num2 = i + (num - i) / 2;
			int num3 = this.compare(str, this.index[num2]);
			if (num3 < 0)
			{
				num = num2 - 1;
			}
			else
			{
				if (num3 <= 0)
				{
					return num2;
				}
				i = num2 + 1;
			}
		}
		return i;
	}
	[LineNumberTable(new byte[]
	{
		160,
		66,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string select(int i)
	{
		if (i < 0 || i >= this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return java.lang.String.newhelper(this.text, this.index[i], this.N - this.index[i]);
	}
	[LineNumberTable(new byte[]
	{
		107,
		120
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int lcp(int i)
	{
		if (i < 1 || i >= this.N)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		return this.lcp(this.index[i], this.index[i - 1]);
	}
	public virtual int length()
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		160,
		109,
		122,
		135,
		103,
		98,
		118,
		117,
		127,
		24,
		127,
		24,
		127,
		42,
		127,
		42,
		103,
		103,
		226,
		56,
		235,
		78,
		106,
		138,
		112,
		106,
		127,
		30,
		112,
		127,
		10,
		100,
		223,
		30,
		106,
		255,
		30,
		53,
		235,
		78
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string text = java.lang.String.instancehelper_trim(java.lang.String.instancehelper_replaceAll(StdIn.readAll(), "\n", " "));
		SuffixArrayX suffixArrayX = new SuffixArrayX(text);
		SuffixArray suffixArray = new SuffixArray(text);
		int num = 1;
		int i = 0;
		while (num != 0 && i < java.lang.String.instancehelper_length(text))
		{
			if (suffixArray.index(i) != suffixArrayX.index(i))
			{
				StdOut.println(new StringBuilder().append("suffixReference(").append(i).append(") = ").append(suffixArray.index(i)).toString());
				StdOut.println(new StringBuilder().append("suffix(").append(i).append(") = ").append(suffixArrayX.index(i)).toString());
				string obj = new StringBuilder().append("\"").append(java.lang.String.instancehelper_substring(text, suffixArrayX.index(i), java.lang.Math.min(suffixArrayX.index(i) + 50, java.lang.String.instancehelper_length(text)))).append("\"").toString();
				string text2 = new StringBuilder().append("\"").append(java.lang.String.instancehelper_substring(text, suffixArray.index(i), java.lang.Math.min(suffixArray.index(i) + 50, java.lang.String.instancehelper_length(text)))).append("\"").toString();
				StdOut.println(obj);
				StdOut.println(text2);
				num = 0;
			}
			i++;
		}
		StdOut.println("  i ind lcp rnk  select");
		StdOut.println("---------------------------");
		for (i = 0; i < java.lang.String.instancehelper_length(text); i++)
		{
			int num2 = suffixArrayX.index(i);
			string text2 = new StringBuilder().append("\"").append(java.lang.String.instancehelper_substring(text, num2, java.lang.Math.min(num2 + 50, java.lang.String.instancehelper_length(text)))).append("\"").toString();
			int i2 = suffixArrayX.rank(java.lang.String.instancehelper_substring(text, num2));
			if (!SuffixArrayX.$assertionsDisabled && !java.lang.String.instancehelper_equals(java.lang.String.instancehelper_substring(text, num2), suffixArrayX.select(i)))
			{
				Throwable.__<suppressFillInStackTrace>();
				throw new AssertionError();
			}
			if (i == 0)
			{
				StdOut.printf("%3d %3d %3s %3d  %s\n", new object[]
				{
					Integer.valueOf(i),
					Integer.valueOf(num2),
					"-",
					Integer.valueOf(i2),
					text2
				});
			}
			else
			{
				int i3 = suffixArrayX.lcp(i);
				StdOut.printf("%3d %3d %3d %3d  %s\n", new object[]
				{
					Integer.valueOf(i),
					Integer.valueOf(num2),
					Integer.valueOf(i3),
					Integer.valueOf(i2),
					text2
				});
			}
		}
	}
	[LineNumberTable(50)]
	static SuffixArrayX()
	{
		SuffixArrayX.$assertionsDisabled = !ClassLiteral<SuffixArrayX>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class SymbolDigraph : java.lang.Object
{
	[Signature("LST<Ljava/lang/String;Ljava/lang/Integer;>;")]
	private ST st;
	private string[] keys;
	private Digraph G;
	[LineNumberTable(new byte[]
	{
		3,
		104,
		203,
		103,
		104,
		109,
		103,
		112,
		30,
		198,
		165,
		118,
		127,
		10,
		255,
		3,
		69,
		118,
		103,
		107,
		109,
		121,
		105,
		123,
		14,
		200,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SymbolDigraph(string str1, string str2)
	{
		this.st = new ST();
		In @in = new In(str1);
		while (@in.hasNextLine())
		{
			string[] array = java.lang.String.instancehelper_split(@in.readLine(), str2);
			for (int i = 0; i < array.Length; i++)
			{
				if (!this.st.contains(array[i]))
				{
					this.st.put(array[i], Integer.valueOf(this.st.size()));
				}
			}
		}
		this.keys = new string[this.st.size()];
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			this.keys[((Integer)this.st.get(text)).intValue()] = text;
		}
		this.G = new Digraph(this.st.size());
		@in = new In(str1);
		while (@in.hasNextLine())
		{
			string[] array = java.lang.String.instancehelper_split(@in.readLine(), str2);
			int i = ((Integer)this.st.get(array[0])).intValue();
			for (int j = 1; j < array.Length; j++)
			{
				int i2 = ((Integer)this.st.get(array[j])).intValue();
				this.G.addEdge(i, i2);
			}
		}
	}
	public virtual Digraph G()
	{
		return this.G;
	}
	[LineNumberTable(102)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int index(string str)
	{
		return ((Integer)this.st.get(str)).intValue();
	}
	[LineNumberTable(111)]
	public virtual string name(int i)
	{
		return this.keys[i];
	}
	[LineNumberTable(93)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(string str)
	{
		return this.st.contains(str);
	}
	[LineNumberTable(new byte[]
	{
		78,
		100,
		100,
		104,
		103,
		106,
		103,
		127,
		18,
		159,
		9,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		string str2 = strarr[1];
		SymbolDigraph symbolDigraph = new SymbolDigraph(str, str2);
		Digraph digraph = symbolDigraph.G();
		while (!StdIn.IsEmpty)
		{
			string str3 = StdIn.readLine();
			Iterator iterator = digraph.adj(symbolDigraph.index(str3)).iterator();
			while (iterator.MoveNext())
			{
				int i = ((Integer)iterator.Current).intValue();
				StdOut.println(new StringBuilder().append("   ").append(symbolDigraph.name(i)).toString());
			}
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class SymbolGraph : java.lang.Object
{
	[Signature("LST<Ljava/lang/String;Ljava/lang/Integer;>;")]
	private ST st;
	private string[] keys;
	private Graph G;
	[LineNumberTable(new byte[]
	{
		29,
		104,
		203,
		135,
		104,
		109,
		103,
		112,
		30,
		198,
		101,
		191,
		0,
		118,
		127,
		10,
		255,
		3,
		69,
		118,
		103,
		107,
		109,
		121,
		105,
		123,
		14,
		200,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public SymbolGraph(string str1, string str2)
	{
		this.st = new ST();
		In @in = new In(str1);
		while (!@in.IsEmpty)
		{
			string[] array = java.lang.String.instancehelper_split(@in.readLine(), str2);
			for (int i = 0; i < array.Length; i++)
			{
				if (!this.st.contains(array[i]))
				{
					this.st.put(array[i], Integer.valueOf(this.st.size()));
				}
			}
		}
		StdOut.println(new StringBuilder().append("Done reading ").append(str1).toString());
		this.keys = new string[this.st.size()];
		Iterator iterator = this.st.keys().iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			this.keys[((Integer)this.st.get(text)).intValue()] = text;
		}
		this.G = new Graph(this.st.size());
		@in = new In(str1);
		while (@in.hasNextLine())
		{
			string[] array = java.lang.String.instancehelper_split(@in.readLine(), str2);
			int i = ((Integer)this.st.get(array[0])).intValue();
			for (int j = 1; j < array.Length; j++)
			{
				int i2 = ((Integer)this.st.get(array[j])).intValue();
				this.G.addEdge(i, i2);
			}
		}
	}
	public virtual Graph G()
	{
		return this.G;
	}
	[LineNumberTable(121)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(string str)
	{
		return this.st.contains(str);
	}
	[LineNumberTable(130)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int index(string str)
	{
		return ((Integer)this.st.get(str)).intValue();
	}
	[LineNumberTable(139)]
	public virtual string name(int i)
	{
		return this.keys[i];
	}
	[LineNumberTable(new byte[]
	{
		106,
		100,
		100,
		104,
		103,
		106,
		103,
		109,
		106,
		127,
		12,
		159,
		9,
		130,
		159,
		11,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		string str2 = strarr[1];
		SymbolGraph symbolGraph = new SymbolGraph(str, str2);
		Graph graph = symbolGraph.G();
		while (StdIn.hasNextLine())
		{
			string str3 = StdIn.readLine();
			if (symbolGraph.contains(str3))
			{
				int i = symbolGraph.index(str3);
				Iterator iterator = graph.adj(i).iterator();
				while (iterator.MoveNext())
				{
					int i2 = ((Integer)iterator.Current).intValue();
					StdOut.println(new StringBuilder().append("   ").append(symbolGraph.name(i2)).toString());
				}
			}
			else
			{
				StdOut.println(new StringBuilder().append("input not contain '").append(str3).append("'").toString());
			}
		}
	}
}

using IKVM.Attributes;
using ikvm.@internal;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class TarjanSCC : java.lang.Object
{
	private bool[] marked;
	private int[] id;
	private int[] low;
	private int pre;
	private int count;
	[Signature("LStack<Ljava/lang/Integer;>;")]
	private global::Stack stack;
	[Modifiers(Modifiers.Static | Modifiers.Final | Modifiers.Synthetic)]
	internal static bool $assertionsDisabled;
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void __<clinit>()
	{
	}
	[LineNumberTable(new byte[]
	{
		28,
		105,
		123,
		105,
		113,
		127,
		8,
		116,
		152,
		181,
		119,
		111,
		111,
		101,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void dfs(Digraph digraph, int num)
	{
		this.marked[num] = true;
		int[] arg_23_0 = this.low;
		int num2 = this.pre;
		int arg_23_2 = num2;
		this.pre = num2 + 1;
		arg_23_0[num] = arg_23_2;
		int num3 = this.low[num];
		this.stack.push(Integer.valueOf(num));
		Iterator iterator = digraph.adj(num).iterator();
		while (iterator.MoveNext())
		{
			int num4 = ((Integer)iterator.Current).intValue();
			if (!this.marked[num4])
			{
				this.dfs(digraph, num4);
			}
			if (this.low[num4] < num3)
			{
				num3 = this.low[num4];
			}
		}
		if (num3 < this.low[num])
		{
			this.low[num] = num3;
			return;
		}
		int num5;
		do
		{
			num5 = ((Integer)this.stack.pop()).intValue();
			this.id[num5] = this.count;
			this.low[num5] = digraph.V();
		}
		while (num5 != num);
		this.count++;
	}
	[LineNumberTable(new byte[]
	{
		78,
		103,
		107,
		107,
		127,
		3,
		2,
		38,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private bool check(Digraph digraph)
	{
		TransitiveClosure transitiveClosure = new TransitiveClosure(digraph);
		for (int i = 0; i < digraph.V(); i++)
		{
			for (int j = 0; j < digraph.V(); j++)
			{
				if (this.stronglyConnected(i, j) != ((!transitiveClosure.reachable(i, j) || !transitiveClosure.reachable(j, i)) ? false : true))
				{
					return false;
				}
			}
		}
		return true;
	}
	[LineNumberTable(114)]
	public virtual bool stronglyConnected(int i1, int i2)
	{
		return this.id[i1] == this.id[i2];
	}
	[LineNumberTable(new byte[]
	{
		14,
		104,
		113,
		107,
		113,
		113,
		107,
		50,
		230,
		69,
		123
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public TarjanSCC(Digraph d)
	{
		this.marked = new bool[d.V()];
		this.stack = new global::Stack();
		this.id = new int[d.V()];
		this.low = new int[d.V()];
		for (int i = 0; i < d.V(); i++)
		{
			if (!this.marked[i])
			{
				this.dfs(d, i);
			}
		}
		if (!TarjanSCC.$assertionsDisabled && !this.check(d))
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new AssertionError();
		}
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(123)]
	public virtual int id(int i)
	{
		return this.id[i];
	}
	[LineNumberTable(new byte[]
	{
		92,
		110,
		103,
		167,
		103,
		191,
		0,
		109,
		104,
		42,
		168,
		109,
		55,
		232,
		69,
		104,
		127,
		9,
		159,
		3,
		229,
		60,
		232,
		71
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		TarjanSCC tarjanSCC = new TarjanSCC(digraph);
		int num = tarjanSCC.count();
		StdOut.println(new StringBuilder().append(num).append(" components").toString());
		global::Queue[] array = (global::Queue[])new global::Queue[num];
		for (int j = 0; j < num; j++)
		{
			array[j] = new global::Queue();
		}
		for (int j = 0; j < digraph.V(); j++)
		{
			array[tarjanSCC.id(j)].enqueue(Integer.valueOf(j));
		}
		for (int j = 0; j < num; j++)
		{
			Iterator iterator = array[j].iterator();
			while (iterator.MoveNext())
			{
				int i2 = ((Integer)iterator.Current).intValue();
				StdOut.print(new StringBuilder().append(i2).append(" ").toString());
			}
			StdOut.println();
		}
	}
	[LineNumberTable(50)]
	static TarjanSCC()
	{
		TarjanSCC.$assertionsDisabled = !ClassLiteral<TarjanSCC>.Value.desiredAssertionStatus();
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class ThreeSum : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		17,
		99,
		98,
		105,
		104,
		106,
		110,
		4,
		40,
		38,
		233,
		73
	})]
	public static int count(int[] iarr)
	{
		int num = iarr.Length;
		int num2 = 0;
		for (int i = 0; i < num; i++)
		{
			for (int j = i + 1; j < num; j++)
			{
				for (int k = j + 1; k < num; k++)
				{
					if (iarr[i] + iarr[j] + iarr[k] == 0)
					{
						num2++;
					}
				}
			}
		}
		return num2;
	}
	[LineNumberTable(42)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ThreeSum()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		191,
		99,
		105,
		107,
		104,
		109,
		31,
		28,
		38,
		41,
		233,
		73
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void printAll(int[] iarr)
	{
		int num = iarr.Length;
		for (int i = 0; i < num; i++)
		{
			for (int j = i + 1; j < num; j++)
			{
				for (int k = j + 1; k < num; k++)
				{
					if (iarr[i] + iarr[j] + iarr[k] == 0)
					{
						StdOut.println(new StringBuilder().append(iarr[i]).append(" ").append(iarr[j]).append(" ").append(iarr[k]).toString());
					}
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		37,
		110,
		135,
		102,
		103,
		127,
		5,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int[] iarr = @in.readAllInts();
		Stopwatch stopwatch = new Stopwatch();
		int i = ThreeSum.count(iarr);
		StdOut.println(new StringBuilder().append("elapsed time = ").append(stopwatch.elapsedTime()).toString());
		StdOut.println(i);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class ThreeSumFast : java.lang.Object
{
	[LineNumberTable(new byte[]
	{
		12,
		103,
		44,
		134
	})]
	private static bool containsDuplicates(int[] array)
	{
		for (int i = 1; i < array.Length; i++)
		{
			if (array[i] == array[i - 1])
			{
				return true;
			}
		}
		return false;
	}
	[LineNumberTable(new byte[]
	{
		40,
		99,
		102,
		120,
		98,
		102,
		104,
		112,
		9,
		38,
		230,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static int count(int[] iarr)
	{
		int num = iarr.Length;
		Arrays.sort(iarr);
		if (ThreeSumFast.containsDuplicates(iarr))
		{
			string arg_1B_0 = "array contains duplicate integers";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1B_0);
		}
		int num2 = 0;
		for (int i = 0; i < num; i++)
		{
			for (int j = i + 1; j < num; j++)
			{
				int num3 = Arrays.binarySearch(iarr, -(iarr[i] + iarr[j]));
				if (num3 > j)
				{
					num2++;
				}
			}
		}
		return num2;
	}
	[LineNumberTable(58)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public ThreeSumFast()
	{
	}
	[LineNumberTable(new byte[]
	{
		23,
		99,
		102,
		120,
		105,
		104,
		111,
		31,
		32,
		41,
		233,
		70
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void printAll(int[] iarr)
	{
		int num = iarr.Length;
		Arrays.sort(iarr);
		if (ThreeSumFast.containsDuplicates(iarr))
		{
			string arg_1B_0 = "array contains duplicate integers";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_1B_0);
		}
		for (int i = 0; i < num; i++)
		{
			for (int j = i + 1; j < num; j++)
			{
				int num2 = Arrays.binarySearch(iarr, -(iarr[i] + iarr[j]));
				if (num2 > j)
				{
					StdOut.println(new StringBuilder().append(iarr[i]).append(" ").append(iarr[j]).append(" ").append(iarr[num2]).toString());
				}
			}
		}
	}
	[LineNumberTable(new byte[]
	{
		59,
		110,
		103,
		103,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In @in = new In(strarr[0]);
		int[] iarr = @in.readAllInts();
		int i = ThreeSumFast.count(iarr);
		StdOut.println(i);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class TopM : java.lang.Object
{
	[LineNumberTable(36)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TopM()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		186,
		105,
		137,
		135,
		102,
		103,
		167,
		105,
		103,
		162,
		103,
		127,
		0,
		107,
		127,
		1,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int num = Integer.parseInt(strarr[0]);
		MinPQ minPQ = new MinPQ(num + 1);
		while (StdIn.hasNextLine())
		{
			string str = StdIn.readLine();
			Transaction obj = new Transaction(str);
			minPQ.insert(obj);
			if (minPQ.size() > num)
			{
				minPQ.delMin();
			}
		}
		global::Stack stack = new global::Stack();
		Iterator iterator = minPQ.iterator();
		while (iterator.MoveNext())
		{
			Transaction obj2 = (Transaction)iterator.Current;
			stack.push(obj2);
		}
		iterator = stack.iterator();
		while (iterator.MoveNext())
		{
			Transaction obj2 = (Transaction)iterator.Current;
			StdOut.println(obj2);
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
public class Topological : java.lang.Object
{
	[Signature("Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	private Iterable order;
	[LineNumberTable(new byte[]
	{
		24,
		104,
		103,
		104,
		103,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Topological(EdgeWeightedDigraph ewd)
	{
		EdgeWeightedDirectedCycle edgeWeightedDirectedCycle = new EdgeWeightedDirectedCycle(ewd);
		if (!edgeWeightedDirectedCycle.hasCycle())
		{
			DepthFirstOrder depthFirstOrder = new DepthFirstOrder(ewd);
			this.order = depthFirstOrder.reversePost();
		}
	}
	public virtual bool hasOrder()
	{
		return this.order != null;
	}
	[Signature("()Ljava/lang/Iterable<Ljava/lang/Integer;>;")]
	public virtual Iterable order()
	{
		return this.order;
	}
	[LineNumberTable(new byte[]
	{
		11,
		104,
		103,
		104,
		103,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Topological(Digraph d)
	{
		DirectedCycle directedCycle = new DirectedCycle(d);
		if (!directedCycle.hasCycle())
		{
			DepthFirstOrder depthFirstOrder = new DepthFirstOrder(d);
			this.order = depthFirstOrder.reversePost();
		}
	}
	[LineNumberTable(new byte[]
	{
		56,
		100,
		100,
		104,
		108,
		127,
		10,
		143
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		string str = strarr[0];
		string str2 = strarr[1];
		SymbolDigraph symbolDigraph = new SymbolDigraph(str, str2);
		Topological topological = new Topological(symbolDigraph.G());
		Iterator iterator = topological.order().iterator();
		while (iterator.MoveNext())
		{
			int i = ((Integer)iterator.Current).intValue();
			StdOut.println(symbolDigraph.name(i));
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Comparable"
}), Signature("Ljava/lang/Object;Ljava/lang/Comparable<LTransaction;>;")]
public class Transaction : java.lang.Object, Comparable
{
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Public | Modifiers.Static), Signature("Ljava/lang/Object;Ljava/util/Comparator<LTransaction;>;"), SourceFile("Transaction.java")]
	public class HowMuchOrder : java.lang.Object, Comparator
	{
		[LineNumberTable(158)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public HowMuchOrder()
		{
		}
		[LineNumberTable(new byte[]
		{
			110,
			112,
			112
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Transaction t1, Transaction t2)
		{
			if (Transaction.access$200(t1) < Transaction.access$200(t2))
			{
				return -1;
			}
			if (Transaction.access$200(t1) > Transaction.access$200(t2))
			{
				return 1;
			}
			return 0;
		}
		[LineNumberTable(158), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj1, object obj2)
		{
			return this.compare((Transaction)obj1, (Transaction)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Public | Modifiers.Static), Signature("Ljava/lang/Object;Ljava/util/Comparator<LTransaction;>;"), SourceFile("Transaction.java")]
	public class WhenOrder : java.lang.Object, Comparator
	{
		[LineNumberTable(149)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public WhenOrder()
		{
		}
		[LineNumberTable(151)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Transaction t1, Transaction t2)
		{
			return Transaction.access$100(t1).compareTo(Transaction.access$100(t2));
		}
		[LineNumberTable(149), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj1, object obj2)
		{
			return this.compare((Transaction)obj1, (Transaction)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Implements(new string[]
	{
		"java.util.Comparator"
	}), InnerClass(null, Modifiers.Public | Modifiers.Static), Signature("Ljava/lang/Object;Ljava/util/Comparator<LTransaction;>;"), SourceFile("Transaction.java")]
	public class WhoOrder : java.lang.Object, Comparator
	{
		[LineNumberTable(140)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public WhoOrder()
		{
		}
		[LineNumberTable(142)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(Transaction t1, Transaction t2)
		{
			return java.lang.String.instancehelper_compareTo(Transaction.access$000(t1), Transaction.access$000(t2));
		}
		[LineNumberTable(140), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public virtual int compare(object obj1, object obj2)
		{
			return this.compare((Transaction)obj1, (Transaction)obj2);
		}
		[HideFromJava]
		bool Comparator.Object;)Zequals(object obj)
		{
			return java.lang.Object.instancehelper_equals(this, obj);
		}
	}
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private string who;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private global::Date when;
	[Modifiers(Modifiers.Private | Modifiers.Final)]
	private double amount;
	[LineNumberTable(new byte[]
	{
		5,
		104,
		108,
		105,
		115,
		106,
		118,
		104,
		122,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Transaction(string str)
	{
		string[] array = java.lang.String.instancehelper_split(str, "\\s+");
		this.who = array[0];
		global::Date.__<clinit>();
		this.when = new global::Date(array[1]);
		double num = java.lang.Double.parseDouble(array[2]);
		if (num == (double)0f)
		{
			this.amount = (double)0f;
		}
		else
		{
			this.amount = num;
		}
		if (java.lang.Double.isNaN(this.amount) || java.lang.Double.isInfinite(this.amount))
		{
			string arg_7C_0 = "Amount cannot be NaN or infinite";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_7C_0);
		}
	}
	[LineNumberTable(new byte[]
	{
		55,
		112,
		112
	})]
	public virtual int compareTo(Transaction t)
	{
		if (this.amount < t.amount)
		{
			return -1;
		}
		if (this.amount > t.amount)
		{
			return 1;
		}
		return 0;
	}
	[LineNumberTable(new byte[]
	{
		159,
		181,
		104,
		114,
		112,
		103,
		103,
		119,
		105
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Transaction(string str, global::Date d1, double d2)
	{
		if (java.lang.Double.isNaN(d2) || java.lang.Double.isInfinite(d2))
		{
			string arg_24_0 = "Amount cannot be NaN or infinite";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_24_0);
		}
		this.who = str;
		this.when = d1;
		if (d2 == (double)0f)
		{
			this.amount = (double)0f;
		}
		else
		{
			this.amount = d2;
		}
	}
	public virtual string who()
	{
		return this.who;
	}
	public virtual global::Date when()
	{
		return this.when;
	}
	public virtual double amount()
	{
		return this.amount;
	}
	[LineNumberTable(95)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		return java.lang.String.format("%-10s %10s %8.2f", new object[]
		{
			this.who,
			this.when,
			java.lang.Double.valueOf(this.amount)
		});
	}
	[LineNumberTable(new byte[]
	{
		66,
		102,
		101,
		112,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override bool equals(object obj)
	{
		if (obj == this)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (obj.GetType() != this.GetType())
		{
			return false;
		}
		Transaction transaction = (Transaction)obj;
		return this.amount == transaction.amount && java.lang.String.instancehelper_equals(this.who, transaction.who) && this.when.equals(transaction.when);
	}
	[LineNumberTable(new byte[]
	{
		80,
		99,
		113,
		113,
		118
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override int hashCode()
	{
		int num = 17;
		num = 31 * num + java.lang.String.instancehelper_hashCode(this.who);
		num = 31 * num + this.when.hashCode();
		return 31 * num + java.lang.Double.valueOf(this.amount).hashCode();
	}
	[LineNumberTable(new byte[]
	{
		121,
		103,
		109,
		109,
		109,
		141,
		106,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		133,
		106,
		107,
		103,
		40,
		134,
		103
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		Transaction[] array = new Transaction[]
		{
			new Transaction("Turing   6/17/1990  644.08"),
			new Transaction("Tarjan   3/26/2002 4121.85"),
			new Transaction("Knuth    6/14/1999  288.34"),
			new Transaction("Dijkstra 8/22/2007 2678.40")
		};
		StdOut.println("Unsorted");
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by date");
		Arrays.sort(array, new Transaction.WhenOrder());
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by customer");
		Arrays.sort(array, new Transaction.WhoOrder());
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
		StdOut.println("Sort by amount");
		Arrays.sort(array, new Transaction.HowMuchOrder());
		for (int i = 0; i < array.Length; i++)
		{
			StdOut.println(array[i]);
		}
		StdOut.println();
	}
	[LineNumberTable(23), Modifiers(Modifiers.Public | Modifiers.Volatile | Modifiers.Synthetic), EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int compareTo(object obj)
	{
		return this.compareTo((Transaction)obj);
	}
	[LineNumberTable(23), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static string access$000(Transaction transaction)
	{
		return transaction.who;
	}
	[LineNumberTable(23), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static global::Date access$100(Transaction transaction)
	{
		return transaction.when;
	}
	[LineNumberTable(23), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
	internal static double access$200(Transaction transaction)
	{
		return transaction.amount;
	}
	[HideFromJava]
	int IComparable.Object;)IcompareTo(object obj)
	{
		return this.compareTo(obj);
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class TransitiveClosure : java.lang.Object
{
	private DirectedDFS[] tc;
	[LineNumberTable(new byte[]
	{
		5,
		104,
		113,
		107,
		47,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public TransitiveClosure(Digraph d)
	{
		this.tc = new DirectedDFS[d.V()];
		for (int i = 0; i < d.V(); i++)
		{
			this.tc[i] = new DirectedDFS(d, i);
		}
	}
	[LineNumberTable(69)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool reachable(int i1, int i2)
	{
		return this.tc[i1].marked(i2);
	}
	[LineNumberTable(new byte[]
	{
		26,
		110,
		135,
		167,
		106,
		107,
		57,
		134,
		101,
		170,
		110,
		121,
		109,
		125,
		16,
		200,
		229,
		58,
		233,
		72
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		In.__<clinit>();
		In i = new In(strarr[0]);
		Digraph digraph = new Digraph(i);
		TransitiveClosure transitiveClosure = new TransitiveClosure(digraph);
		StdOut.print("     ");
		for (int j = 0; j < digraph.V(); j++)
		{
			StdOut.printf("%3d", new object[]
			{
				Integer.valueOf(j)
			});
		}
		StdOut.println();
		StdOut.println("--------------------------------------------");
		for (int j = 0; j < digraph.V(); j++)
		{
			StdOut.printf("%3d: ", new object[]
			{
				Integer.valueOf(j)
			});
			for (int k = 0; k < digraph.V(); k++)
			{
				if (transitiveClosure.reachable(j, k))
				{
					StdOut.printf("  T", new object[0]);
				}
				else
				{
					StdOut.printf("   ", new object[0]);
				}
			}
			StdOut.println();
		}
	}
}

using IKVM.Attributes;
using ikvm.lang;
using java.lang;
using java.util;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
[Implements(new string[]
{
	"java.lang.Iterable"
}), Signature("Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;")]
public class TrieSET : java.lang.Object, Iterable, IEnumerable
{
	[EnclosingMethod("TrieSET", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("TrieSET.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), SourceFile("TrieSET.java")]
	internal sealed class Node : java.lang.Object
	{
		private TrieSET.Node[] next;
		private bool isString;
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static bool access$000(TrieSET.Node node)
		{
			return node.isString;
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TrieSET.Node[] access$100(TrieSET.Node node)
		{
			return node.next;
		}
		[LineNumberTable(43), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(TrieSET.1) : this()
		{
		}
		[LineNumberTable(43), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static bool access$002(TrieSET.Node node, bool result)
		{
			node.isString = result;
			return result;
		}
		[LineNumberTable(new byte[]
		{
			159,
			185,
			104
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node()
		{
			this.next = new TrieSET.Node[256];
		}
	}
	private const int R = 256;
	private TrieSET.Node root;
	private int N;
	[LineNumberTable(new byte[]
	{
		18,
		101,
		107,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieSET.Node get(TrieSET.Node node, string text, int num)
	{
		if (node == null)
		{
			return null;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return node;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		return this.get(TrieSET.Node.access$100(node)[num2], text, num + 1);
	}
	[LineNumberTable(new byte[]
	{
		34,
		107,
		105,
		118,
		170,
		104,
		154
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieSET.Node add(TrieSET.Node node, string text, int num)
	{
		if (node == null)
		{
			node = new TrieSET.Node(null);
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			if (!TrieSET.Node.access$000(node))
			{
				this.N++;
			}
			TrieSET.Node.access$002(node, true);
		}
		else
		{
			int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
			TrieSET.Node.access$100(node)[num2] = this.add(TrieSET.Node.access$100(node)[num2], text, num + 1);
		}
		return node;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		79,
		102,
		111,
		110
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keysWithPrefix(string str)
	{
		global::Queue queue = new global::Queue();
		TrieSET.Node node = this.get(this.root, str, 0);
		this.collect(node, new StringBuilder(str), queue);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		86,
		100,
		116,
		106,
		104,
		112,
		239,
		61,
		231,
		69
	}), Signature("(LTrieSET$Node;Ljava/lang/StringBuilder;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TrieSET.Node node, StringBuilder stringBuilder, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		if (TrieSET.Node.access$000(node))
		{
			queue.enqueue(stringBuilder.toString());
		}
		for (int i = 0; i < 256; i = (int)((ushort)(i + 1)))
		{
			stringBuilder.append((char)i);
			this.collect(TrieSET.Node.access$100(node)[i], stringBuilder, queue);
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
		}
	}
	[LineNumberTable(new byte[]
	{
		110,
		100,
		103,
		113,
		109,
		105,
		97,
		104,
		101,
		106,
		104,
		114,
		239,
		61,
		233,
		71,
		104,
		114,
		143
	}), Signature("(LTrieSET$Node;Ljava/lang/StringBuilder;Ljava/lang/String;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TrieSET.Node node, StringBuilder stringBuilder, string text, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		int num = stringBuilder.length();
		if (num == java.lang.String.instancehelper_length(text) && TrieSET.Node.access$000(node))
		{
			queue.enqueue(stringBuilder.toString());
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		if (num2 == 46)
		{
			for (int i = 0; i < 256; i = (int)((ushort)(i + 1)))
			{
				stringBuilder.append((char)i);
				this.collect(TrieSET.Node.access$100(node)[i], stringBuilder, text, queue);
				stringBuilder.deleteCharAt(stringBuilder.length() - 1);
			}
		}
		else
		{
			stringBuilder.append((char)num2);
			this.collect(TrieSET.Node.access$100(node)[num2], stringBuilder, text, queue);
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		86,
		102,
		107,
		108,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int longestPrefixOf(TrieSET.Node node, string text, int num, int num2)
	{
		if (node == null)
		{
			return num2;
		}
		if (TrieSET.Node.access$000(node))
		{
			num2 = num;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return num2;
		}
		int num3 = (int)java.lang.String.instancehelper_charAt(text, num);
		return this.longestPrefixOf(TrieSET.Node.access$100(node)[num3], text, num + 1, num2);
	}
	[LineNumberTable(new byte[]
	{
		160,
		103,
		101,
		105,
		118,
		170,
		104,
		218,
		106,
		106,
		106,
		2,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieSET.Node delete(TrieSET.Node node, string text, int num)
	{
		if (node == null)
		{
			return null;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			if (TrieSET.Node.access$000(node))
			{
				this.N--;
			}
			TrieSET.Node.access$002(node, false);
		}
		else
		{
			int i = (int)java.lang.String.instancehelper_charAt(text, num);
			TrieSET.Node.access$100(node)[i] = this.delete(TrieSET.Node.access$100(node)[i], text, num + 1);
		}
		if (TrieSET.Node.access$000(node))
		{
			return node;
		}
		for (int i = 0; i < 256; i++)
		{
			if (TrieSET.Node.access$100(node)[i] != null)
			{
				return node;
			}
		}
		return null;
	}
	[LineNumberTable(new byte[]
	{
		1,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public TrieSET()
	{
	}
	[LineNumberTable(new byte[]
	{
		30,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void add(string str)
	{
		this.root = this.add(this.root, str, 0);
	}
	[LineNumberTable(119), Signature("()Ljava/util/Iterator<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterator iterator()
	{
		return this.keysWithPrefix("").iterator();
	}
	[LineNumberTable(new byte[]
	{
		160,
		76,
		112,
		102
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string longestPrefixOf(string str)
	{
		int num = this.longestPrefixOf(this.root, str, 0, -1);
		if (num == -1)
		{
			return null;
		}
		return java.lang.String.instancehelper_substring(str, 0, num);
	}
	[LineNumberTable(new byte[]
	{
		103,
		102,
		102,
		111
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keysThatMatch(string str)
	{
		global::Queue queue = new global::Queue();
		StringBuilder stringBuilder = new StringBuilder();
		this.collect(this.root, stringBuilder, str, queue);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		12,
		111,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(string str)
	{
		TrieSET.Node node = this.get(this.root, str, 0);
		return node != null && TrieSET.Node.access$000(node);
	}
	[LineNumberTable(109)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		99,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(string str)
	{
		this.root = this.delete(this.root, str, 0);
	}
	[LineNumberTable(new byte[]
	{
		160,
		126,
		102,
		103,
		102,
		103,
		162,
		106,
		106,
		123,
		136,
		165,
		106,
		112,
		133,
		106,
		112,
		133,
		106,
		127,
		6,
		104,
		133,
		106,
		127,
		6,
		104,
		133,
		106,
		127,
		6,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		TrieSET trieSET = new TrieSET();
		while (!StdIn.IsEmpty)
		{
			string str = StdIn.readString();
			trieSET.add(str);
		}
		Iterator iterator;
		if (trieSET.size() < 100)
		{
			StdOut.println("keys(\"\"):");
			iterator = trieSET.iterator();
			while (iterator.MoveNext())
			{
				string obj = (string)iterator.Current;
				StdOut.println(obj);
			}
			StdOut.println();
		}
		StdOut.println("longestPrefixOf(\"shellsort\"):");
		StdOut.println(trieSET.longestPrefixOf("shellsort"));
		StdOut.println();
		StdOut.println("longestPrefixOf(\"xshellsort\"):");
		StdOut.println(trieSET.longestPrefixOf("xshellsort"));
		StdOut.println();
		StdOut.println("keysWithPrefix(\"shor\"):");
		iterator = trieSET.keysWithPrefix("shor").iterator();
		while (iterator.MoveNext())
		{
			string obj = (string)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.println();
		StdOut.println("keysWithPrefix(\"shortening\"):");
		iterator = trieSET.keysWithPrefix("shortening").iterator();
		while (iterator.MoveNext())
		{
			string obj = (string)iterator.Current;
			StdOut.println(obj);
		}
		StdOut.println();
		StdOut.println("keysThatMatch(\".he.l.\"):");
		iterator = trieSET.keysThatMatch(".he.l.").iterator();
		while (iterator.MoveNext())
		{
			string obj = (string)iterator.Current;
			StdOut.println(obj);
		}
	}
	[HideFromJava]
	IEnumerator IEnumerable.GetEnumerator()
	{
		return new IterableEnumerator(this);
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class TrieST : java.lang.Object
{
	[EnclosingMethod("TrieST", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("TrieST.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[InnerClass(null, Modifiers.Private | Modifiers.Static), Modifiers(Modifiers.Super), SourceFile("TrieST.java")]
	internal sealed class Node : java.lang.Object
	{
		private object val;
		private TrieST.Node[] next;
		[LineNumberTable(55), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$000(TrieST.Node node)
		{
			return node.val;
		}
		[LineNumberTable(55), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TrieST.Node[] access$100(TrieST.Node node)
		{
			return node.next;
		}
		[LineNumberTable(55), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(TrieST.1) : this()
		{
		}
		[LineNumberTable(55), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$002(TrieST.Node node, object result)
		{
			node.val = result;
			return result;
		}
		[LineNumberTable(new byte[]
		{
			5,
			136
		})]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node()
		{
			this.next = new TrieST.Node[256];
		}
	}
	private const int R = 256;
	private TrieST.Node root;
	private int N;
	[LineNumberTable(new byte[]
	{
		42,
		101,
		107,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieST.Node get(TrieST.Node node, string text, int num)
	{
		if (node == null)
		{
			return null;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return node;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		return this.get(TrieST.Node.access$100(node)[num2], text, num + 1);
	}
	[LineNumberTable(new byte[]
	{
		25,
		111,
		101
	}), Signature("(Ljava/lang/String;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(string str)
	{
		TrieST.Node node = this.get(this.root, str, 0);
		if (node == null)
		{
			return null;
		}
		return TrieST.Node.access$000(node);
	}
	[LineNumberTable(new byte[]
	{
		160,
		124,
		116
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void delete(string str)
	{
		this.root = this.delete(this.root, str, 0);
	}
	[LineNumberTable(new byte[]
	{
		62,
		107,
		106,
		118,
		104,
		130,
		105,
		124
	}), Signature("(LTrieST$Node;Ljava/lang/String;TValue;I)LTrieST$Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieST.Node put(TrieST.Node node, string text, object obj, int num)
	{
		if (node == null)
		{
			node = new TrieST.Node(null);
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			if (TrieST.Node.access$000(node) == null)
			{
				this.N++;
			}
			TrieST.Node.access$002(node, obj);
			return node;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		TrieST.Node.access$100(node)[num2] = this.put(TrieST.Node.access$100(node)[num2], text, obj, num + 1);
		return node;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		106,
		102,
		111,
		110
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keysWithPrefix(string str)
	{
		global::Queue queue = new global::Queue();
		TrieST.Node node = this.get(this.root, str, 0);
		this.collect(node, new StringBuilder(str), queue);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		113,
		100,
		116,
		106,
		104,
		112,
		239,
		61,
		231,
		69
	}), Signature("(LTrieST$Node;Ljava/lang/StringBuilder;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TrieST.Node node, StringBuilder stringBuilder, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		if (TrieST.Node.access$000(node) != null)
		{
			queue.enqueue(stringBuilder.toString());
		}
		for (int i = 0; i < 256; i = (int)((ushort)(i + 1)))
		{
			stringBuilder.append((char)i);
			this.collect(TrieST.Node.access$100(node)[i], stringBuilder, queue);
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		72,
		100,
		103,
		113,
		109,
		105,
		97,
		104,
		101,
		106,
		104,
		114,
		239,
		61,
		233,
		71,
		104,
		114,
		143
	}), Signature("(LTrieST$Node;Ljava/lang/StringBuilder;Ljava/lang/String;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TrieST.Node node, StringBuilder stringBuilder, string text, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		int num = stringBuilder.length();
		if (num == java.lang.String.instancehelper_length(text) && TrieST.Node.access$000(node) != null)
		{
			queue.enqueue(stringBuilder.toString());
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		if (num2 == 46)
		{
			for (int i = 0; i < 256; i = (int)((ushort)(i + 1)))
			{
				stringBuilder.append((char)i);
				this.collect(TrieST.Node.access$100(node)[i], stringBuilder, text, queue);
				stringBuilder.deleteCharAt(stringBuilder.length() - 1);
			}
		}
		else
		{
			stringBuilder.append((char)num2);
			this.collect(TrieST.Node.access$100(node)[num2], stringBuilder, text, queue);
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
		}
	}
	[LineNumberTable(new byte[]
	{
		160,
		111,
		102,
		107,
		108,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private int longestPrefixOf(TrieST.Node node, string text, int num, int num2)
	{
		if (node == null)
		{
			return num2;
		}
		if (TrieST.Node.access$000(node) != null)
		{
			num2 = num;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			return num2;
		}
		int num3 = (int)java.lang.String.instancehelper_charAt(text, num);
		return this.longestPrefixOf(TrieST.Node.access$100(node)[num3], text, num + 1, num2);
	}
	[LineNumberTable(new byte[]
	{
		160,
		128,
		101,
		105,
		118,
		170,
		104,
		218,
		106,
		106,
		106,
		2,
		166
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TrieST.Node delete(TrieST.Node node, string text, int num)
	{
		if (node == null)
		{
			return null;
		}
		if (num == java.lang.String.instancehelper_length(text))
		{
			if (TrieST.Node.access$000(node) != null)
			{
				this.N--;
			}
			TrieST.Node.access$002(node, null);
		}
		else
		{
			int i = (int)java.lang.String.instancehelper_charAt(text, num);
			TrieST.Node.access$100(node)[i] = this.delete(TrieST.Node.access$100(node)[i], text, num + 1);
		}
		if (TrieST.Node.access$000(node) != null)
		{
			return node;
		}
		for (int i = 0; i < 256; i++)
		{
			if (TrieST.Node.access$100(node)[i] != null)
			{
				return node;
			}
		}
		return null;
	}
	[LineNumberTable(new byte[]
	{
		10,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public TrieST()
	{
	}
	[LineNumberTable(new byte[]
	{
		57,
		108,
		117
	}), Signature("(Ljava/lang/String;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(string str, object obj)
	{
		if (obj == null)
		{
			this.delete(str);
		}
		else
		{
			this.root = this.put(this.root, str, obj, 0);
		}
	}
	[LineNumberTable(146), Signature("()Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		return this.keysWithPrefix("");
	}
	[LineNumberTable(new byte[]
	{
		160,
		102,
		112
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string longestPrefixOf(string str)
	{
		int endIndex = this.longestPrefixOf(this.root, str, 0, 0);
		return java.lang.String.instancehelper_substring(str, 0, endIndex);
	}
	[LineNumberTable(new byte[]
	{
		160,
		66,
		102,
		115
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keysThatMatch(string str)
	{
		global::Queue queue = new global::Queue();
		this.collect(this.root, new StringBuilder(), str, queue);
		return queue;
	}
	[LineNumberTable(88)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(string str)
	{
		return this.get(str) != null;
	}
	[LineNumberTable(136)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public bool IsEmpty
	{
		return this.size() == 0;
	}
	[LineNumberTable(new byte[]
	{
		160,
		152,
		102,
		105,
		102,
		13,
		230,
		70,
		106,
		106,
		127,
		1,
		159,
		14,
		165,
		106,
		112,
		133,
		106,
		127,
		6,
		104,
		133,
		106,
		127,
		6,
		104
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		TrieST trieST = new TrieST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			trieST.put(text, Integer.valueOf(num));
			num++;
		}
		Iterator iterator;
		if (trieST.size() < 100)
		{
			StdOut.println("keys(\"\"):");
			iterator = trieST.keys().iterator();
			while (iterator.MoveNext())
			{
				string text = (string)iterator.Current;
				StdOut.println(new StringBuilder().append(text).append(" ").append(trieST.get(text)).toString());
			}
			StdOut.println();
		}
		StdOut.println("longestPrefixOf(\"shellsort\"):");
		StdOut.println(trieST.longestPrefixOf("shellsort"));
		StdOut.println();
		StdOut.println("keysWithPrefix(\"shor\"):");
		iterator = trieST.keysWithPrefix("shor").iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(text);
		}
		StdOut.println();
		StdOut.println("keysThatMatch(\".he.l.\"):");
		iterator = trieST.keysThatMatch(".he.l.").iterator();
		while (iterator.MoveNext())
		{
			string text = (string)iterator.Current;
			StdOut.println(text);
		}
	}
}

using IKVM.Attributes;
using java.lang;
using java.util;
using System;
using System.Runtime.CompilerServices;
[Signature("<Value:Ljava/lang/Object;>Ljava/lang/Object;")]
public class TST : java.lang.Object
{
	[EnclosingMethod("TST", null, null), InnerClass(null, Modifiers.Static | Modifiers.Synthetic), Modifiers(Modifiers.Super | Modifiers.Synthetic), SourceFile("TST.java")]
	internal sealed class 1 : java.lang.Object
	{
		1()
		{
			throw null;
		}
	}
	[InnerClass(null, Modifiers.Private), Modifiers(Modifiers.Super), SourceFile("TST.java")]
	internal sealed class Node : java.lang.Object
	{
		private char c;
		[Signature("LTST<TValue;>.Node;")]
		private TST.Node left;
		[Signature("LTST<TValue;>.Node;")]
		private TST.Node mid;
		[Signature("LTST<TValue;>.Node;")]
		private TST.Node right;
		[Signature("TValue;")]
		private object val;
		[Modifiers(Modifiers.Final | Modifiers.Synthetic)]
		internal TST this$0 = tST;
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$000(TST.Node node)
		{
			return node.val;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static char access$100(TST.Node node)
		{
			return node.c;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$200(TST.Node node)
		{
			return node.left;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$300(TST.Node node)
		{
			return node.right;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$400(TST.Node node)
		{
			return node.mid;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Synthetic)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Node(TST tST, TST.1) : this(tST)
		{
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static char access$102(TST.Node node, char result)
		{
			node.c = result;
			return result;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$202(TST.Node node, TST.Node result)
		{
			node.left = result;
			return result;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$302(TST.Node node, TST.Node result)
		{
			node.right = result;
			return result;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static TST.Node access$402(TST.Node node, TST.Node result)
		{
			node.mid = result;
			return result;
		}
		[LineNumberTable(33), Modifiers(Modifiers.Static | Modifiers.Synthetic)]
		internal static object access$002(TST.Node node, object result)
		{
			node.val = result;
			return result;
		}
		[LineNumberTable(33)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Node(TST tST)
		{
		}
	}
	private int N;
	[Signature("LTST<TValue;>.Node;")]
	private TST.Node root;
	[LineNumberTable(new byte[]
	{
		159,
		171,
		200
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public TST()
	{
	}
	[LineNumberTable(new byte[]
	{
		26,
		119,
		117
	}), Signature("(Ljava/lang/String;TValue;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void put(string str, object obj)
	{
		if (!this.contains(str))
		{
			this.N++;
		}
		this.root = this.put(this.root, str, obj, 0);
	}
	[LineNumberTable(new byte[]
	{
		48,
		109,
		98,
		103,
		98,
		114,
		104,
		114,
		146,
		100,
		106,
		135,
		101
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual string longestPrefixOf(string str)
	{
		if (str == null || java.lang.String.instancehelper_length(str) == 0)
		{
			return null;
		}
		int endIndex = 0;
		TST.Node node = this.root;
		int num = 0;
		while (node != null && num < java.lang.String.instancehelper_length(str))
		{
			int num2 = (int)java.lang.String.instancehelper_charAt(str, num);
			if (num2 < (int)TST.Node.access$100(node))
			{
				node = TST.Node.access$200(node);
			}
			else if (num2 > (int)TST.Node.access$100(node))
			{
				node = TST.Node.access$300(node);
			}
			else
			{
				num++;
				if (TST.Node.access$000(node) != null)
				{
					endIndex = num;
				}
				node = TST.Node.access$400(node);
			}
		}
		return java.lang.String.instancehelper_substring(str, 0, endIndex);
	}
	[LineNumberTable(new byte[]
	{
		2,
		110,
		120,
		111,
		101
	}), Signature("(Ljava/lang/String;)TValue;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual object get(string str)
	{
		if (str == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException();
		}
		if (java.lang.String.instancehelper_length(str) == 0)
		{
			string arg_20_0 = "key must have length >= 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_20_0);
		}
		TST.Node node = this.get(this.root, str, 0);
		if (node == null)
		{
			return null;
		}
		return TST.Node.access$000(node);
	}
	[LineNumberTable(new byte[]
	{
		11,
		110,
		120,
		101,
		104,
		122,
		122,
		126
	}), Signature("(LTST<TValue;>.Node;Ljava/lang/String;I)LTST<TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TST.Node get(TST.Node node, string text, int num)
	{
		if (text == null)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new NullPointerException();
		}
		if (java.lang.String.instancehelper_length(text) == 0)
		{
			string arg_20_0 = "key must have length >= 1";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_20_0);
		}
		if (node == null)
		{
			return null;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		if (num2 < (int)TST.Node.access$100(node))
		{
			return this.get(TST.Node.access$200(node), text, num);
		}
		if (num2 > (int)TST.Node.access$100(node))
		{
			return this.get(TST.Node.access$300(node), text, num);
		}
		if (num < java.lang.String.instancehelper_length(text) - 1)
		{
			return this.get(TST.Node.access$400(node), text, num + 1);
		}
		return node;
	}
	[LineNumberTable(48)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool contains(string str)
	{
		return this.get(str) != null;
	}
	[LineNumberTable(new byte[]
	{
		31,
		105,
		99,
		105,
		136,
		127,
		3,
		127,
		3,
		127,
		8,
		104
	}), Signature("(LTST<TValue;>.Node;Ljava/lang/String;TValue;I)LTST<TValue;>.Node;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private TST.Node put(TST.Node node, string text, object obj, int num)
	{
		int num2 = (int)java.lang.String.instancehelper_charAt(text, num);
		if (node == null)
		{
			node = new TST.Node(this, null);
			TST.Node.access$102(node, (char)num2);
		}
		if (num2 < (int)TST.Node.access$100(node))
		{
			TST.Node.access$202(node, this.put(TST.Node.access$200(node), text, obj, num));
		}
		else if (num2 > (int)TST.Node.access$100(node))
		{
			TST.Node.access$302(node, this.put(TST.Node.access$300(node), text, obj, num));
		}
		else if (num < java.lang.String.instancehelper_length(text) - 1)
		{
			TST.Node.access$402(node, this.put(TST.Node.access$400(node), text, obj, num + 1));
		}
		else
		{
			TST.Node.access$002(node, obj);
		}
		return node;
	}
	[LineNumberTable(new byte[]
	{
		84,
		100,
		110,
		127,
		10,
		127,
		9,
		112
	}), Signature("(LTST<TValue;>.Node;Ljava/lang/String;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TST.Node node, string text, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		this.collect(TST.Node.access$200(node), text, queue);
		if (TST.Node.access$000(node) != null)
		{
			queue.enqueue(new StringBuilder().append(text).append(TST.Node.access$100(node)).toString());
		}
		this.collect(TST.Node.access$400(node), new StringBuilder().append(text).append(TST.Node.access$100(node)).toString(), queue);
		this.collect(TST.Node.access$300(node), text, queue);
	}
	[LineNumberTable(new byte[]
	{
		100,
		100,
		105,
		127,
		1,
		110,
		127,
		23,
		159,
		27,
		127,
		3
	}), Signature("(LTST<TValue;>.Node;Ljava/lang/String;ILjava/lang/String;LQueue<Ljava/lang/String;>;)V")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	private void collect(TST.Node node, string text, int num, string text2, global::Queue queue)
	{
		if (node == null)
		{
			return;
		}
		int num2 = (int)java.lang.String.instancehelper_charAt(text2, num);
		if (num2 == 46 || num2 < (int)TST.Node.access$100(node))
		{
			this.collect(TST.Node.access$200(node), text, num, text2, queue);
		}
		if (num2 == 46 || num2 == (int)TST.Node.access$100(node))
		{
			if (num == java.lang.String.instancehelper_length(text2) - 1 && TST.Node.access$000(node) != null)
			{
				queue.enqueue(new StringBuilder().append(text).append(TST.Node.access$100(node)).toString());
			}
			if (num < java.lang.String.instancehelper_length(text2) - 1)
			{
				this.collect(TST.Node.access$400(node), new StringBuilder().append(text).append(TST.Node.access$100(node)).toString(), num + 1, text2, queue);
			}
		}
		if (num2 == 46 || num2 > (int)TST.Node.access$100(node))
		{
			this.collect(TST.Node.access$300(node), text, num, text2, queue);
		}
	}
	[LineNumberTable(new byte[]
	{
		67,
		102,
		114
	}), Signature("()Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable keys()
	{
		global::Queue queue = new global::Queue();
		this.collect(this.root, "", queue);
		return queue;
	}
	public int Size
	{
		return this.N;
	}
	[LineNumberTable(new byte[]
	{
		74,
		102,
		111,
		101,
		111,
		110
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable prefixMatch(string str)
	{
		global::Queue queue = new global::Queue();
		TST.Node node = this.get(this.root, str, 0);
		if (node == null)
		{
			return queue;
		}
		if (TST.Node.access$000(node) != null)
		{
			queue.enqueue(str);
		}
		this.collect(TST.Node.access$400(node), str, queue);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		94,
		102,
		116
	}), Signature("(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;")]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Iterable wildcardMatch(string str)
	{
		global::Queue queue = new global::Queue();
		this.collect(this.root, "", 0, str, queue);
		return queue;
	}
	[LineNumberTable(new byte[]
	{
		115,
		102,
		105,
		102,
		13,
		230,
		71,
		127,
		1,
		159,
		14
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		TST tST = new TST();
		int num = 0;
		while (!StdIn.IsEmpty)
		{
			string str = StdIn.readString();
			tST.put(str, Integer.valueOf(num));
			num++;
		}
		Iterator iterator = tST.keys().iterator();
		while (iterator.MoveNext())
		{
			string str = (string)iterator.Current;
			StdOut.println(new StringBuilder().append(str).append(" ").append(tST.get(str)).toString());
		}
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class UF : java.lang.Object
{
	private int[] id;
	private byte[] rank;
	private int count;
	[LineNumberTable(new byte[]
	{
		55,
		104,
		111,
		103,
		108,
		108,
		102,
		105,
		9,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public UF(int i)
	{
		if (i < 0)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException();
		}
		this.count = i;
		this.id = new int[i];
		this.rank = new byte[i];
		for (int j = 0; j < i; j++)
		{
			this.id[j] = j;
			this.rank[j] = 0;
		}
	}
	[LineNumberTable(new byte[]
	{
		73,
		121,
		107,
		119,
		140
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual int find(int i)
	{
		if (i < 0 || i >= this.id.Length)
		{
			Throwable.__<suppressFillInStackTrace>();
			throw new IndexOutOfBoundsException();
		}
		while (i != this.id[i])
		{
			this.id[i] = this.id[this.id[i]];
			i = this.id[i];
		}
		return i;
	}
	[LineNumberTable(148)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool connected(int i1, int i2)
	{
		return this.find(i1) == this.find(i2);
	}
	[LineNumberTable(new byte[]
	{
		111,
		104,
		104,
		165,
		125,
		157,
		105,
		146,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void union(int i1, int i2)
	{
		int num = this.find(i1);
		int num2 = this.find(i2);
		if (num == num2)
		{
			return;
		}
		if (this.rank[num] < this.rank[num2])
		{
			this.id[num] = num2;
		}
		else if (this.rank[num] > this.rank[num2])
		{
			this.id[num2] = num;
		}
		else
		{
			this.id[num2] = num;
			byte[] arg_60_0 = this.rank;
			int num3 = num;
			byte[] array = arg_60_0;
			array[num3] = (byte)((sbyte)(array[num3] + 1));
		}
		this.count--;
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(new byte[]
	{
		160,
		70,
		102,
		103,
		103,
		102,
		102,
		108,
		104,
		127,
		6,
		98,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int i = StdIn.readInt();
		UF uF = new UF(i);
		while (!StdIn.IsEmpty)
		{
			int num = StdIn.readInt();
			int num2 = StdIn.readInt();
			if (!uF.connected(num, num2))
			{
				uF.union(num, num2);
				StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
			}
		}
		StdOut.println(new StringBuilder().append(uF.count()).append(" components").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class Vector : java.lang.Object
{
	private int N;
	private double[] data;
	[LineNumberTable(new byte[]
	{
		33,
		126,
		102,
		107,
		53,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double dot(Vector v)
	{
		if (this.N != v.N)
		{
			string arg_18_0 = "Dimensions don't agree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		double num = (double)0f;
		for (int i = 0; i < this.N; i++)
		{
			num += this.data[i] * v.data[i];
		}
		return num;
	}
	[LineNumberTable(new byte[]
	{
		80,
		126,
		108,
		107,
		58,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Vector minus(Vector v)
	{
		if (this.N != v.N)
		{
			string arg_18_0 = "Dimensions don't agree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		Vector vector = new Vector(this.N);
		for (int i = 0; i < this.N; i++)
		{
			vector.data[i] = this.data[i] - v.data[i];
		}
		return vector;
	}
	[LineNumberTable(95)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double magnitude()
	{
		return java.lang.Math.sqrt(this.dot(this));
	}
	[LineNumberTable(new byte[]
	{
		159,
		190,
		104,
		103,
		113
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Vector(int i)
	{
		this.N = i;
		this.data = new double[this.N];
	}
	[LineNumberTable(new byte[]
	{
		102,
		108,
		107,
		52,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Vector times(double d)
	{
		Vector vector = new Vector(this.N);
		for (int i = 0; i < this.N; i++)
		{
			vector.data[i] = d * this.data[i];
		}
		return vector;
	}
	[LineNumberTable(new byte[]
	{
		9,
		104,
		168,
		113,
		107,
		43,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public Vector(params double[] darr)
	{
		this.N = darr.Length;
		this.data = new double[this.N];
		for (int i = 0; i < this.N; i++)
		{
			this.data[i] = darr[i];
		}
	}
	[LineNumberTable(new byte[]
	{
		66,
		126,
		108,
		107,
		58,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Vector plus(Vector v)
	{
		if (this.N != v.N)
		{
			string arg_18_0 = "Dimensions don't agree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		Vector vector = new Vector(this.N);
		for (int i = 0; i < this.N; i++)
		{
			vector.data[i] = this.data[i] + v.data[i];
		}
		return vector;
	}
	[LineNumberTable(new byte[]
	{
		55,
		126
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual double distanceTo(Vector v)
	{
		if (this.N != v.N)
		{
			string arg_18_0 = "Dimensions don't agree";
			Throwable.__<suppressFillInStackTrace>();
			throw new IllegalArgumentException(arg_18_0);
		}
		return this.minus(v).magnitude();
	}
	[LineNumberTable(new byte[]
	{
		114,
		125
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual Vector direction()
	{
		if (this.magnitude() == (double)0f)
		{
			string arg_17_0 = "Zero-vector has no direction";
			Throwable.__<suppressFillInStackTrace>();
			throw new java.lang.ArithmeticException(arg_17_0);
		}
		return this.times((double)1f / this.magnitude());
	}
	public virtual int length()
	{
		return this.N;
	}
	[LineNumberTable(143)]
	public virtual double cartesian(int i)
	{
		return this.data[i];
	}
	[LineNumberTable(new byte[]
	{
		125,
		102,
		107,
		63,
		9,
		134
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public override string toString()
	{
		string text = "";
		for (int i = 0; i < this.N; i++)
		{
			text = new StringBuilder().append(text).append(this.data[i]).append(" ").toString();
		}
		return text;
	}
	[LineNumberTable(new byte[]
	{
		160,
		71,
		127,
		20,
		127,
		20,
		103,
		135,
		127,
		0,
		159,
		0,
		105,
		159,
		1,
		114,
		159,
		1,
		127,
		5,
		127,
		6,
		127,
		6,
		159,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		double[] darr = new double[]
		{
			(double)1f,
			2.0,
			3.0,
			4.0
		};
		double[] darr2 = new double[]
		{
			5.0,
			2.0,
			4.0,
			(double)1f
		};
		Vector vector = new Vector(darr);
		Vector vector2 = new Vector(darr2);
		StdOut.println(new StringBuilder().append("   x       = ").append(vector).toString());
		StdOut.println(new StringBuilder().append("   y       = ").append(vector2).toString());
		Vector vector3 = vector.plus(vector2);
		StdOut.println(new StringBuilder().append("   z       = ").append(vector3).toString());
		vector3 = vector3.times(10.0);
		StdOut.println(new StringBuilder().append(" 10z       = ").append(vector3).toString());
		StdOut.println(new StringBuilder().append("  |x|      = ").append(vector.magnitude()).toString());
		StdOut.println(new StringBuilder().append(" <x, y>    = ").append(vector.dot(vector2)).toString());
		StdOut.println(new StringBuilder().append("dist(x, y) = ").append(vector.distanceTo(vector2)).toString());
		StdOut.println(new StringBuilder().append("dir(x)     = ").append(vector.direction()).toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class WeightedQuickUnionUF : java.lang.Object
{
	private int[] id;
	private int[] sz;
	private int count;
	[LineNumberTable(new byte[]
	{
		13,
		107,
		108
	})]
	public virtual int find(int i)
	{
		while (i != this.id[i])
		{
			i = this.id[i];
		}
		return i;
	}
	[LineNumberTable(new byte[]
	{
		159,
		180,
		104,
		103,
		108,
		108,
		102,
		105,
		9,
		198
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public WeightedQuickUnionUF(int i)
	{
		this.count = i;
		this.id = new int[i];
		this.sz = new int[i];
		for (int j = 0; j < i; j++)
		{
			this.id[j] = j;
			this.sz[j] = 1;
		}
	}
	[LineNumberTable(77)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual bool connected(int i1, int i2)
	{
		return this.find(i1) == this.find(i2);
	}
	[LineNumberTable(new byte[]
	{
		39,
		104,
		104,
		165,
		127,
		22,
		127,
		2,
		110
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public virtual void union(int i1, int i2)
	{
		int num = this.find(i1);
		int num2 = this.find(i2);
		if (num == num2)
		{
			return;
		}
		if (this.sz[num] < this.sz[num2])
		{
			this.id[num] = num2;
			int[] arg_38_0 = this.sz;
			int num3 = num2;
			int[] array = arg_38_0;
			array[num3] += this.sz[num];
		}
		else
		{
			this.id[num2] = num;
			int[] arg_5B_0 = this.sz;
			int num3 = num;
			int[] array = arg_5B_0;
			array[num3] += this.sz[num2];
		}
		this.count--;
	}
	public virtual int count()
	{
		return this.count;
	}
	[LineNumberTable(new byte[]
	{
		57,
		102,
		103,
		103,
		102,
		102,
		108,
		104,
		127,
		6,
		98,
		127,
		7
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		int i = StdIn.readInt();
		WeightedQuickUnionUF weightedQuickUnionUF = new WeightedQuickUnionUF(i);
		while (!StdIn.IsEmpty)
		{
			int num = StdIn.readInt();
			int num2 = StdIn.readInt();
			if (!weightedQuickUnionUF.connected(num, num2))
			{
				weightedQuickUnionUF.union(num, num2);
				StdOut.println(new StringBuilder().append(num).append(" ").append(num2).toString());
			}
		}
		StdOut.println(new StringBuilder().append(weightedQuickUnionUF.count()).append(" components").toString());
	}
}

using IKVM.Attributes;
using java.lang;
using System;
using System.Runtime.CompilerServices;
public class WhiteFilter : java.lang.Object
{
	[LineNumberTable(31)]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public WhiteFilter()
	{
	}
	[LineNumberTable(new byte[]
	{
		159,
		175,
		166,
		110,
		104,
		103,
		103,
		162,
		103,
		102,
		105,
		102,
		98
	})]
	[MethodImpl(MethodImplOptions.NoInlining)]
	public static void main(string[] strarr)
	{
		SET sET = new SET();
		In.__<clinit>();
		In @in = new In(strarr[0]);
		while (!@in.IsEmpty)
		{
			string text = @in.readString();
			sET.add(text);
		}
		while (!StdIn.IsEmpty)
		{
			string text = StdIn.readString();
			if (sET.contains(text))
			{
				StdOut.println(text);
			}
		}
	}
}
